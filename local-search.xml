<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DRF组件之限流</title>
    <link href="/2023/04/28/0520-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%99%90%E6%B5%81/"/>
    <url>/2023/04/28/0520-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%99%90%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、限流组件介绍"><a href="#一、限流组件介绍" class="headerlink" title="一、限流组件介绍"></a>一、限流组件介绍</h2><h3 id="1-限流功能简介"><a href="#1-限流功能简介" class="headerlink" title="1. 限流功能简介"></a>1. 限流功能简介</h3><h4 id="1-1-限流的作用"><a href="#1-1-限流的作用" class="headerlink" title="1.1 限流的作用"></a>1.1 限流的作用</h4><p>为了对用户的访问行为进行限制，例如普通用户和会员用户对同一接口允许访问的次数不一样，或避免用户恶意压测接口对服务进行攻击，后台提供的 <code>API</code> 接口应当对用户进行限流。</p><h4 id="1-2-限流功能实现的原理"><a href="#1-2-限流功能实现的原理" class="headerlink" title="1.2 限流功能实现的原理"></a>1.2 限流功能实现的原理</h4><ul><li>第一步，后台会对访问的用户进行一个身份标识<ul><li>对于匿名用户（未登录），使用用户 <code>IP</code> 作为唯一标识</li><li>对于登录用户，使用用户 <code>ID</code> 或名称作为唯一标识</li></ul></li><li>第二步，后台将用户每次访问的时间都记录到缓存之中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<br>    <span class="hljs-comment"># 匿名用户</span><br><span class="hljs-string">&quot;127.0.0.1&quot;</span>: [<span class="hljs-string">&quot;13:00:00&quot;</span>, <span class="hljs-string">&quot;12:30:23&quot;</span>, <span class="hljs-string">&quot;12:00:00&quot;</span>, <span class="hljs-string">&quot;11:10:58&quot;</span>]<br>    <br>    <span class="hljs-comment"># 已登录的用户</span><br>    <span class="hljs-string">&quot;cdc&quot;</span>: [<span class="hljs-string">&quot;13:00:00&quot;</span>, <span class="hljs-string">&quot;12:30:23&quot;</span>, <span class="hljs-string">&quot;12:00:00&quot;</span>, <span class="hljs-string">&quot;11:10:58&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第三步，根据限流规则进行判断，例如假设限流规则为 <code>10次/小时</code>，后台会将本次用户访问的时间作为开始时间，向前倒退一小时的时间作为截止时间，从缓存中将该用户在截止时间之前的记录都删除，判断剩下的记录数量是否已经达到上限，若未达到则允许访问</li></ul><h3 id="2-限流组件的使用"><a href="#2-限流组件的使用" class="headerlink" title="2. 限流组件的使用"></a>2. 限流组件的使用</h3><h4 id="2-1-限流信息缓存配置"><a href="#2-1-限流信息缓存配置" class="headerlink" title="2.1 限流信息缓存配置"></a>2.1 限流信息缓存配置</h4><p>用户访问记录存放的缓存载体种类可以有很多种，一般都是使用  <code>redis</code> 缓存（本机上要先安装 <code>redis</code> 并启动）：</p><ul><li>安装三方库连接 <code>redis</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip install django<span class="hljs-literal">-redis</span>==<span class="hljs-number">4</span>.*<br></code></pre></td></tr></table></figure><ul><li>添加缓存配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>CACHES = &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;BACKEND&quot;</span>: <span class="hljs-string">&quot;django_redis.cache.RedisCache&quot;</span>,<br>        <span class="hljs-string">&quot;LOCATION&quot;</span>: <span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>,<br>        <span class="hljs-string">&quot;OPTIONS&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;CLIENT_CLASS&quot;</span>: <span class="hljs-string">&quot;django_redis.client.DefaultClient&quot;</span>,<br>            <span class="hljs-string">&quot;PASSWORD&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-编写限流类"><a href="#2-2-编写限流类" class="headerlink" title="2.2 编写限流类"></a>2.2 编写限流类</h4><p>限流类必须继承 <code>rest_framework.throttling.SimpleRateThrottle</code> 类，必须实现 <code>get_cache_key</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/throttle.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> SimpleRateThrottle<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> django.core.cache <span class="hljs-keyword">import</span> cache <span class="hljs-keyword">as</span> default_cache<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrottledException</span>(exceptions.APIException):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    用于定义限流后返回的错误码</span><br><span class="hljs-string">    这个类可以不用写</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    status_code = status.HTTP_429_TOO_MANY_REQUESTS<br>    default_code = <span class="hljs-string">&#x27;throttled&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRateThrottle</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br><br>    <span class="hljs-comment"># 用户访问记录存放在django的缓存中（需设置缓存）</span><br>    cache = default_cache<br><br>    <span class="hljs-comment"># 缓存中存放用户记录区域的key</span><br>    scope = <span class="hljs-string">&quot;user&quot;</span><br><br>    <span class="hljs-comment"># 每条用户记录的key</span><br>    <span class="hljs-comment"># throttle_user_cdc</span><br>    <span class="hljs-comment"># throttle_user_127.0.0.1</span><br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br><br>    <span class="hljs-comment"># 设置访问频率，例如：1分钟允许访问10次</span><br>    <span class="hljs-comment"># 其他：&#x27;s&#x27;, &#x27;sec&#x27;, &#x27;m&#x27;, &#x27;min&#x27;, &#x27;h&#x27;, &#x27;hour&#x27;, &#x27;d&#x27;, &#x27;day&#x27;</span><br>    THROTTLE_RATES = &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;10/m&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        针对访问的用户构造一个标识（键），存放在缓存中</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :param view:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> request.user:<br>            <span class="hljs-comment"># 如果用户登录了，则获取用户ID</span><br>            ident = request.user.pk<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 获取请求用户IP（底层去request中找请求头）</span><br>            ident = <span class="hljs-variable language_">self</span>.get_ident(request)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache_format % &#123;<span class="hljs-string">&#x27;scope&#x27;</span>: <span class="hljs-variable language_">self</span>.scope, <span class="hljs-string">&#x27;ident&#x27;</span>: ident&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        定义用户被限流后返回的错误信息</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 用户再等多久才能访问</span><br>        wait = <span class="hljs-variable language_">self</span>.wait()<br><br>        detail = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1005</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;访问频率限制&quot;</span>,<br>            <span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&quot;需等待&#123;&#125;s才能访问&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(wait))<br>        &#125;<br>        <br>        <span class="hljs-keyword">raise</span> ThrottledException(detail)<br></code></pre></td></tr></table></figure><h4 id="2-3-路由"><a href="#2-3-路由" class="headerlink" title="2.3 路由"></a>2.3 路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/order/&#x27;</span>, views.ProductView.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="2-4-编写视图类"><a href="#2-4-编写视图类" class="headerlink" title="2.4 编写视图类"></a>2.4 编写视图类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> app01.throttle <span class="hljs-keyword">import</span> MyRateThrottle<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 视图类中想使用限流组件，必须设置 throttle_classes</span><br>    throttle_classes = [MyRateThrottle, ]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;访问成功&quot;</span>&#125;<br><br>        <span class="hljs-keyword">return</span> Response(ret_data)<br></code></pre></td></tr></table></figure><h4 id="2-5-限流校验"><a href="#2-5-限流校验" class="headerlink" title="2.5 限流校验"></a>2.5 限流校验</h4><p>启动服务，连续访问路由 <code>http://127.0.0.1:8000/api/order/</code> 10 次都可以拿到正常的后台响应，访问第 11 次时报错</p><img src="/img/blog/about_drf/drf27.png" style="zoom:80%;" /> <h4 id="2-6-限流组件的全局使用"><a href="#2-6-限流组件的全局使用" class="headerlink" title="2.6 限流组件的全局使用"></a>2.6 限流组件的全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 配置限流组件全局使用</span><br>    <span class="hljs-string">&quot;DEFAULT_THROTTLE_CLASSES&quot;</span>: [<span class="hljs-string">&quot;app01.throttle.MyRateThrottle&quot;</span>],<br>    <br>    <span class="hljs-comment"># 针对多个限流类分别指定限流规则，键为每个限流类中定义的scope变量的值</span><br>    <span class="hljs-string">&quot;DEFAULT_THROTTLE_RATES&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;10/m&quot;</span>,<br>        <span class="hljs-string">&quot;xxx&quot;</span>: <span class="hljs-string">&quot;100/h&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、多个限流类"><a href="#二、多个限流类" class="headerlink" title="二、多个限流类"></a>二、多个限流类</h2><h3 id="1-多个限流类的使用"><a href="#1-多个限流类的使用" class="headerlink" title="1. 多个限流类的使用"></a>1. 多个限流类的使用</h3><p>和认证组件、权限组件一样，视图类也支持多个限流组件，多个限流类存放在视图类的 <code>throttle_classes</code> 中，按照顺序依次执行。</p><ul><li>编写多个限流类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> SimpleRateThrottle<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> django.core.cache <span class="hljs-keyword">import</span> cache <span class="hljs-keyword">as</span> default_cache<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRateThrottle</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br>    cache = default_cache<br>    scope = <span class="hljs-string">&quot;user&quot;</span><br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br><br>    <span class="hljs-comment"># 如果全局配置中设置了，这行就不用写了</span><br>    THROTTLE_RATES = &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;10/m&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">if</span> request.user:<br>            ident = request.user.pk<br>        <span class="hljs-keyword">else</span>:<br>            ident = <span class="hljs-variable language_">self</span>.get_ident(request)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache_format % &#123;<span class="hljs-string">&#x27;scope&#x27;</span>: <span class="hljs-variable language_">self</span>.scope, <span class="hljs-string">&#x27;ident&#x27;</span>: ident&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        wait = <span class="hljs-variable language_">self</span>.wait()<br>        detail = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1005</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;接口1访问频率限制&quot;</span>,<br>            <span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&quot;接口1需等待&#123;&#125;s才能访问&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(wait))<br>        &#125;<br><br>        <span class="hljs-keyword">raise</span> ThrottledException(detail)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRateThrottle2</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br>    cache = default_cache<br>    scope = <span class="hljs-string">&quot;xxx&quot;</span><br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br><br>    <span class="hljs-comment"># 如果全局配置中设置了，这行就不用写了</span><br>    THROTTLE_RATES = &#123;<span class="hljs-string">&quot;xxx&quot;</span>: <span class="hljs-string">&quot;3/m&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">if</span> request.user:<br>            ident = request.user.pk<br>        <span class="hljs-keyword">else</span>:<br>            ident = <span class="hljs-variable language_">self</span>.get_ident(request)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache_format % &#123;<span class="hljs-string">&#x27;scope&#x27;</span>: <span class="hljs-variable language_">self</span>.scope, <span class="hljs-string">&#x27;ident&#x27;</span>: ident&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        wait = <span class="hljs-variable language_">self</span>.wait()<br><br>        detail = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1005</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;接口2访问频率限制&quot;</span>,<br>            <span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&quot;接口2需等待&#123;&#125;s才能访问&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(wait))<br>        &#125;<br><br>        <span class="hljs-keyword">raise</span> ThrottledException(detail)<br></code></pre></td></tr></table></figure><ul><li>视图类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> app01.throttle <span class="hljs-keyword">import</span> MyRateThrottle, MyRateThrottle2<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 视图类中想使用限流组件，必须设置 throttle_classes</span><br>    throttle_classes = [MyRateThrottle, MyRateThrottle2]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;访问成功&quot;</span>&#125;<br><br>        <span class="hljs-keyword">return</span> Response(ret_data)<br><br></code></pre></td></tr></table></figure><h3 id="2-多个限流类的执行过程"><a href="#2-多个限流类的执行过程" class="headerlink" title="2. 多个限流类的执行过程"></a>2. 多个限流类的执行过程</h3><p>存在多个限流类的情况下，每个限流类校验无非最终会有两种结果</p><ul><li>限流类执行过程中报错，抛出异常。此时表示当前限流类校验未通过，后续的其他限流类也不再执行；</li><li>限流类执行过程未报错，校验完成会返回一个布尔值，如果返回结果为 <code>False</code> ，则将该限流类存放在一个全局的列表中，否则就不做任何操作；继续执行下一个限流类，根据返回结果重复上手步骤；当所有限流类都执行完，判断全局的列表中是否存在未通过的限流类，存在则会调用内部的一个 <code>self.throttled</code> 方法返回异常，但是往往 <code>self.throttled</code> 方法返回的信息比较简单，我们可以在视图类中重写该方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 限流类中不抛出异常，失败就直接返回 False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRateThrottle</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br>    cache = default_cache<br>    scope = <span class="hljs-string">&quot;user&quot;</span><br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br><br>    <span class="hljs-comment"># 如果全局配置中设置了，这行就不用写了</span><br>    THROTTLE_RATES = &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;10/m&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">if</span> request.user:<br>            ident = request.user.pk<br>        <span class="hljs-keyword">else</span>:<br>            ident = <span class="hljs-variable language_">self</span>.get_ident(request)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache_format % &#123;<span class="hljs-string">&#x27;scope&#x27;</span>: <span class="hljs-variable language_">self</span>.scope, <span class="hljs-string">&#x27;ident&#x27;</span>: ident&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRateThrottle2</span>(<span class="hljs-title class_ inherited__">SimpleRateThrottle</span>):<br>    cache = default_cache<br>    scope = <span class="hljs-string">&quot;xxx&quot;</span><br>    cache_format = <span class="hljs-string">&#x27;throttle_%(scope)s_%(ident)s&#x27;</span><br><br>    <span class="hljs-comment"># 如果全局配置中设置了，这行就不用写了</span><br>    THROTTLE_RATES = &#123;<span class="hljs-string">&quot;xxx&quot;</span>: <span class="hljs-string">&quot;3/m&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cache_key</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">if</span> request.user:<br>            ident = request.user.pk<br>        <span class="hljs-keyword">else</span>:<br>            ident = <span class="hljs-variable language_">self</span>.get_ident(request)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cache_format % &#123;<span class="hljs-string">&#x27;scope&#x27;</span>: <span class="hljs-variable language_">self</span>.scope, <span class="hljs-string">&#x27;ident&#x27;</span>: ident&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttle_failure</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在视图类中抛出异常信息</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> app01.throttle <span class="hljs-keyword">import</span> MyRateThrottle, MyRateThrottle2<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 视图类中想使用限流组件，必须设置 throttle_classes</span><br>    throttle_classes = [MyRateThrottle, MyRateThrottle2]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;访问成功&quot;</span>&#125;<br><br>        <span class="hljs-keyword">return</span> Response(ret_data)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">throttled</span>(<span class="hljs-params">self, request, wait</span>):<br>        detail = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1005</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;访问频率&quot;</span>,<br>            <span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&quot;需等待&#123;&#125;s才能访问&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(wait))<br>        &#125;<br>        <span class="hljs-keyword">raise</span> ThrottledException(detail)<br></code></pre></td></tr></table></figure><p>建议校验失败时还是直接在限流类中抛出异常，一旦当前的类校验失败了，后续的类再进行校验已经没有意义了。</p><h2 id="三、限流组件源码分析"><a href="#三、限流组件源码分析" class="headerlink" title="三、限流组件源码分析"></a>三、限流组件源码分析</h2><p>限流组件功能的实现可以通过源码简单剖析一下</p><img src="/img/blog/about_drf/drf28.png" style="zoom:100%;" /> <ul><li>第一步，还是通过视图类先走到 <code>APIView</code> 中的 <code>dispatch</code> 方法，执行里面的 <code>self.initial</code> ；</li><li>第二步，<code>self.initial</code> 里调用了一个 <code>check_throttles</code> 方法，权限组件的验证功能就是通过该方法实现的；</li><li>第三步，<code>check_throttles</code> 方法中，针对视图类中使用每一个限流类都进行了实例化，并调用实例化对象的 <code>allow_request</code> 方法，该方法用于返回校验的结果，返回值为布尔值。将返回值为 <code>False</code> 的结果存储在一个全局列表 <code>throttle_durations</code> 中，等所有的限流类都执行完成，检查列表内是否有值，有值则证明部分限流类认证未通过，调用 <code>self.throttled</code> 抛出异常；如果循环过程中，有一个类抛出异常了，则循环终止，逐层向上抛出异常；</li><li><code>allow_request</code> 里实现了从缓存中读取当前用户访问记录，并判断是否达到限制条件的功能。</li></ul>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRF组件之权限</title>
    <link href="/2023/04/22/0519-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E6%9D%83%E9%99%90/"/>
    <url>/2023/04/22/0519-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、权限组件介绍"><a href="#一、权限组件介绍" class="headerlink" title="一、权限组件介绍"></a>一、权限组件介绍</h2><h3 id="1-用户权限的作用"><a href="#1-用户权限的作用" class="headerlink" title="1. 用户权限的作用"></a>1. 用户权限的作用</h3><p>在一个系统中，每个用户都应该有一个或多个角色，如普通用户、管理员、会员、超级会员等等，不同的角色有着不同的权限。<code>drf</code> 中提供了权限操作的组件，可以帮助开发者对不同角色进行相应的业务处理。</p><p>权限操作的前提是必须知道当前登录用户是谁，因此权限组件往往是和用户认证组件联合使用的。</p><h3 id="2-权限组件的使用"><a href="#2-权限组件的使用" class="headerlink" title="2. 权限组件的使用"></a>2. 权限组件的使用</h3><h4 id="2-1-编写数据表模型"><a href="#2-1-编写数据表模型" class="headerlink" title="2.1 编写数据表模型"></a>2.1 编写数据表模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/models.py</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    role_choice = ((<span class="hljs-number">1</span>, <span class="hljs-string">&quot;普通用户&quot;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;管理员&quot;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&quot;超级管理员&quot;</span>))<br>    role = models.SmallIntegerField(choices=role_choice, verbose_name=<span class="hljs-string">&quot;用户角色&quot;</span>, default=<span class="hljs-number">1</span>)<br><br>    name = models.CharField(max_length=<span class="hljs-number">10</span>, verbose_name=<span class="hljs-string">&quot;用户名&quot;</span>, null=<span class="hljs-literal">False</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">16</span>, verbose_name=<span class="hljs-string">&quot;用户密码&quot;</span>, null=<span class="hljs-literal">False</span>)<br>    token = models.CharField(max_length=<span class="hljs-number">32</span>, verbose_name=<span class="hljs-string">&quot;用户登录token&quot;</span>, null=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name_plural = <span class="hljs-string">&quot;user_info&quot;</span><br>        db_table = verbose_name_plural<br></code></pre></td></tr></table></figure><h4 id="2-2-编写权限类"><a href="#2-2-编写权限类" class="headerlink" title="2.2 编写权限类"></a>2.2 编写权限类</h4><p>权限类必须继承 <code>rest_framework.permissions.BasePermission</code> 类，且必须实现内部的 <code>has_permission</code> 方法，而 <code>has_object_permission</code> 方法可以根据不同的视图类去实现（也可以不实现）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/permission.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> BasePermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPermission</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-comment"># 权限验证失败最后返回的内容</span><br>    message = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1003</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;无权访问&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-comment"># 判断当前用户角色信息，普通用户权限不通过</span><br>        <span class="hljs-keyword">if</span> request.user.role == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_object_permission</span>(<span class="hljs-params">self, request, view, obj</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="2-3-编写认证类"><a href="#2-3-编写认证类" class="headerlink" title="2.3 编写认证类"></a>2.3 编写认证类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeardTokenAuth</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">     从请求头中获取token值进行验证</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br><br>        token = request.META.get(<span class="hljs-string">&quot;HTTP_TOKEN&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(token=token).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> user_obj, token<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Bearer realm=&quot;API&quot;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2-4-路由"><a href="#2-4-路由" class="headerlink" title="2.4 路由"></a>2.4 路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># 用户登录</span><br>    path(<span class="hljs-string">&#x27;api/v1/login/&#x27;</span>, views.UserLoginView.as_view()),<br>    <br>    <span class="hljs-comment"># 查询产品信息</span><br>    path(<span class="hljs-string">&#x27;api/v1/product/&#x27;</span>, views.ProductManage.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="2-5-编写视图类"><a href="#2-5-编写视图类" class="headerlink" title="2.5 编写视图类"></a>2.5 编写视图类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">from</span> app01.auth <span class="hljs-keyword">import</span> HeardTokenAuth<br><span class="hljs-keyword">from</span> app01.permission <span class="hljs-keyword">import</span> UserPermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 重新设置 authentication_classes 的值，覆盖全局配置</span><br>    authentication_classes = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        data = request.data<br>        user_name = data.get(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        pwd = data.get(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(name=user_name, password=pwd).first()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;用户名或密码错误&quot;</span>&#125;<br>            <span class="hljs-keyword">return</span> Response(ret_data)<br><br>        user_token = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>        user_obj.token = user_token<br>        user_obj.save()<br><br>        ret_data = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;user&quot;</span>: user_name,<br>                <span class="hljs-string">&quot;token&quot;</span>: user_token<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Response(ret_data)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductManage</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 视图中使用认证组件</span><br>    authentication_classes = [HeardTokenAuth, ]<br><br>    <span class="hljs-comment"># 视图中使用权限组件</span><br>    permission_classes = [UserPermission, ]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        product_list = [<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate30&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">3000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate40&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">4000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate50&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>&#125;,<br>        ]<br><br>        <span class="hljs-keyword">return</span> Response(product_list)<br></code></pre></td></tr></table></figure><h4 id="2-6-权限校验"><a href="#2-6-权限校验" class="headerlink" title="2.6 权限校验"></a>2.6 权限校验</h4><p>启动服务，使用 <code>post man</code> 进行请求，先访问 <code>http://127.0.0.1:8000/api/v1/login/</code> 进行用户登录获取 <code>token</code>，访问 <code>http://127.0.0.1:8000/api/v1/product/</code> 时，在请求头中携带 <code>token</code> 。</p><ul><li>当前用的角色值为普通用户</li></ul><img src="/img/blog/about_drf/drf21.png" style="zoom: 50%;" /> <ul><li>在数据库中修改当前用户角色为管理员</li></ul><img src="/img/blog/about_drf/drf22.png" style="zoom: 45%;" />  <h4 id="2-7-权限组件的全局使用"><a href="#2-7-权限组件的全局使用" class="headerlink" title="2.7 权限组件的全局使用"></a>2.7 权限组件的全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;   <br>    <span class="hljs-comment"># 权限组件的全局使用</span><br>    <span class="hljs-string">&quot;DEFAULT_PERMISSION_CLASSES&quot;</span>: [<span class="hljs-string">&quot;app01.permission.UserPermission&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、多个权限类"><a href="#二、多个权限类" class="headerlink" title="二、多个权限类"></a>二、多个权限类</h2><p>和认证类一样，视图也可以指定多个权限类，且必须通过所有指定的权限类以后，权限验证才算通过。</p><ul><li>修改数据表模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Role</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    角色表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    title = models.CharField(max_length=<span class="hljs-number">10</span>, verbose_name=<span class="hljs-string">&quot;角色名称&quot;</span>, null=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.title<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name_plural = <span class="hljs-string">&quot;role&quot;</span><br>        db_table = verbose_name_plural<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User_info</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    用户表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    name = models.CharField(max_length=<span class="hljs-number">10</span>, verbose_name=<span class="hljs-string">&quot;用户名&quot;</span>, null=<span class="hljs-literal">False</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">16</span>, verbose_name=<span class="hljs-string">&quot;用户密码&quot;</span>, null=<span class="hljs-literal">False</span>)<br>    token = models.CharField(max_length=<span class="hljs-number">32</span>, verbose_name=<span class="hljs-string">&quot;用户登录token&quot;</span>, null=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-comment"># 用户和角色多对多</span><br>    role = models.ManyToManyField(to=<span class="hljs-string">&quot;Role&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name_plural = <span class="hljs-string">&quot;user_info&quot;</span><br>        db_table = verbose_name_plural<br></code></pre></td></tr></table></figure><p>执行数据库迁移命令后，手动给角色表添加三条数据</p><img src="/img/blog/about_drf/drf23.png" style="zoom: 80%;" /> <p>再分别创建两个用户，其中一个用户绑定管理员和超级管理员两个角色，另一个用户只绑定管理员角色。</p><ul><li>编写多个权限类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.permissions <span class="hljs-keyword">import</span> BasePermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminPermission</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;校验管理员权限&quot;&quot;&quot;</span><br>    message = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1003</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;无权访问&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">if</span> request.user.role.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;管理员&quot;</span>).exists():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_object_permission</span>(<span class="hljs-params">self, request, view, obj</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperAdminPermission</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;校验超级管理员权限&quot;&quot;&quot;</span><br>    message = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1003</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;无权访问&quot;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_permission</span>(<span class="hljs-params">self, request, view</span>):<br>        <span class="hljs-keyword">if</span> request.user.role.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;超级管理员&quot;</span>).exists():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_object_permission</span>(<span class="hljs-params">self, request, view, obj</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>修改视图类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductManage</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 视图中使用认证组件</span><br>    authentication_classes = [HeardTokenAuth, ]<br><br>    <span class="hljs-comment"># 校验多个权限类，必须全部通过</span><br>    <span class="hljs-comment"># 即当前用户必须同时是管理员和超级管理员</span><br>    permission_classes = [AdminPermission, SuperAdminPermission]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        product_list = [<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate30&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">3000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate40&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">4000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate50&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>&#125;,<br>        ]<br><br>        <span class="hljs-keyword">return</span> Response(product_list)<br></code></pre></td></tr></table></figure><ul><li>使用只有管理员权限的用户登录后查询数据</li></ul><img src="/img/blog/about_drf/drf24.png" style="zoom: 60%;" /> <ul><li>使用同时拥有管理员和超级管理员权限的用户查询数据</li></ul><img src="/img/blog/about_drf/drf25.png" style="zoom: 55%;" />  <h2 id="三、权限组件源码分析"><a href="#三、权限组件源码分析" class="headerlink" title="三、权限组件源码分析"></a>三、权限组件源码分析</h2><p>权限组件功能的实现可以通过源码简单剖析一下</p><img src="/img/blog/about_drf/drf26.png" style="zoom: 100%;" /> <ul><li>第一步，还是通过视图类先走到 <code>APIView</code> 中的 <code>dispatch</code> 方法，执行里面的 <code>self.initial</code> ；</li><li>第二步，<code>self.initial</code> 里调用了一个 <code>check_permissions</code> 方法，权限组件的验证功能就是通过该方法实现的；</li><li>第三步，<code>check_permissions</code> 中主要做了以下几件事<ul><li>调用 <code>get_permissions</code> 方法，将视图类中 <code>permission_classes</code> 中所有的权限类进行实例化，返回一个全是实例化对象的列表（如果视图类中未定义 <code>permission_classes</code>，则去父类 <code>APIView</code> 中寻找）；</li><li>循环对象列表，执行每个对象的 <code>has_permission</code> 方法，返回 True 则继续循环，返回 False 则调用 <code>permission_denied</code> 抛弃异常，权限校验流程结束。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRF组件之认证</title>
    <link href="/2023/04/18/0518-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%AE%A4%E8%AF%81/"/>
    <url>/2023/04/18/0518-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、认证组件介绍"><a href="#一、认证组件介绍" class="headerlink" title="一、认证组件介绍"></a>一、认证组件介绍</h2><h3 id="1-用户认证的作用"><a href="#1-用户认证的作用" class="headerlink" title="1. 用户认证的作用"></a>1. 用户认证的作用</h3><p>在开发后端 <code>API</code> 时，要考虑不同的功能会有不同限制的场景，例如：</p><ul><li>无需认证，就可以访问并获取数据（游客模式）</li><li>需认证，用户先登录，后续发送请求要携带登录时发放的凭证</li></ul><p><code>django</code> 中可以借鉴装饰器、中间件等对所有接口执行之前先进行用户身份认证。<code>drf</code> 中直接提供了用户认证的组件，可以帮助我们快速高效的完成用户身份识别功能。</p><h3 id="2-认证组件的使用"><a href="#2-认证组件的使用" class="headerlink" title="2. 认证组件的使用"></a>2. 认证组件的使用</h3><h4 id="2-1-编写认证类"><a href="#2-1-编写认证类" class="headerlink" title="2.1 编写认证类"></a>2.1 编写认证类</h4><p>一般功能性的组件不会跟业务代码放在一起，我们可以单独新建一个文件或者目录，存放我们自己编写的组件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/auth.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTokenAuth</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        token = request.query_params.get(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-comment"># 如果请求路由未携带token，表示未登录，验证不通过</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>         <span class="hljs-comment"># 如果请求路由携带token的token不对，表示未登录，验证不通过</span><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(token=token).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> user_obj, token<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Bearer realm=&quot;API&quot;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>认证类的使用要注意以下几点：</p><ul><li>认证类必须继承 <code>rest_framework.authentication.BaseAuthentication</code> 类，且必须实现类中 <code>authenticate</code> 方法，该方法实现的就是认证的功能。<code>authenticate_header</code> 方法可以不用实现；</li><li>对于认证失败的情况，要用 <code>rest_framework.exceptions.AuthenticationFailed</code> 类抛出异常；</li><li>认证通过后，最后会返回两个值，两个值会分别赋值给 <code>request.user</code> 和 <code>request.auth</code> ，即可以在业务接口中直接查询访问的用户信息。</li></ul><h4 id="2-2-编写数据表模型"><a href="#2-2-编写数据表模型" class="headerlink" title="2.2 编写数据表模型"></a>2.2 编写数据表模型</h4><p>我们简单创建一张用户表，用于存储用户相关信息。当用户登录时，后端生成一个随机的 <code>token</code> 值，并将值存入表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/models.py</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    uid = models.AutoField(primary_key=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&quot;用户ID&quot;</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">10</span>, verbose_name=<span class="hljs-string">&quot;用户名&quot;</span>, null=<span class="hljs-literal">False</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">16</span>, verbose_name=<span class="hljs-string">&quot;用户密码&quot;</span>, null=<span class="hljs-literal">False</span>)<br>    token = models.CharField(max_length=<span class="hljs-number">32</span>, verbose_name=<span class="hljs-string">&quot;用户登录token&quot;</span>, null=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        verbose_name_plural = <span class="hljs-string">&quot;user_info&quot;</span><br>        db_table = verbose_name_plural<br></code></pre></td></tr></table></figure><p>创建完表模型后，执行数据库迁移命令（这里直接使用 sqlite 数据库）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在项目根目录，即 manage.py 同级目录下打开终端执行</span><br><br>python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><p>表生成以后手动插入一条数据</p><img src="/img/blog/about_drf/drf13.png" style="zoom: 50%;" /> <h4 id="2-3-路由"><a href="#2-3-路由" class="headerlink" title="2.3 路由"></a>2.3 路由</h4><p>创建两条路由，一个用于用户登录，另一个用于查看商品信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/v1/login/&#x27;</span>, views.UserLoginView.as_view()),<br>    path(<span class="hljs-string">&#x27;api/v1/product/&#x27;</span>, views.ProductManage.as_view()),<br>]<br></code></pre></td></tr></table></figure><h4 id="2-4-编写视图类"><a href="#2-4-编写视图类" class="headerlink" title="2.4 编写视图类"></a>2.4 编写视图类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">from</span> app01.auth <span class="hljs-keyword">import</span> UserTokenAuth<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        data = request.data<br>        user_name = data.get(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        pwd = data.get(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(name=user_name, password=pwd).first()<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;用户名或密码错误&quot;</span>&#125;<br>            <span class="hljs-keyword">return</span> Response(ret_data)<br><br>        user_token = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>        user_obj.token = user_token<br>        user_obj.save()<br><br>        ret_data = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;user&quot;</span>: user_name,<br>                <span class="hljs-string">&quot;token&quot;</span>: user_token<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Response(ret_data)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductManage</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <br>    <span class="hljs-comment"># 如果想对接口使用用户认证，需要做以下配置</span><br>    authentication_classes = [UserTokenAuth, ]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        product_list = [<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate30&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">3000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate40&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">4000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate50&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>&#125;,<br>        ]<br><br>        <span class="hljs-keyword">return</span> Response(product_list)<br></code></pre></td></tr></table></figure><p>上述两个视图类，<code>UserLoginView</code> 为用户登录接口，无需进行身份验证；<code>ProductManage</code> 类为查看商品信息，只有认证通过即登录过的用户才能请求看到数据。</p><h4 id="2-5-用户认证校验"><a href="#2-5-用户认证校验" class="headerlink" title="2.5 用户认证校验"></a>2.5 用户认证校验</h4><ul><li>用户先进行登录操作，拿到后端接口返回的 <code>token</code> 信息</li></ul><img src="/img/blog/about_drf/drf14.png" style="zoom: 60%;" /> <ul><li>访问查询商品接口时，路由未携带 <code>token</code>，请求认证不通过</li></ul><img src="/img/blog/about_drf/drf15.png" style="zoom: 60%;" /> <ul><li>访问查询商品接口时，路由携带 <code>token</code> 值不正确，请求认证不通过</li></ul><img src="/img/blog/about_drf/drf16.png" style="zoom: 60%;" /> <ul><li>访问查询商品接口时，路由携带正确的 <code>token</code> ，请求认证通过，后端返回商品信息</li></ul><img src="/img/blog/about_drf/drf17.png" style="zoom: 50%;" />  <h4 id="2-6-认证组件的全局使用"><a href="#2-6-认证组件的全局使用" class="headerlink" title="2.6 认证组件的全局使用"></a>2.6 认证组件的全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 将自己编写的认证类作用于全局的视图</span><br>    <span class="hljs-comment"># 键名为 DEFAULT_AUTHENTICATION_CLASSES</span><br>    <span class="hljs-comment"># 值为一个列表，里面存放认证类的文件路径</span><br>    <span class="hljs-string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>: [<span class="hljs-string">&quot;app01.auth.UserTokenAuth&quot;</span>, ]<br>&#125;<br></code></pre></td></tr></table></figure><p>设置好全局配置后，需要经过认证的视图类中就不用再配置 <code>authentication_classes</code> ，而针对于不想使用认证的视图类，只需要设置 <code>authentication_classes = []</code> 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 登录的接口不需要做用户认证</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 重新设置 authentication_classes 的值，覆盖全局配置</span><br>    authentication_classes = []<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>      <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="二、多个认证类"><a href="#二、多个认证类" class="headerlink" title="二、多个认证类"></a>二、多个认证类</h2><h3 id="1-多个认证类的使用"><a href="#1-多个认证类的使用" class="headerlink" title="1. 多个认证类的使用"></a>1. 多个认证类的使用</h3><p>在实际的开发场景中，一个 <code>api</code> 可能被多方调用（PC端、App、小程序等等），各方使用的认证方式可能也不一样，我们的接口应该尽量兼容各种认证情况。</p><p>在视图类的 <code>authentication_classes</code> 中定义认证类时，传入的是一个列表，这就意味着 <code>drf</code> 是支持定义多个认证类的。当出现多个认证类时，<code>drf</code> 内部会按照列表的顺序，逐一执行认证类的 <code>authenticate</code> 方法，如果返回元组或抛出异常则会终止后续认证类的执行；如果返回 <code>None</code>，则会继续执行后续的认证类。</p><ul><li>编写多个认证类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/auth.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTokenAuth</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从请求路由中获取token值进行验证</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        token = request.query_params.get(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-comment"># 如果请求路由中没有携带token参数，则跳过该认证，继续走后面的认证</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(token=token).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> user_obj, token<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Bearer realm=&quot;API&quot;&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeardTokenAuth</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">     从请求头中获取token值进行验证</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br><br>        <span class="hljs-comment"># 从请求头中获取token</span><br>        token = request.META.get(<span class="hljs-string">&quot;HTTP_TOKEN&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(token=token).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> user_obj, token<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Bearer realm=&quot;API&quot;&#x27;</span><br><br></code></pre></td></tr></table></figure><ul><li>编写视图类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> app01.auth <span class="hljs-keyword">import</span> UserTokenAuth, HeardTokenAuth<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductManage</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    authentication_classes = [UserTokenAuth, HeardTokenAuth]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        product_list = [<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate30&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">3000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate40&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">4000</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate50&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>&#125;,<br>        ]<br><br>        <span class="hljs-keyword">return</span> Response(product_list)<br></code></pre></td></tr></table></figure><img src="/img/blog/about_drf/drf18.png" style="zoom: 50%;" /> <h3 id="2-关于认证的返回值"><a href="#2-关于认证的返回值" class="headerlink" title="2. 关于认证的返回值"></a>2. 关于认证的返回值</h3><p>认证类中的 <code>authenticate</code> 方法返回值主要有以下几种情形：</p><ul><li>返回元组，即直接返回两个值，例如：<code>return user_obj, token</code> 或者直接 <code>return None, None</code>，此时会把两个值分别赋值给 <code>request.user</code> 和 <code>request.auth</code>，后续的认证类也不会执行了；</li><li>抛出异常，例如：<code>raise AuthenticationFailed(&#123;&quot;code&quot;: 1002, &quot;error&quot;: &quot;认证失败&quot;&#125;)</code>，此时后续的认证类也不会执行了。</li><li>返回 <code>None</code>，例如：<code>return None</code>，此时会继续执行后续的认证类，如果所有的认证类的 <code>authenticate</code> 都返回了None，则默认 <code>request.user=&quot;AnonymousUser&quot;</code>（匿名用户）  和  <code>request.auth=None</code> 。当然，这两个默认值也可以通过配置来重新定义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&quot;UNAUTHENTICATED_USER&quot;</span>: <span class="hljs-keyword">lambda</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&quot;UNAUTHENTICATED_TOKEN&quot;</span>: <span class="hljs-keyword">lambda</span>: <span class="hljs-literal">None</span>,<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-关于返回-None-的用法"><a href="#3-关于返回-None-的用法" class="headerlink" title="3. 关于返回 None 的用法"></a>3. 关于返回 None 的用法</h3><ul><li>认证类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/auth.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTokenAuth</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从请求路由中获取token值进行验证</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br>        token = request.query_params.get(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-comment"># 如果请求路由中没有携带token参数，则跳过该认证，继续走后面的认证</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(token=token).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> user_obj, token<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Bearer realm=&quot;API&quot;&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeardTokenAuth</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">     从请求头中获取token值进行验证</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br><br>        <span class="hljs-comment"># 从请求头中获取token</span><br>        token = request.META.get(<span class="hljs-string">&quot;HTTP_TOKEN&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        user_obj = UserInfo.objects.<span class="hljs-built_in">filter</span>(token=token).first()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> user_obj, token<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Bearer realm=&quot;API&quot;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>视图类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductManage</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    authentication_classes = [UserTokenAuth, HeardTokenAuth]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br><br>        <span class="hljs-comment"># 如果没有通过认证，证明是游客模式，返回一些其他数据</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.user:<br>            product_list = [<br>                &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">9999</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">9999</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">9999</span>&#125;,<br>            ]<br>        <span class="hljs-keyword">else</span>:<br>            product_list = [<br>                &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate30&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">3000</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate40&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">4000</span>&#125;,<br>                &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;mate50&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>&#125;,<br>            ]<br><br>        <span class="hljs-keyword">return</span> Response(product_list)<br></code></pre></td></tr></table></figure><ul><li>不管是路由还是请求头都不携带 <code>token</code></li></ul><img src="/img/blog/about_drf/drf19.png" style="zoom: 50%;" /> <ul><li>请求头携带 <code>token</code></li></ul><img src="/img/blog/about_drf/drf18.png" style="zoom: 50%;" /> <h2 id="三、认证组件源码分析"><a href="#三、认证组件源码分析" class="headerlink" title="三、认证组件源码分析"></a>三、认证组件源码分析</h2><p>认证组件功能的实现可以通过源码简单剖析一下</p><img src="/img/blog/about_drf/drf20.png" style="zoom: 100%;" /> <ul><li><p>第一步，还是通过视图类先走到 <code>APIView</code> 中的 <code>dispatch</code> 方法，里面有两个地方涉及到认证功能，首先是对请求数据的封装，即 <code>request = self.initialize_request(request, *args, **kwargs)</code>；</p></li><li><p>第二步，<code>self.initialize_request</code> 中实例化<code>rest_framework.request.Request</code> 类时，将 <code>self.get_authenticators()</code> 方法的返回值赋值给了参数 <code>authenticators</code>，<code>self.get_authenticators()</code> 方法中主要实现了对视图类中 <code>authentication_classes</code> 变量内所有的认证类都进行了实例化，并将所有的实例化对象放在了一个列表，即经过上述步骤会得到：<code>authenticators=[UserTokenAuth(), HeardTokenAuth()]</code>；</p></li><li><p>第三步，回到 <code>dispatch</code> 方法中，继续执行 <code>self.initial(request, *args, **kwargs)</code> 方法，该方法内部又调用了 <code>self.perform_authentication(request)</code> 方法，<code>perform_authentication</code> 内部又调用了 <code>request.user</code>，而 <code>request.user</code> 是 <code>rest_framework.request.Request</code> 类的一个属性；</p></li><li><p>第四步，在 <code>rest_framework.request.Request</code> 的属性方法 <code>user</code> 中调用了 <code>self._authenticate()</code> 方法，该方法也是实现认证过程的核心部分；</p></li><li><p>第五步，<code>self._authenticate()</code> 对 <code>self.authenticators</code> 中所有对象进行循环，即对我们自己编写的所有认证类的实例化对象进行循环操作，调用每个对象的 <code>authenticate</code> 方法：</p><ul><li>如果方法执行报错，调用 <code>self._not_authenticated()</code>，抛出异常，后续认证过程停止，认证过程结束；</li><li>如果方法正常执行完，会返回一个结果，如果结果不是 <code>None</code>，则结果为一个元组，将两个值分别赋值给 <code>self.user</code> 和 <code>self.auth</code>，后续认证过程停止，认证过程结束；如果结果是 <code>None</code>，则继续循环；</li><li>如果所有对象都循环完了，证明所有对象 <code>authenticate</code> 方法返回的都是 <code>None</code> ，则调用 <code>self._not_authenticated()</code> 方法,，认证过程结束；</li></ul></li><li><p>第六步，在 <code>self._not_authenticated()</code> 中主要是针对认证类异常和全部跳过情况下，对  <code>self.user</code> 和 <code>self.auth</code> 两个变量取值做了一些处理。首先会先优先从工程下的 <code>settings.py</code> 中查找开发者是否做了相关配置，如果没有配置，则采用 <code>rest_framework/settings.py</code> 内的默认配置。</p></li></ul><p><strong>补充</strong>：当我们自己编写的视图类中没有定义 <code>authentication_classes</code>，则会去父类，即 <code>APIView</code> 中寻找，最终会找到我们在配置文件中定义的 <code>DEFAULT_AUTHENTICATION_CLASSES</code>，从而使得认证组件的功能可以作用于全局。</p>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRF组件之版本管理</title>
    <link href="/2023/04/12/0517-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <url>/2023/04/12/0517-drf%E7%BB%84%E4%BB%B6%E4%B9%8B%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、版本传递的五种方式"><a href="#一、版本传递的五种方式" class="headerlink" title="一、版本传递的五种方式"></a>一、版本传递的五种方式</h2><h3 id="1-URL的GET参数传递版本"><a href="#1-URL的GET参数传递版本" class="headerlink" title="1. URL的GET参数传递版本"></a>1. URL的GET参数传递版本</h3><h4 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h4><ul><li>在视图类中引入 <code>rest_framework.versioning</code> 下的 <code>QueryParameterVersioning</code> 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><span class="hljs-comment"># 导入通过路由参数解析版本的操作类</span><br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> QueryParameterVersioning<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 必须要配置</span><br>    versioning_class = QueryParameterVersioning<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <br>        <span class="hljs-comment"># 通过 request.version 可以获取版本信息</span><br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/users/&#x27;</span>, views.UserView.as_view()),<br>]<br></code></pre></td></tr></table></figure><ul><li>启动服务，浏览器访问路由时，要携带一个版本的参数，且参数名只能为 <code>version</code>，后端会根据该参数名提取出版本的值</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/127.0.0.1:8000/api</span><span class="hljs-regexp">/users/</span><span class="hljs-string">?v</span>ersion=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h4 id="1-2-用法配置"><a href="#1-2-用法配置" class="headerlink" title="1.2 用法配置"></a>1.2 用法配置</h4><p>版本管理组件支持一些配置，可以修改传参名，设置默认值等等，这些配置要写在 <code>settings.py</code> 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置参数名</span><br>    <span class="hljs-comment"># 设置该配置后，url携带的参数名就不能是version了，必须是设置的名称</span><br>    <span class="hljs-comment"># 即 http://127.0.0.1:8000/api/users/?v=123</span><br>    <span class="hljs-string">&quot;VERSION_PARAM&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置默认版本号</span><br>    <span class="hljs-comment"># 当路由中未携带版本号，后端获取到的版本号默认为配置的值</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSION&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置版本号范围</span><br>    <span class="hljs-comment"># 如果路由中携带的版本号值不在配置指定的范围内，后端接口获取版本号时直接抛出异常</span><br>    <span class="hljs-string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-全局使用"><a href="#1-3-全局使用" class="headerlink" title="1.3 全局使用"></a>1.3 全局使用</h4><p>如果有多个视图类，一个一个去添加版本解析类显然是不现实的。<code>drf</code> 提供了全局配置方式，可以将功能作用于所有的视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置全局配置</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSIONING_CLASS&quot;</span>: <span class="hljs-string">&quot;rest_framework.versioning.QueryParameterVersioning&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> QueryParameterVersioning<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    <span class="hljs-comment"># 设置全局配置以后，视图类中就不用再做配置了</span><br>    <span class="hljs-comment"># 如果设置了全局配置，视图类中也进行了配置，优先使用视图类中的配置</span><br>    <span class="hljs-comment"># versioning_class = QueryParameterVersioning</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 通过 request.version 可以获取版本信息</span><br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-4-源码分析"><a href="#1-4-源码分析" class="headerlink" title="1.4 源码分析"></a>1.4 源码分析</h4><p>通过解析 <code>URL</code> 携带的版本参数来获取版本值是怎么实现的？我们可以根据源码来简单分析下：</p><p><img src="/img/blog/about_drf/drf9.png"> </p><p>先来看红色框和箭头部分：</p><ul><li>第一步，通过视图类走到了 <code>rest_framework/views.py</code> 中 <code>APIView</code> 的 <code>dispatch</code> 方法，该方法中调用了一个 <code>initial</code>  方法；</li><li>第二步，<code>initial</code> 方法中调用了对版本号处理的方法 <code>determine_version</code>，该方法会返回两个值，最后把两个值分别赋值给 <code>request.version</code> 和 <code>request.versioning_scheme</code> 两个 <code>request</code> 对象的变量，这就是为什么我们可以在自己写的视图类中，通过 <code>request.version</code> 拿到版本号的原因了；</li><li>第三步， <code>determine_version</code> 方法中，尝试去找视图类中的 <code>versioning_class</code> 变量，即我们在 <code>UserView</code> 视图类中的 <code>versioning_class = QueryParameterVersioning</code> 这一行。变量如果有值，则执行 <code>scheme = self.versioning_class()</code>，相当于执行 <code>scheme = QueryParameterVersioning()</code>，即生成了一个 <code>QueryParameterVersioning</code> 类的对象，最后去执行对象中的 <code>determine_version</code> 方法；</li><li>第四步，<code>QueryParameterVersioning</code> 类中的 <code>determine_version</code> 方法里，实际就是通过 <code>request.query_params.get</code> ，即 <code>request.GET.get</code> 方法去获取 <code>GET</code> 请求中的参数值，而获取的变量名和默认值是由其父类 <code>BaseVersioning</code> 中定义的，获取到版本值以后，再判断值是否在指定的范围内，判断的范围也是从父类中获取；</li><li>第五步，<code>BaseVersioning</code> 类中定义的版本号参数的变量名、默认值、取值范围均是从 <code>rest_framework/settings.py</code> 中获取；</li><li>第六步，<code>rest_framework/settings.py</code> 中会去我们工程下的 <code>settings.py</code> 中寻找 <code>REST_FRAMEWORK</code> 变量，读取里面的值作为版本相关配置的值，如果读取不到相关的变量，则使用自己定义的默认变量，这就是为什么我们不进行版本配置时，传参的变量名只能为 “version” 的原因。</li></ul><p><strong>补充</strong>：如果我们在自己编写的视图类中没有定义 <code>versioning_class</code>，在执行到 <code>determine_version</code> 方法时，就会去寻找视图类父类中的 <code>versioning_class</code> ，即 <code>APIView</code> 中的 <code>versioning_class</code>（绿色箭头所展示的流程）。 <code>APIView</code> 中的 <code>versioning_class</code> 的值为 <code>DEFAULT_VERSIONING_CLASS</code> ，所以给 <code>DEFAULT_VERSIONING_CLASS</code> 赋值以后就可以作用于全局的视图函数了，而且也解释了为什么同时配置了全局和视图类中的 <code>versioning_class</code>，视图类中的配置会被优先使用。</p><h3 id="2-URL路径传递版本"><a href="#2-URL路径传递版本" class="headerlink" title="2. URL路径传递版本"></a>2. URL路径传递版本</h3><h4 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h4><ul><li>在视图类中引入 <code>rest_framework.versioning</code> 下的 <code>URLPathVersioning</code> 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> URLPathVersioning<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    versioning_class = URLPathVersioning<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>路由中要定义接收版本的变量名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/&lt;str:version&gt;/users/&#x27;</span>, views.UserView.as_view()),<br>]<br></code></pre></td></tr></table></figure><ul><li>启动服务，浏览器访问路由</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/users/</span><br></code></pre></td></tr></table></figure><h4 id="2-2-用法配置"><a href="#2-2-用法配置" class="headerlink" title="2.2 用法配置"></a>2.2 用法配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置参数名</span><br>    <span class="hljs-comment"># 设置该配置后，路由中定义要接收的版本变量名就不能是version了，必须是设置的名称</span><br>    <span class="hljs-comment"># 即 path(&#x27;api/&lt;str:v&gt;/users/&#x27;, views.UserView.as_view())</span><br>    <span class="hljs-string">&quot;VERSION_PARAM&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置默认版本号</span><br>    <span class="hljs-comment"># 对于URL路径传递版本号方式而言，这个配置没有作用，因为版本号是用户必填的</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSION&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置版本号范围</span><br>    <span class="hljs-string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-全局使用"><a href="#2-3-全局使用" class="headerlink" title="2.3 全局使用"></a>2.3 全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置全局配置</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSIONING_CLASS&quot;</span>: <span class="hljs-string">&quot;rest_framework.versioning.URLPathVersioning&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-源码分析"><a href="#2-4-源码分析" class="headerlink" title="2.4 源码分析"></a>2.4 源码分析</h4><p>所有的流程都是差不多的，只是在第四步获取版本值的方式上有所不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># rest_framework/versioning.py</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">URLPathVersioning</span>(<span class="hljs-title class_ inherited__">BaseVersioning</span>):<br><br>    invalid_version_message = _(<span class="hljs-string">&#x27;Invalid version in URL path.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">determine_version</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        version = kwargs.get(<span class="hljs-variable language_">self</span>.version_param, <span class="hljs-variable language_">self</span>.default_version)<br>        <span class="hljs-keyword">if</span> version <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            version = <span class="hljs-variable language_">self</span>.default_version<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_allowed_version(version):<br>            <span class="hljs-keyword">raise</span> exceptions.NotFound(<span class="hljs-variable language_">self</span>.invalid_version_message)<br>        <span class="hljs-keyword">return</span> version<br></code></pre></td></tr></table></figure><p>当路由使用分组方式来接收变量时，解析出的数据会存放在 <code>**kwargs</code> 形参中一层一层传递，直到传给了 <code>URLPathVersioning.determine_version</code> 方法中。</p><h3 id="3-请求头传递版本"><a href="#3-请求头传递版本" class="headerlink" title="3. 请求头传递版本"></a>3. 请求头传递版本</h3><h4 id="3-1-基本用法"><a href="#3-1-基本用法" class="headerlink" title="3.1 基本用法"></a>3.1 基本用法</h4><ul><li>在视图类中引入 <code>rest_framework.versioning</code> 下的 <code>AcceptHeaderVersioning</code> 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> AcceptHeaderVersioning<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    versioning_class = AcceptHeaderVersioning<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 通过 request.version 可以获取版本信息</span><br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/users/&#x27;</span>, views.UserView.as_view()),<br>]<br></code></pre></td></tr></table></figure><ul><li>启动服务，此时无法使用浏览器设置请求头来访问，可以借助 <code>Post man</code> 发送请求，请求头必须添加：</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">Accept:</span> application<span class="hljs-symbol">/json</span>;<span class="hljs-attr">version</span><span class="hljs-operator">=</span>v1<br></code></pre></td></tr></table></figure><img src="/img/blog/about_drf/drf10.png" style="zoom:67%;" /> <h4 id="3-2-用法配置"><a href="#3-2-用法配置" class="headerlink" title="3.2 用法配置"></a>3.2 用法配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置参数名</span><br>    <span class="hljs-comment"># 设置该配置后，请求头设置的版本变量名就不能是version了，必须是设置的名称</span><br>    <span class="hljs-comment"># 即：Accept: application/json;v=v1</span><br>    <span class="hljs-string">&quot;VERSION_PARAM&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置默认版本号</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSION&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置版本号范围</span><br>    <span class="hljs-string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-全局使用"><a href="#3-3-全局使用" class="headerlink" title="3.3 全局使用"></a>3.3 全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置全局配置</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSIONING_CLASS&quot;</span>: <span class="hljs-string">&quot;rest_framework.versioning.AcceptHeaderVersioning&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-源码分析"><a href="#3-4-源码分析" class="headerlink" title="3.4 源码分析"></a>3.4 源码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># rest_framework/versioning.py</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceptHeaderVersioning</span>(<span class="hljs-title class_ inherited__">BaseVersioning</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    GET /something/ HTTP/1.1</span><br><span class="hljs-string">    Host: example.com</span><br><span class="hljs-string">    Accept: application/json; version=1.0</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    invalid_version_message = _(<span class="hljs-string">&#x27;Invalid version in &quot;Accept&quot; header.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">determine_version</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        media_type = _MediaType(request.accepted_media_type)<br>        version = media_type.params.get(<span class="hljs-variable language_">self</span>.version_param, <span class="hljs-variable language_">self</span>.default_version)<br>        version = unicode_http_header(version)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_allowed_version(version):<br>            <span class="hljs-keyword">raise</span> exceptions.NotAcceptable(<span class="hljs-variable language_">self</span>.invalid_version_message)<br>        <span class="hljs-keyword">return</span> version<br></code></pre></td></tr></table></figure><p><code>AcceptHeaderVersioning</code> 类中的 <code>determine_version</code> 方法是通过将请求头中内容进行解析，根据配置的版本变量名去获取版本值。</p><h3 id="4-二级域名传递版本"><a href="#4-二级域名传递版本" class="headerlink" title="4. 二级域名传递版本"></a>4. 二级域名传递版本</h3><h4 id="4-1-基本用法"><a href="#4-1-基本用法" class="headerlink" title="4.1 基本用法"></a>4.1 基本用法</h4><ul><li>在视图类中引入 <code>rest_framework.versioning</code> 下的 <code>HostNameVersioning</code> 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> HostNameVersioning<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    versioning_class = HostNameVersioning<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 通过 request.version 可以获取版本信息</span><br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/users/&#x27;</span>, views.UserView.as_view()),<br>]<br></code></pre></td></tr></table></figure><ul><li>修改访问限制，允许其他地址访问服务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>ALLOWED_HOSTS = [<span class="hljs-string">&quot;*&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li>因为涉及到域名解析，需要在本地 hosts 文件中添加以下内容</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>       v1.cdc.com<br><span class="hljs-number">127.0.0.1</span>       v2.cdc.com<br></code></pre></td></tr></table></figure><img src="/img/blog/about_drf/drf11.png" style="zoom:80%;" /> <ul><li>启动服务，浏览器访问</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>v1.cdc.com:<span class="hljs-number">8000</span><span class="hljs-regexp">/api/u</span>sers/<br>http:<span class="hljs-regexp">//</span>v2.cdc.com:<span class="hljs-number">8000</span><span class="hljs-regexp">/api/u</span>sers/<br></code></pre></td></tr></table></figure><h4 id="4-2-用法配置"><a href="#4-2-用法配置" class="headerlink" title="4.2 用法配置"></a>4.2 用法配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置参数名</span><br>    <span class="hljs-comment"># 由于是解析域名获取，该配置没有作用</span><br>    <span class="hljs-string">&quot;VERSION_PARAM&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置默认版本号</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSION&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置版本号范围</span><br>    <span class="hljs-string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-全局使用"><a href="#4-3-全局使用" class="headerlink" title="4.3 全局使用"></a>4.3 全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置全局配置</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSIONING_CLASS&quot;</span>: <span class="hljs-string">&quot;rest_framework.versioning.HostNameVersioning&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-源码分析"><a href="#4-4-源码分析" class="headerlink" title="4.4 源码分析"></a>4.4 源码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HostNameVersioning</span>(<span class="hljs-title class_ inherited__">BaseVersioning</span>):<br>    hostname_regex = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^([a-zA-Z0-9]+)\.[a-zA-Z0-9]+\.[a-zA-Z0-9]+$&#x27;</span>)<br>    invalid_version_message = _(<span class="hljs-string">&#x27;Invalid version in hostname.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">determine_version</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        hostname, separator, port = request.get_host().partition(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        <span class="hljs-keyword">match</span> = <span class="hljs-variable language_">self</span>.hostname_regex.<span class="hljs-keyword">match</span>(hostname)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">match</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.default_version<br>        version = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_allowed_version(version):<br>            <span class="hljs-keyword">raise</span> exceptions.NotFound(<span class="hljs-variable language_">self</span>.invalid_version_message)<br>        <span class="hljs-keyword">return</span> version<br></code></pre></td></tr></table></figure><p><code>HostNameVersioning</code> 类中的 <code>determine_version</code> 方法是将访问后台的域名进行拆分解析，获取到版本号的值。</p><h3 id="5-路由名称空间传递版本"><a href="#5-路由名称空间传递版本" class="headerlink" title="5. 路由名称空间传递版本"></a>5. 路由名称空间传递版本</h3><h4 id="5-1-基本用法"><a href="#5-1-基本用法" class="headerlink" title="5.1 基本用法"></a>5.1 基本用法</h4><ul><li>在视图类中引入 <code>rest_framework.versioning</code> 下的 <code>NamespaceVersioning</code> 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> NamespaceVersioning<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    versioning_class = NamespaceVersioning<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 通过 request.version 可以获取版本信息</span><br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>路由分组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/v1/&#x27;</span>, include(<span class="hljs-string">&quot;api.urls&quot;</span>, namespace=<span class="hljs-string">&quot;v1&quot;</span>)),<br>    path(<span class="hljs-string">&#x27;api/v2/&#x27;</span>, include(<span class="hljs-string">&quot;api.urls&quot;</span>, namespace=<span class="hljs-string">&quot;v2&quot;</span>)),<br>]<br><br><br><span class="hljs-comment"># api/urls.py</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;users/&#x27;</span>, views.UserView.as_view()),<br>]<br><br>app_name = <span class="hljs-string">&quot;api&quot;</span><br></code></pre></td></tr></table></figure><ul><li>启动服务，浏览器访问</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/users/</span><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/api/</span>v2<span class="hljs-regexp">/users/</span><br></code></pre></td></tr></table></figure><h4 id="5-2-用法配置"><a href="#5-2-用法配置" class="headerlink" title="5.2 用法配置"></a>5.2 用法配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置参数名</span><br>    <span class="hljs-comment"># 由于是通过路由的Namespace解析，所以该配置无效</span><br>    <span class="hljs-string">&quot;VERSION_PARAM&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置默认版本号</span><br>    <span class="hljs-comment"># 该配置无效，namespace必须指定</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSION&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>    <br>    <span class="hljs-comment"># 设置版本号范围</span><br>    <span class="hljs-string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-全局使用"><a href="#5-3-全局使用" class="headerlink" title="5.3 全局使用"></a>5.3 全局使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 设置全局配置</span><br>    <span class="hljs-string">&quot;DEFAULT_VERSIONING_CLASS&quot;</span>: <span class="hljs-string">&quot;rest_framework.versioning.NamespaceVersioning&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-源码分析"><a href="#5-4-源码分析" class="headerlink" title="5.4 源码分析"></a>5.4 源码分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NamespaceVersioning</span>(<span class="hljs-title class_ inherited__">BaseVersioning</span>):<br>    <br>    invalid_version_message = _(<span class="hljs-string">&#x27;Invalid version in URL path. Does not match any version namespace.&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">determine_version</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        resolver_match = <span class="hljs-built_in">getattr</span>(request, <span class="hljs-string">&#x27;resolver_match&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> resolver_match <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> resolver_match.namespace:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.default_version<br><br>        <span class="hljs-comment"># Allow for possibly nested namespaces.</span><br>        possible_versions = resolver_match.namespace.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        <span class="hljs-keyword">for</span> version <span class="hljs-keyword">in</span> possible_versions:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.is_allowed_version(version):<br>                <span class="hljs-keyword">return</span> version<br>        <span class="hljs-keyword">raise</span> exceptions.NotFound(<span class="hljs-variable language_">self</span>.invalid_version_message)<br></code></pre></td></tr></table></figure><p><code>NamespaceVersioning</code> 类中的 <code>determine_version</code> 方法是借助路由分组反向解析来获取 <code>Namespace</code> 的值，即版本号的值。</p><h2 id="二、反向生成URL"><a href="#二、反向生成URL" class="headerlink" title="二、反向生成URL"></a>二、反向生成URL</h2><p>在 <code>QueryParameterVersioning</code> 、<code>URLPathVersioning</code>、<code>NamespaceVersioning</code>  这三个版本处理的类中还定义了<code>reverse</code>方法，用来反向生成 URL 并携带相关的的版本信息。</p><ul><li>路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/users/&#x27;</span>, views.UserView.as_view(), name=<span class="hljs-string">&quot;u1&quot;</span>),<br>    path(<span class="hljs-string">&#x27;api/users/&lt;int:pk&gt;&#x27;</span>, views.UserView.as_view(),  name=<span class="hljs-string">&quot;u2&quot;</span>),<br>]<br></code></pre></td></tr></table></figure><ul><li>视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.versioning <span class="hljs-keyword">import</span> QueryParameterVersioning<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br>    versioning_class = QueryParameterVersioning<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 通过 request.version 可以获取版本信息</span><br>        <span class="hljs-built_in">print</span>(request.version)<br><br>        url1 = request.versioning_scheme.reverse(<span class="hljs-string">&quot;u1&quot;</span>, request=request)<br>        <span class="hljs-built_in">print</span>(url1)<br><br>        url2 = request.versioning_scheme.reverse(<span class="hljs-string">&quot;u2&quot;</span>, args=(<span class="hljs-number">11</span>,), request=request)<br>        <span class="hljs-built_in">print</span>(url2)<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/img/blog/about_drf/drf12.png" style="zoom: 67%;" /> ]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRF 请求数据封装</title>
    <link href="/2023/04/08/0516-drf%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/"/>
    <url>/2023/04/08/0516-drf%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="一、请求对象的区别"><a href="#一、请求对象的区别" class="headerlink" title="一、请求对象的区别"></a>一、请求对象的区别</h2><h3 id="1-Django-中的请求对象"><a href="#1-Django-中的请求对象" class="headerlink" title="1. Django 中的请求对象"></a>1. Django 中的请求对象</h3><p>通过 <code>Django</code> 进行项目开发时，视图层方法或者视图类中的方法都会接收一个 <code>request</code> 对象参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_user</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> JsonResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><p>该 <code>request</code> 对象是 <code>django.core.handlers.wsgi.WSGIRequest</code> 类的对象，其中包含了请求相关的所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_user</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 获取请求的方法</span><br>    request.method<br>    <br>    <span class="hljs-comment"># 获取post请求的参数</span><br>request.POST<br>    <br>    <span class="hljs-comment"># 获取get请求的参数</span><br>request.GET<br>    <br>    <span class="hljs-comment"># 获取请求体</span><br>request.body<br>    <br>    <span class="hljs-keyword">return</span> JsonResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><p>虽然可以满足大多数开发场景，但原始的 <code>request</code> 对象还是有很多用着不方便的地方，以 <code>POST</code> 请求举例：</p><ul><li>当前端发送的请求头中 <code>content-type: url-form-encoded</code>，参数为 <code>v1=123&amp;v2=456&amp;v3=999</code>，<code>django</code> 一旦读取到该请求头，就会自动把请求参数解析为键值对格式，即 <code>&#123;&quot;v1&quot;:123,&quot;v2&quot;:456,&quot;v3&quot;:999&#125;</code>，并把解析后的值放在 <code>request.POST</code> 中，方便使用者调用；</li><li>当前端发送的请求头中 <code>content-type: application/json</code>，参数为 <code>&#123;&quot;v1&quot;:123,&quot;v2&quot;:456,&quot;v3&quot;:999&#125;</code> 时，<code>django</code> 是无法解析的，因此通过 <code>request.POST</code> 方法无法直接拿到数据，使用者必须从 <code>request.body</code> 中读出请求内容，再通过序列化操作以后才能拿到请求的参数。</li></ul><h3 id="2-DRF-中的请求对象"><a href="#2-DRF-中的请求对象" class="headerlink" title="2. DRF 中的请求对象"></a>2. DRF 中的请求对象</h3><p>使用 <code>drf</code> 框架时，视图中的 <code>request</code> 对象是 <code>rest_framework.request.Request</code> 类的对象，其本质上是对 <code>django</code> 的 <code>request</code> 进行了一次封装优化，除了包含 <code>django</code> 原 <code>request</code> 对象相关的功能和属性以外，还丰富了其他的内容。</p><ul><li><code>rest_framework.request.Request</code> 类部分源码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Wrapper allowing to enhance a standard `HttpRequest` instance.</span><br><span class="hljs-string">    Kwargs:</span><br><span class="hljs-string">        - request(HttpRequest). The original request instance. （django中的request）</span><br><span class="hljs-string">        - parsers(list/tuple). The parsers to use for parsing the</span><br><span class="hljs-string">          request content.</span><br><span class="hljs-string">        - authenticators(list/tuple). The authenticators used to try</span><br><span class="hljs-string">          authenticating the request&#x27;s user.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request, parsers=<span class="hljs-literal">None</span>, authenticators=<span class="hljs-literal">None</span>,negotiator=<span class="hljs-literal">None</span>, parser_context=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-comment"># 传入的request参数就是django原来的request</span><br>        <span class="hljs-variable language_">self</span>._request = request<br>        <span class="hljs-variable language_">self</span>.parsers = parsers <span class="hljs-keyword">or</span> ()<br>        <span class="hljs-variable language_">self</span>.authenticators = authenticators <span class="hljs-keyword">or</span> ()<br>        ...<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query_params</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        More semantically correct name for request.GET.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._request.GET<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> _<span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;_full_data&#x27;</span>):<br>            <span class="hljs-variable language_">self</span>._load_data_and_files()<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._full_data<br>    <br>    <span class="hljs-comment"># 面向对象中，内置方法 __getattr__ 会在 &quot;对象.属性&quot; 且属性不存的时候触发</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getattr__</span>(<span class="hljs-params">self, attr</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(<span class="hljs-variable language_">self</span>._request, attr) <span class="hljs-comment"># self._request.method</span><br>        <span class="hljs-keyword">except</span> AttributeError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__getattribute__(attr)<br></code></pre></td></tr></table></figure><ul><li><code>rest_framework.request.Request</code> 类的使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryUserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <br>        <span class="hljs-comment"># 通过对象的嵌套直接找到原request，读取相关值</span><br>        <span class="hljs-comment"># request._request 就是原来 django 中的 request</span><br>        request._request.method<br>        request._request.GET<br>        request._request.POST<br>        request._request.body<br><br>        <span class="hljs-comment"># 直接读取新request对象中的值，一般此处会对原始的数据进行一些处理，方便开发者在视图中使用。</span><br>        <span class="hljs-comment"># 内部本质上就是 request._request.GET</span><br>        request.query_params  <br>        <br>        <span class="hljs-comment"># 内部读取请求体中的数据，并进行处理</span><br>        <span class="hljs-comment"># 例如：请求者发来JSON格式，内部会对json字符串进行反序列化。</span><br>        request.data  <br><br>        <span class="hljs-comment"># 针对 drf 的 Request 类中未定义而 django 的 Request 类中定义的成员</span><br>        <span class="hljs-comment"># 可以通过 __getattr__ 去访问 request._request 中的值</span><br>        <span class="hljs-comment"># 面向对象中，内置方法 __getattr__ 会在 &quot;对象.属性&quot; 且属性不存的时候触发</span><br>        request.method<br>        request.META<br>        request.path<br><br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="二、源码剖析"><a href="#二、源码剖析" class="headerlink" title="二、源码剖析"></a>二、源码剖析</h2><p><code>drf</code> 对 <code>request</code> 对象的再次封装的过程，可以通过源码来了解</p><img src="/img/blog/about_drf/drf8.png" style="zoom:80%;" /> <ul><li>第一步，当前前面的流程都走完，一直到执行 <code>dispatch</code> 方法这一步，<code>dispatch</code> 内部执行了一个 <code>self.initialize_request</code> 方法；</li><li>第二步，<code>initialize_request</code> 方法接收的参数 <code>request</code> 就是原来 <code>django</code> 中的 <code>request</code> 对象，将该参数传入 <code>rest_framework.request.Request</code> 类中，最后返回了一个该类的对象；</li><li>第三步，将 <code>rest_framework.request.Request</code>  类对象重新赋值给 <code>self.request</code>，即 <code>DRF</code> 中视图层方法使用的 <code>request</code> 对象都是 <code>rest_framework.request.Request</code>  类的对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRF的使用</title>
    <link href="/2023/04/05/0515-drf%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/05/0515-drf%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、DRF-简介"><a href="#一、DRF-简介" class="headerlink" title="一、DRF 简介"></a>一、DRF 简介</h2><p>django restframework（简称drf）是一套基于 <code>Django</code> 的 restful 风格框架，里面集成了很多 restful API 相关的便捷功能。</p><p>官网地址：<a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org/</a></p><img src="/img/blog/about_drf/drf4.png" style="zoom:40%;" />   <h2 id="二、DRF-快速上手"><a href="#二、DRF-快速上手" class="headerlink" title="二、DRF 快速上手"></a>二、DRF 快速上手</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>由于 <code>DRF</code> 是基于 <code>Django</code> 的，因此使用前必须先安装 <code>Django</code>，且对版本有一定的要求，先本地检查下版本是否正确：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">版本要求：<span class="hljs-attribute">djangorestframework</span>==3.12.4<br>Python (3.5, 3.6, 3.7, 3.8, 3.9)<br>Django (2.2, 3.0, 3.1)<br>    <br>版本要求：<span class="hljs-attribute">djangorestframework</span>==3.11.2<br>Python (3.5, 3.6, 3.7, 3.8)<br>Django (1.11, 2.0, 2.1, 2.2, 3.0)<br></code></pre></td></tr></table></figure><p>执行 <code>pip</code> 命令安装 drf 框架</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip install djangorestframework==<span class="hljs-number">3.12</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h3><p>安装完成以后查看目录结构，我们可以发现 <code>DRF</code> 的目录结构和我们在 <code>Django</code> 项目中新建的 <code>App</code> 是很类似的。</p><img src="/img/blog/about_drf/drf5.png" style="zoom:40%;" /> <p>其实 <code>DRF</code> 本质上就是一个别人写好的 <code>Django</code> 下的 <code>App</code>，里面帮我们封装了很多的功能，所以使用前必须注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span><br>]<br></code></pre></td></tr></table></figure><p>此外，要想使用 <code>DRF</code> 提供的其他功能，也必须在 <code>settings.py</code> 中配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br><span class="hljs-comment"># drf相关配置以后编写在这里 </span><br>REST_FRAMEWORK = &#123;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-编写视图层接口"><a href="#3-编写视图层接口" class="headerlink" title="3. 编写视图层接口"></a>3. 编写视图层接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app02/views.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryUserView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><br>    <span class="hljs-comment"># get 请求会触发该方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        user_info = [<br>            &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;,<br>        ]<br><br>        ret_data = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: user_info<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Response(ret_data)<br><br>    <span class="hljs-comment"># post 请求会触发该方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># delete 请求会触发该方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># put 请求会触发该方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># patch 请求会触发该方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> app02.views <span class="hljs-keyword">import</span> QueryUserView<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;user/&#x27;</span>, QueryUserView.as_view())<br>]<br></code></pre></td></tr></table></figure><p>启动服务，打开浏览器访问：<a href="http://127.0.0.1:8000/user/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BB%A5%E4%B8%8B%E7%95%8C%E9%9D%A2%EF%BC%8C%60DRF%60">http://127.0.0.1:8000/user/，可以看到以下界面，`DRF`</a> 不仅优化了结果展示界面，还提供了简单调试接口的功能 ：</p><img src="/img/blog/about_drf/drf6.png" style="zoom:70%;" /> <h2 id="三、DRF-原理分析"><a href="#三、DRF-原理分析" class="headerlink" title="三、DRF 原理分析"></a>三、DRF 原理分析</h2><p><code>DRF</code> 中视图层是基于 <code>CBV</code> 模式进行开发的，其原理也和 <code>django.views.View</code> 类似，我们可以结合源码来看下：</p><img src="/img/blog/about_drf/drf7.png" style="zoom:100%;" /> <ul><li><p>第一步，当路由系统匹配到访问的地址后缀为 <code>/user/</code> 时，会执行  <code>QueryUserView</code> 视图类中的 <code>as_view</code> 方法；</p></li><li><p>第二步，我们自己定义的视图类中并没有 <code>as_view</code> 这个方法，所以要再去继承的父类 <code>APIView</code> 中寻找；</p></li><li><p>第三步，<code>APIView</code> 类的 <code>as_veiw</code> 方法中，执行了它父类中的 <code>as_view</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">view = <span class="hljs-built_in">super</span>().as_view(**initkwargs)<br></code></pre></td></tr></table></figure><p>即最终调用的其实是 <code>django.view.View</code> 中的 <code>as_view</code> 方法；</p></li><li><p>第四步，<code>django.view.View</code> 的 <code>as_view</code> 方法中，定义了一个 <code>view</code> 函数对象，函数中会执行一个 <code>dispatch</code> 方法，并把接收到的相关的参数都传给函数对象，最终返回这个函数；</p></li><li><p>第五步，<code>APIView</code> 类的 <code>as_veiw</code> 方法中，在执行完父类的 <code>as_view</code> 方法拿到返回的函数对象后，又对该函数做了一个免除 <code>csrf token</code> 校验的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> csrf_exempt(view)<br></code></pre></td></tr></table></figure></li><li><p>第六步，执行 <code>dispatch</code> 方法，首先还是先去我们自己定义的视图类中寻找，找不到再去父类 <code>APIView</code> 中寻找，再找不到就继续去 <code>APIView</code> 的父类中寻找…… 最终我们在 <code>APIView</code> 中就已经找到了该方法。我们先关注 <code>dispatch</code> 方法中的这一部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.http_method_names:<br>    handler = <span class="hljs-built_in">getattr</span>(<span class="hljs-variable language_">self</span>, request.method.lower(),<br>                      <span class="hljs-variable language_">self</span>.http_method_not_allowed)<br><span class="hljs-keyword">else</span>:<br>    handler = <span class="hljs-variable language_">self</span>.http_method_not_allowed<br><br>    response = handler(request, *args, **kwargs)<br></code></pre></td></tr></table></figure><p>主要做了以下几件事情：</p><ul><li>对请求的类型进行全小写处理，即请求类型 GET&#x2F;POST&#x2F;PUT&#x2F;DELETE 等会转换成 get&#x2F;post&#x2F;put&#x2F;delete</li><li>判断请求的类型是否在框架支持的范围内</li><li>利用类的反射机制去视图类中寻找是否存在和请求类型同名的方法，如果存在，就执行该方法。这就是为什么我们只需要在视图类中去定义 <code>get()</code>、<code>post()</code> 等方法就能自动去处理对应请求类型的原因。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Restful 开发规范介绍</title>
    <link href="/2023/04/04/0514-restful%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/04/04/0514-restful%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Web开发前后端模式"><a href="#一、Web开发前后端模式" class="headerlink" title="一、Web开发前后端模式"></a>一、Web开发前后端模式</h2><h3 id="1-前后端不分离"><a href="#1-前后端不分离" class="headerlink" title="1. 前后端不分离"></a>1. 前后端不分离</h3><p>前后端不分离的开发模式，常见于早期的 Web 开发中（现在也有部分网站延用该模式）。在该模式下，前端人员只需要构建好页面结构样式，提供页面模板即可；后端人员除了要编写相关后台的业务处理接口，还需要根据前端模板将数据进行填充渲染。因此该模式下，前后端的开发关联性较强，比较适合开发用户量少、简单的项目。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">特点：<br><span class="hljs-bullet">    -</span> 用户访问 URL<br><span class="hljs-bullet">    -</span> 执行视图函数，视图进行业务处理<br><span class="hljs-bullet">    -</span> 视图 render，读取 HTML 模块 + 数据渲染，将渲染完成的 HTML/CSS/JS 返回并呈现在用户浏览器上。<br><br>配合开发：<br><span class="hljs-bullet">    -</span> 前端，写HTML、CSS、JS<br><span class="hljs-bullet">    -</span> 后端，前端代码给后端，后端代码 + 前端代码集成到项目中。<br></code></pre></td></tr></table></figure><p>从用户的角度而言，前后端的代码都从同一个地址就能拿到</p><img src="/img/blog/about_drf/drf1.png" style="zoom:80%;" />  <h3 id="2-前后端分离"><a href="#2-前后端分离" class="headerlink" title="2. 前后端分离"></a>2. 前后端分离</h3><p>前后端不分离的开发模式存在以下缺陷：</p><ul><li>后端的工作量较大，除了要编写业务接口，还需要兼顾前端模板的数据渲染</li><li>前后端关联性太强，对于大型项目或多人协作的项目，可能会造成项目进度阻塞</li></ul><p>因此现在大部分的Web开发都是采用的前后端分离的开发模式。在该模式下，前端人员通常借助一些前端框架（Vue、React、Angular）来编写前端页面，同时也支持逻辑处理和数据请求，从而可以从后端直接获取数据并实现数据的动态渲染，前端不必再为后端提供页面模板，后端也可以只专注于业务逻辑的编写。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">特点：<br><span class="hljs-bullet">    -</span> 一般基于 vue.js、react.js、angular.js 框架来编写前端页面（本质上是HTML、CSS、JS）。<br><span class="hljs-bullet">    -</span> 页面上如果需要呈现数据，则需要则需要通过 ajax 的形式向后端发送请求（URL）并获取数据。<br><span class="hljs-bullet">    -</span> 后端接收到请求后，执行视图函数并进行业务处理<br><span class="hljs-bullet">    -</span> 后端的视图执行完毕后，给前端返回 JSON 格式数据。<br><span class="hljs-bullet">    -</span> 前端接收到 JSON 格式数据后呈现在浏览器上即可。<br><br>配合开发：<br><span class="hljs-bullet">    -</span> 前端，写 HTML、CSS、JS（数据都是通过调用后端API获得）<br><span class="hljs-bullet">    -</span> 后端，写 API 接口<br><span class="hljs-bullet">    -</span> 前后端约定好接口的规则。<br></code></pre></td></tr></table></figure><p>从用户的角度而言，前后端的代码会从不同的地址上拿到</p><img src="/img/blog/about_drf/drf2.png" style="zoom:80%;" /> <p>使用前后端分离开发模式的好处如下：</p><ul><li>前后端职责清晰，前端开发者只编写页面，后端开发者只编写业务逻辑代码（两者通过 <code>json</code> 格式请求数据的传输）</li><li>开发高效，前后端做自己擅长的领域，且前端开发者使用前端框架开发，比传统的 <code>HTML</code>、<code>CSS</code>、<code>JS</code>、<code>jQuery</code>等技术高效</li><li>有利于项目的扩展（支持多 <code>APP</code>、微信小程序等）</li></ul><h2 id="二、restful规范"><a href="#二、restful规范" class="headerlink" title="二、restful规范"></a>二、restful规范</h2><h3 id="1-为什么要有开发规范"><a href="#1-为什么要有开发规范" class="headerlink" title="1. 为什么要有开发规范"></a>1. 为什么要有开发规范</h3><p>基于前后端分离的开发模式进行开发，前后端的开发者关联性较弱，各自负责自己领域的开发工作，这就要求前后端必须有一套互相约束的开发规范，避免冲突，例如：</p><ul><li>数据传输用什么格式？XML 格式？JSON 格式？</li><li>出现错误时，错误信息有谁来提供？错误码怎么定义？</li><li>其他等等等……</li></ul><p>目前使用最多的就是 restful 开发规范，它是主流的一套 <code>API</code> 规范，企业进行前后端分离开发一般都会遵循它。restful 中定义了很多规范的条款，涉及到数据交互格式、请求方式、状态码、错误处理等等。</p><h3 id="2-restful-内容介绍"><a href="#2-restful-内容介绍" class="headerlink" title="2. restful 内容介绍"></a>2. restful 内容介绍</h3><h4 id="2-1-HTTPS-协议"><a href="#2-1-HTTPS-协议" class="headerlink" title="2.1 HTTPS 协议"></a>2.1 HTTPS 协议</h4><p>restful 建议使用 <code>https</code> 协议替代 <code>http</code> 协议，让接口数据更加安全。</p><h4 id="2-2-域名"><a href="#2-2-域名" class="headerlink" title="2.2 域名"></a>2.2 域名</h4><p>对于后端 <code>API</code> 接口中要体现 <code>API</code> 标识，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 通过二级域名体现<br>https://api.example.com<br><br># 通过URL后缀体现<br>https://www.example.com/api/<br></code></pre></td></tr></table></figure><h4 id="2-3-版本"><a href="#2-3-版本" class="headerlink" title="2.3 版本"></a>2.3 版本</h4><p>对于后端 <code>API</code> 接口中要体现版本，便于实现接口的兼容性，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 通过URL后缀体现<br>http://api.example.com/v1/<br><br># 通过URL携带的参数体现<br>http://api.example.com/?version=v1<br><br># 通过二级域名体现<br>http://v1.example.com/<br><br># 通过请求头体现<br>Accept: application/json; version=v1<br></code></pre></td></tr></table></figure><h4 id="2-4-路径"><a href="#2-4-路径" class="headerlink" title="2.4 路径"></a>2.4 路径</h4><p>restful 规范中认为网络上的一切都称是资源，围绕着资源可以进行增删改查等操作。这些资源，在URL中要使用名词表示（可复数），围绕着资源进行的操作就用方法名进行区分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://api.example.com/v1/person<br>https://api.example.com/v1/zoos<br>https://api.example.com/v1/animals<br>https://api.example.com/v1/employees<br></code></pre></td></tr></table></figure><h4 id="2-5-请求方法"><a href="#2-5-请求方法" class="headerlink" title="2.5 请求方法"></a>2.5 请求方法</h4><p>根据请求方法不同进行不同的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 请求方法<br>GET在服务器取出资源（一项或多项）<br>POST在服务器新建一个资源<br>PUT在服务器更新资源（客户端提供改变后的完整资源）<br>PATCH在服务器更新资源（客户端提供改变的属性）<br>DELETE在服务器删除资源<br><br># 示例<br>https://api.example.com/v1/users<br>https://api.example.com/v1/users/1/<br><br>接口：/users/方法：GET     =&gt;   用户列表<br>接口：/users/方法：POST    =&gt;   添加用户<br>接口：/users/(\d+)/方法：GET     =&gt;   获取单条数据<br>接口：/users/(\d+)/方法：DELETE  =&gt;   删除数据<br>接口：/users/(\d+)/方法：PUT     =&gt;   更新数据<br>接口：/users/(\d+)/方法：PATCH   =&gt;   局部更新<br></code></pre></td></tr></table></figure><h4 id="2-6-搜索条件"><a href="#2-6-搜索条件" class="headerlink" title="2.6 搜索条件"></a>2.6 搜索条件</h4><p>在URL中通过参数的形式来传递搜索条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apl"># 指定返回记录的数量<br>https://api.example.com/v1/zoos?limit=10<br><br># 指定返回记录的开始位置<br>https://api.example.com/v1/zoos?offset=10<br><br># 指定第几页，以及每页的记录数<br>https://api.example.com/v1/zoos?page=2&amp;per_page=100<br><br># 指定返回结果按照哪个属性排序，以及排序顺序<br>https://api.example.com/v1/zoos?sortby=name&amp;order=asc<br><br># 指定筛选条件<br>https://api.example.com/v1/zoos?animal_type_id=1<br></code></pre></td></tr></table></figure><h4 id="2-7-返回数据"><a href="#2-7-返回数据" class="headerlink" title="2.7 返回数据"></a>2.7 返回数据</h4><p>针对不同操作，服务器向用户返回的结果结构应该不同。</p><table><thead><tr><th>URL</th><th>方法</th><th>描述</th><th>返回数据</th></tr></thead><tbody><tr><td>&#x2F;users&#x2F;</td><td>GET</td><td>列表</td><td>返回资源对象的列表<br />[ {“id”: 1, “name”: “CDC”},   {“id”: 2, “name”: “TR”}  ]</td></tr><tr><td>&#x2F;users&#x2F;</td><td>POST</td><td>添加</td><td>返回新生成的资源对象<br />{ “id”: 3, “name”: “CDDC”}</td></tr><tr><td>&#x2F;users&#x2F;(\d+)&#x2F;</td><td>GET</td><td>获取单条数据</td><td>返回单个资源对象<br />{ “id”: 1, “name”: “CDC”}</td></tr><tr><td>&#x2F;users&#x2F;(\d+)&#x2F;</td><td>DELETE</td><td>删除数据</td><td>返回一个空文档<br />null</td></tr><tr><td>&#x2F;users&#x2F;(\d+)&#x2F;</td><td>PUT</td><td>更新数据</td><td>返回完整的资源对象<br />{ “id”: 1, “name”: “CDCC” }</td></tr><tr><td>&#x2F;users&#x2F;(\d+)&#x2F;</td><td>PATCH</td><td>局部更新</td><td>返回完整的资源对象<br />{ “id”: 1, “name”: “CDCC” }</td></tr></tbody></table><p>一般在实际的开发过程中会对上述返回数据进行补充和完善，例如每次请求都返回一个字典，其中包含：</p><ul><li>code：表示返回码，用于表示请求执行请求，例如：0 表示请求成功，1003 表示参数非法，40009 数据量太大等。</li><li>data：表示数据</li><li>error：错误信息</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    code<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CDC&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>   <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TR&quot;</span><span class="hljs-punctuation">&#125;</span>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    code<span class="hljs-punctuation">:</span> <span class="hljs-number">1003</span><span class="hljs-punctuation">,</span><br>    error<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;query params invalid&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-8-状态码"><a href="#2-8-状态码" class="headerlink" title="2.8 状态码"></a>2.8 状态码</h4><p>后端 <code>API</code> 在对请求进行响应时，除了返回数据以外，还应该返回状态码来表示请求状况。常见的通用状态码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apl">200 OK - [GET]：服务器成功返回用户请求的数据<br>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。<br>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）<br>204 NO CONTENT - [DELETE]：用户删除数据成功。<br>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作。<br>401 Unauthorized - [*]：表示用户未认证（令牌、用户名、密码错误）。<br>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。<br>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作。<br>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。<br>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。<br>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。<br>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br><br>更多看这里：http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html<br></code></pre></td></tr></table></figure><img src="/img/blog/about_drf/drf3.png" style="zoom:70%;" />  <p>通用的状态码可以表示一部分的服务端的处理请求，但特别细致的信息无法全都都包括，所以一般在开发中，后端 <code>API</code> 会额外再返回一个自定义的状态码来表示额外的请求结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_user</span>(<span class="hljs-params">request</span>):<br>    query_param = request.GET.get(<span class="hljs-string">&quot;uid&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        user_id = <span class="hljs-built_in">int</span>(query_param)<br><br>        <span class="hljs-keyword">if</span> user_id == <span class="hljs-number">1</span>:<br>            ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;data&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;CDC&quot;</span>&#125;&#125;<br>        <span class="hljs-keyword">else</span>:<br>            ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;no user&quot;</span>&#125;<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        ret_data = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1002</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;invalid query params&quot;</span>&#125;<br><br>    <span class="hljs-keyword">return</span> JsonResponse(ret_data)<br></code></pre></td></tr></table></figure><h4 id="2-9-错误处理"><a href="#2-9-错误处理" class="headerlink" title="2.9 错误处理"></a>2.9 错误处理</h4><p>当后端 <code>API</code> 报错，应该返回导致错误的信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Invalid API key&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
      <tag>django_restful_framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之中间件</title>
    <link href="/2020/04/27/0513-Django%E7%BB%84%E4%BB%B6%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2020/04/27/0513-Django%E7%BB%84%E4%BB%B6%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、中间件介绍"><a href="#一、中间件介绍" class="headerlink" title="一、中间件介绍"></a>一、中间件介绍</h2><p>​我们在最开始介绍 django 生命周期的时候提及到过，浏览器发出的请求并不是直接到达路由层，视图层处理完的结果也不是直接返回浏览器的，都要经过中间件的处理。中间件顾名思义，是介于request与response处理之间的一道处理过程，相对比较轻量级，并且在全局上改变django的输入与输出。因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。</p><p>对于中间件的配置可以在项目中的 settings.py 中修改，django 为我们默认提供了七个中间件，每一个中间件都有自己特殊的功能。中间件的执行顺序是按照他们在配置文件中的先后顺序来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><p>我们可以简单选择两个中间件观察一下他们的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.middleware.security <span class="hljs-keyword">import</span> SecurityMiddleware<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponsePermanentRedirect<br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityMiddleware</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, get_response=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.sts_seconds = settings.SECURE_HSTS_SECONDS<br>        <span class="hljs-variable language_">self</span>.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS<br>        <span class="hljs-variable language_">self</span>.sts_preload = settings.SECURE_HSTS_PRELOAD<br>        <span class="hljs-variable language_">self</span>.content_type_nosniff = settings.SECURE_CONTENT_TYPE_NOSNIFF<br>        <span class="hljs-variable language_">self</span>.xss_filter = settings.SECURE_BROWSER_XSS_FILTER<br>        <span class="hljs-variable language_">self</span>.redirect = settings.SECURE_SSL_REDIRECT<br>        <span class="hljs-variable language_">self</span>.redirect_host = settings.SECURE_SSL_HOST<br>        <span class="hljs-variable language_">self</span>.redirect_exempt = [re.<span class="hljs-built_in">compile</span>(r) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> settings.SECURE_REDIRECT_EXEMPT]<br>        <span class="hljs-variable language_">self</span>.get_response = get_response<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        path = request.path.lstrip(<span class="hljs-string">&quot;/&quot;</span>)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">self</span>.redirect <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> request.is_secure() <span class="hljs-keyword">and</span><br>                <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(pattern.search(path)<br>                        <span class="hljs-keyword">for</span> pattern <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.redirect_exempt)):<br>            host = <span class="hljs-variable language_">self</span>.redirect_host <span class="hljs-keyword">or</span> request.get_host()<br>            <span class="hljs-keyword">return</span> HttpResponsePermanentRedirect(<br>                <span class="hljs-string">&quot;https://%s%s&quot;</span> % (host, request.get_full_path())<br>            )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">self</span>.sts_seconds <span class="hljs-keyword">and</span> request.is_secure() <span class="hljs-keyword">and</span><br>                <span class="hljs-string">&#x27;strict-transport-security&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response):<br>            sts_header = <span class="hljs-string">&quot;max-age=%s&quot;</span> % <span class="hljs-variable language_">self</span>.sts_seconds<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.sts_include_subdomains:<br>                sts_header = sts_header + <span class="hljs-string">&quot;; includeSubDomains&quot;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.sts_preload:<br>                sts_header = sts_header + <span class="hljs-string">&quot;; preload&quot;</span><br>            response[<span class="hljs-string">&quot;strict-transport-security&quot;</span>] = sts_header<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.content_type_nosniff <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;x-content-type-options&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response:<br>            response[<span class="hljs-string">&quot;x-content-type-options&quot;</span>] = <span class="hljs-string">&quot;nosniff&quot;</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.xss_filter <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;x-xss-protection&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response:<br>            response[<span class="hljs-string">&quot;x-xss-protection&quot;</span>] = <span class="hljs-string">&quot;1; mode=block&quot;</span><br><br>        <span class="hljs-keyword">return</span> response<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.sessions.middleware <span class="hljs-keyword">import</span> SessionMiddleware<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> importlib <span class="hljs-keyword">import</span> import_module<br><br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">from</span> django.contrib.sessions.backends.base <span class="hljs-keyword">import</span> UpdateError<br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> SuspiciousOperation<br><span class="hljs-keyword">from</span> django.utils.cache <span class="hljs-keyword">import</span> patch_vary_headers<br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.utils.http <span class="hljs-keyword">import</span> cookie_date<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionMiddleware</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, get_response=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.get_response = get_response<br>        engine = import_module(settings.SESSION_ENGINE)<br>        <span class="hljs-variable language_">self</span>.SessionStore = engine.SessionStore<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)<br>        request.session = <span class="hljs-variable language_">self</span>.SessionStore(session_key)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        If request.session was modified, or if the configuration is to save the</span><br><span class="hljs-string">        session every time, save the changes and set a session cookie or delete</span><br><span class="hljs-string">        the session cookie if the session has been emptied.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            accessed = request.session.accessed<br>            modified = request.session.modified<br>            empty = request.session.is_empty()<br>        <span class="hljs-keyword">except</span> AttributeError:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># First check if we need to delete this cookie.</span><br>            <span class="hljs-comment"># The session should be deleted only if the session is entirely empty</span><br>            <span class="hljs-keyword">if</span> settings.SESSION_COOKIE_NAME <span class="hljs-keyword">in</span> request.COOKIES <span class="hljs-keyword">and</span> empty:<br>                response.delete_cookie(<br>                    settings.SESSION_COOKIE_NAME,<br>                    path=settings.SESSION_COOKIE_PATH,<br>                    domain=settings.SESSION_COOKIE_DOMAIN,<br>                )<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> accessed:<br>                    patch_vary_headers(response, (<span class="hljs-string">&#x27;Cookie&#x27;</span>,))<br>                <span class="hljs-keyword">if</span> (modified <span class="hljs-keyword">or</span> settings.SESSION_SAVE_EVERY_REQUEST) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> empty:<br>                    <span class="hljs-keyword">if</span> request.session.get_expire_at_browser_close():<br>                        max_age = <span class="hljs-literal">None</span><br>                        expires = <span class="hljs-literal">None</span><br>                    <span class="hljs-keyword">else</span>:<br>                        max_age = request.session.get_expiry_age()<br>                        expires_time = time.time() + max_age<br>                        expires = cookie_date(expires_time)<br>                    <span class="hljs-comment"># Save the session data and refresh the client cookie.</span><br>                    <span class="hljs-comment"># Skip session save for 500 responses, refs #3881.</span><br>                    <span class="hljs-keyword">if</span> response.status_code != <span class="hljs-number">500</span>:<br>                        <span class="hljs-keyword">try</span>:<br>                            request.session.save()<br>                        <span class="hljs-keyword">except</span> UpdateError:<br>                            <span class="hljs-keyword">raise</span> SuspiciousOperation(<br>                                <span class="hljs-string">&quot;The request&#x27;s session was deleted before the &quot;</span><br>                                <span class="hljs-string">&quot;request completed. The user may have logged &quot;</span><br>                                <span class="hljs-string">&quot;out in a concurrent request, for example.&quot;</span><br>                            )<br>                        response.set_cookie(<br>                            settings.SESSION_COOKIE_NAME,<br>                            request.session.session_key, max_age=max_age,<br>                            expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,<br>                            path=settings.SESSION_COOKIE_PATH,<br>                            secure=settings.SESSION_COOKIE_SECURE <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span>,<br>                            httponly=settings.SESSION_COOKIE_HTTPONLY <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span>,<br>                        )<br>        <span class="hljs-keyword">return</span> response<br><br></code></pre></td></tr></table></figure><p>我们会发现，实际上中间件就是一个类，并且类中要包含一些固定的方法。将类再添加到配置文件的 MIDDLEWARE 列表中，该类就会变为一个中间件。中间件有以下四种方法，下面会一一介绍：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">process_request</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">process_view</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">process_exception</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">process_response</span><br></code></pre></td></tr></table></figure><h2 id="二、自定义中间件"><a href="#二、自定义中间件" class="headerlink" title="二、自定义中间件"></a>二、自定义中间件</h2><h3 id="2-1-process-request"><a href="#2-1-process-request" class="headerlink" title="2.1 process_request"></a><strong>2.1 process_request</strong></h3><p>请求会先依次触发中间件中的 process_request 方法，再去执行对应的视图方法。我们通过一个简单的例子来验证一下：</p><ul><li>第一步，先自定义两个中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/MyMiddleware.py</span><br><br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>第二步，注册中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;app01.MyMiddleware.MyMiddleware_1&#x27;</span>,<br>    <span class="hljs-string">&#x27;app01.MyMiddleware.MyMiddleware_2&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><ul><li>第三步，编写视图函数进行测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index.......&quot;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;INDEX&quot;</span>)<br></code></pre></td></tr></table></figure><p>启动浏览器访问 <a href="http://127.0.0.1:8000/index/%EF%BC%8C%E8%A7%82%E5%AF%9F%E5%90%8E%E7%AB%AF%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C">http://127.0.0.1:8000/index/，观察后端打印结果</a></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">MyMiddleware_1 request<br>MyMiddleware_2 request<br><span class="hljs-function"><span class="hljs-title">index</span></span>.......<br></code></pre></td></tr></table></figure><p>可见，请求是先按照中间件的顺序，<strong>从上而下</strong>执行了所有中间件中的 process_request ，最后才执行视图中的 index。需要注意的是，不能在 process_request 设置 return 值，对于 process_request 方法来说，执行流程是这样的：首先后端接收到请求，接着所有中间件中的 process_request 会对请求进行进一步处理，最后将处理好的结果再传给视图。如果 process_request 中出现了response 相关的 return，后端就会直接将 process_request 中的返回值返回给浏览器，<strong>不会继续执行后面的中间件和视图部分</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义的中间件的process_request中含有返回值</span><br><br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;middleware1&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br></code></pre></td></tr></table></figure><p>修改中间件后，重新访问 <a href="http://127.0.0.1:8000/index/%EF%BC%8C%E6%AD%A4%E6%97%B6%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E7%9A%84%E6%98%AF">http://127.0.0.1:8000/index/，此时页面显示的是</a> “middleware1”，后台中打印的结果为 “MyMiddleware_1 request”，后面的中间件 middleware_2 和 视图 index 都没有执行（如果在settings.py中把 middleware_1 和middleware_2的顺序换一下，middleware_2 是可以执行的 ），即</p><p>​                            <img src="/img/blog/about_django/process_request.png" style="zoom:67%;" /> </p><h3 id="2-2-process-response"><a href="#2-2-process-response" class="headerlink" title="2.2 process_response"></a><strong>2.2 process_response</strong></h3><p>​视图函数再处理完对应的业务逻辑后，会返回一个 HttpResponse 对象，该对象并不是直接返回给浏览器的，而是先<strong>自下而上</strong>传给每一个中间件中的 process_response 方法，进一步处理后再返回给浏览器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改自定义的中间件</span><br><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-comment"># response 参数就是从视图层获得返回体对象，在这个中间件中处理完以后，继续传给上一个中间件</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br></code></pre></td></tr></table></figure><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"># 后台打印结果如下：<br><br>MyMiddleware_1 <span class="hljs-built_in">request</span><br>MyMiddleware_2 <span class="hljs-built_in">request</span><br>index.......<br>MyMiddleware_2 <span class="hljs-built_in">response</span><br>MyMiddleware_1 <span class="hljs-built_in">response</span><br><br># 可见对于 process_request，执行顺序是按照配置文件中中间件从上到下的顺序；对于 process_response 则是按照从下往上的顺序。<br></code></pre></td></tr></table></figure><p>​需要注意的是，对于 process_response 方法，必须要有一个返回值，且返回值一般是自己接收到的那个 response 对象；如果 process_response 返回一个自定义的 HttpResponse 对象也是可以的，这样的话浏览器渲染的就是返回的自定义的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 response&quot;</span>)<br>        <span class="hljs-comment"># return response  # 将返回结果传给上一个中间件</span><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)  <span class="hljs-comment"># 不再返回 response 对象，返回自己自定义的内容</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-comment"># response 参数就是从视图层获得返回体对象，在这个中间件中处理完以后，继续传给上一个中间件</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 测试结果</span><br>此时访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/index/</span>，页面显示的内容是 <span class="hljs-string">&quot;OK&quot;</span><br></code></pre></td></tr></table></figure><p>当 process_request 中设有返回值时，process_response 返回的对象将是 process_request 中设置的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;middleware1&quot;</span>)  <span class="hljs-comment"># 自定义一个返回值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br>      <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-comment"># response 参数就是从视图层获得返回体对象，在这个中间件中处理完以后，继续传给上一个中间件</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 测试结果</span><br>此时访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/index/</span>，页面显示的内容是 <span class="hljs-string">&quot;middleware1&quot;</span><br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>只要 process_response 中有自定义的返回值时，最终返回给浏览器的都是该值</li><li>当 process_response 中没有自定义的返回值，但是 process_request 中有设置的返回值时，最终返回给浏览器的是 process_request 中的返回值</li><li>当 process_response 中没有自定义的返回值， process_request 也没有设置的返回值时，最终返回给浏览器的是视图的结果</li></ul><p>​                            <img src="/img/blog/about_django/process_response.png" style="zoom:67%;" />   </p><h3 id="2-3-process-view"><a href="#2-3-process-view" class="headerlink" title="2.3 process_view"></a><strong>2.3 process_view</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_view</span>(<span class="hljs-params">self, request, callback, callback_args, callback_kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 view&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-comment"># response 参数就是从视图层获得返回体对象，在这个中间件中处理完以后，继续传给上一个中间件</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_view</span>(<span class="hljs-params">self, request, callback, callback_args, callback_kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 view&quot;</span>)<br></code></pre></td></tr></table></figure><p>相关参数介绍：</p><ul><li>callback通过路由层映射找到的要执行的视图函数</li><li>callback_args&#x2F;callback_kwargs         视图函数的参数</li></ul><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"># 测试时后端打印结果<br><br>MyMiddleware_1 <span class="hljs-built_in">request</span><br>MyMiddleware_2 <span class="hljs-built_in">request</span><br>MyMiddleware_1 view<br>MyMiddleware_2 view<br>index.......<br>MyMiddleware_2 <span class="hljs-built_in">response</span><br>MyMiddleware_1 <span class="hljs-built_in">response</span><br></code></pre></td></tr></table></figure><p>可见 process_view 是在 process_request 之后且在视图函数之前执行的，即</p><p>​                         <img src="/img/blog/about_django/process_view.png" style="zoom:67%;" />  </p><p>当最后一个中间的 process_request 到达路由关系映射之后，返回到中间件1的 process_view，然后依次往下，到达 views 函数，最后通过 process_response 依次返回到达浏览器。</p><p>由于参数 callback 实际上就是对应的视图函数的名称空间，我们也可以在 process_view 中直接提前执行视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_view</span>(<span class="hljs-params">self, request, callback, callback_args, callback_kwargs</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>, callback)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 view&quot;</span>)<br>    <br>    response=callback(request,*callback_args,**callback_kwargs)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>同样的，由流程图可以看出，process_view 如果有返回值，会越过其他的 process_view 以及视图函数，但是所有的 process_response 都还会执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_view</span>(<span class="hljs-params">self, request, callback, callback_args, callback_kwargs</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 view&quot;</span>)<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-4-process-exception"><a href="#2-4-process-exception" class="headerlink" title="2.4 process_exception"></a><strong>2.4 process_exception</strong></h3><p>只有视图中出现错误时，才会触发该方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_view</span>(<span class="hljs-params">self, request, callback, callback_args, callback_kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_1 view&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_exception</span>(<span class="hljs-params">self, request, exception</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CustomerMiddleware1 process_exception&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMiddleware_2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 request&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-comment"># response 参数就是从视图层获得返回体对象，在这个中间件中处理完以后，继续传给上一个中间件</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 response&quot;</span>)<br>        <span class="hljs-keyword">return</span> response  <span class="hljs-comment"># 将返回结果传给上一个中间件</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_view</span>(<span class="hljs-params">self, request, callback, callback_args, callback_kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyMiddleware_2 view&quot;</span>)<br>      <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_exception</span>(<span class="hljs-params">self, request, exception</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CustomerMiddleware2 process_exception&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index.......&quot;</span>)<br>    aaaa  <span class="hljs-comment"># 执行到这一行会报错</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;INDEX&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"># 后台打印结果<br><br>MyMiddleware_1 <span class="hljs-built_in">request</span><br>MyMiddleware_2 <span class="hljs-built_in">request</span><br>MyMiddleware_1 view<br>MyMiddleware_2 view<br>index.......<br>CustomerMiddleware2 process_exception<br>CustomerMiddleware1 process_exception<br>MyMiddleware_2 <span class="hljs-built_in">response</span><br>MyMiddleware_1 <span class="hljs-built_in">response</span><br></code></pre></td></tr></table></figure><p>​视图函数执行到 aaaa 时会报错，此时不再继续执行后面的代码，而是去执行中间件中的 process_exception 方法，执行顺序是按照中间件从下往上的顺序，如果当前中间件中的 process_exception  没有对异常进行处理，机会继续向上走，直到某一个中间件对异常进行了处理，那么该中间件上面的中间件的 process_exception  就不会执行了，次数会回过头去执行最后一个中间件中的 process_response方法；如果一直没有中间件对异常进行处理，就会返回默认的错响应。</p><p>​                  <img src="/img/blog/about_django/process_exception.png" style="zoom:67%;" /> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对异常进行处理</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_exception</span>(<span class="hljs-params">self, request, exception</span>):<br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CustomerMiddleware2 process_exception&quot;</span>)<br> <span class="hljs-comment"># 简单的返回异常</span><br> <span class="hljs-keyword">return</span> HttpResponse(exception)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之用户认证</title>
    <link href="/2020/04/26/0512-Django%E7%BB%84%E4%BB%B6%E4%B9%8B%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/04/26/0512-Django%E7%BB%84%E4%BB%B6%E4%B9%8B%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、用户认证机制的简单了解"><a href="#一、用户认证机制的简单了解" class="headerlink" title="一、用户认证机制的简单了解"></a>一、用户认证机制的简单了解</h2><p>​我们之前已经学会使用会话跟踪技术来实现对用户的相关管理，那为什么 django 还要专门提供一套用于管理用户的组件呢？这是因为只单纯的使用会话技术会存数据混乱的问题。比如，用户A在会话中保存了姓名、邮箱、登陆状态三个属性，用户B只要姓名和登陆状态两个属性，此时换成用户B登录，只会把会话中的姓名和登陆状态覆盖，邮箱信息还会保留用户A的。</p><p>​为了方便管理用户认证相关的操作，django 给我们提供了一套专门的组件。需要注意的是，一旦我们要使用django给我们提供的用户认证内部机制，就必须使用django自带的那张auth_user表，同样对于表的增删改查操作也和原先的ORM操作不太一样。我们可以简单看一个例子：</p><p>1、创建一个 django 项目并创建一个 app，注册该app；</p><p>2、不用建表，直接进行进行数据库迁移操作；</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>3、进入数据库，可以看到生成了一张 auth_user 表，之后对于用的操作都会基于这一张表。表中给我们提供了许多字段，如果这些字段还不能满足我们的需求，可以通过表关联的方式将我们所需要的字段关联上去；</p><p>4、通过命令方式创建两个用户（这里暂时用命令创建，后面会学习使用 User 对象来操作用户），django 会对密码自动加密处理</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> createsuperuser<br></code></pre></td></tr></table></figure><img src="/img/blog/about_django/auth_user1.png" style="zoom:67%;" /> <h2 id="二、auth-模块的使用"><a href="#二、auth-模块的使用" class="headerlink" title="二、auth 模块的使用"></a>二、auth 模块的使用</h2><p>对于 auth 模块，我们需要掌握以下三种方法：</p><h3 id="2-1-authenticate"><a href="#2-1-authenticate" class="headerlink" title="2.1 authenticate()"></a><strong>2.1 authenticate()</strong></h3><p>​该方法用于用户认证，即验证用户名以及密码是否正确，如果认证信息有效，会返回一个 User 对象，该对象是 django 内部封装好的一个对象。authenticate 会在User 对象上设置一个属性标识哪种认证后端认证了该用户，且该信息在后面的登录过程中是需要的。当我们试图登陆一个从数据库中直接取出来不经过authenticate()的User对象会报错的。</p><p>我们先回忆一下普通检验用户的用户名和密码的正确性的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br>        <br>        <span class="hljs-keyword">if</span> ret:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;登录成功&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;登录失败&quot;</span>)<br><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>使用 authenticate 来认证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br><br><span class="hljs-comment"># 认证成功会返回一个user对象，失败返回一个None</span><br>        user = auth.authenticate(username=name, password=pwd)<br><br>        <span class="hljs-built_in">print</span>(user)<br><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>如果我们想通过原始的ORM操作来对 auth_user 这张表进行校验是行不通的。我们从前端中获取的密码都是最原始的，但是表中的密码是加密过后的，所以查找永远是失败的。</p><h3 id="2-2-login-HttpRequest-user"><a href="#2-2-login-HttpRequest-user" class="headerlink" title="2.2 login(HttpRequest, user)"></a><strong>2.2 login(HttpRequest, user)</strong></h3><p>该函数接受一个HttpRequest对象，以及一个认证了的User对象。此函数使用 django 的 session 框架给某个已认证的用户附加上 sessionid 等信息，等同于我们手动设置相关的session信息。一旦登录验证成功，就会把当前的用户相关的信息全部封装到 request.user 中，且 request.user 是一个全局的变量，即其他视图函数和模板中可以直接引用。如果登录验证没有成功， request.user 中就会得到一个匿名用户对象。匿名用户对象有以下的特点：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">id 永远为None。<br>username 永远为空字符串。<br><span class="hljs-function"><span class="hljs-title">get_username</span><span class="hljs-params">()</span></span> 永远返回空字符串。<br>is_staff 和 is_superuser 永远为False。<br>is_active 永远为 False。<br>groups 和 user_permissions 永远为空。<br><span class="hljs-function"><span class="hljs-title">is_anonymous</span><span class="hljs-params">()</span></span> 返回True 而不是False，表示该对象是一个匿名对象，没有通过登录验证<br><span class="hljs-function"><span class="hljs-title">is_authenticated</span><span class="hljs-params">()</span></span> 返回False 而不是True，表示是否是通过验证的对象<br><span class="hljs-function"><span class="hljs-title">set_password</span><span class="hljs-params">()</span></span>、<span class="hljs-built_in">check_password</span>()、<span class="hljs-built_in">save</span>() 和<span class="hljs-built_in">delete</span>() 引发 NotImplementedError。<br><br>New <span class="hljs-keyword">in</span> Django <span class="hljs-number">1.8</span>:<br>新增 AnonymousUser<span class="hljs-selector-class">.get_username</span>() 以更好地模拟 django<span class="hljs-selector-class">.contrib</span><span class="hljs-selector-class">.auth</span><span class="hljs-selector-class">.models</span>.User。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br><br>        <span class="hljs-comment"># 认证成功会返回一个user对象，失败返回一个None</span><br>        user = auth.authenticate(username=name, password=pwd)<br><br>        <span class="hljs-built_in">print</span>(user)<br><br>        <span class="hljs-keyword">if</span> user:<br>            auth.login(request, user)  <span class="hljs-comment"># 登录成功后将当前用户信息封装到 request.user 中去</span><br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 如果 request.user 中的 is_anonymous 的值为 True，证明是匿名对象，没有登陆过</span><br>    <span class="hljs-keyword">if</span> request.user.is_anonymous:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Index&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-3-logout-request"><a href="#2-3-logout-request" class="headerlink" title="2.3 logout(request)"></a><strong>2.3 logout(request)</strong></h3><p>该函数接受一个HttpRequest对象，用于注销用户信息，无返回值。当调用该函数时，当前请求的session信息会全部清除。该用户即使没有登录，使用该函数也不会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">request</span>):<br>    auth.logout(request)<br>    <br>    <span class="hljs-comment"># 用户退出后，直接返回登录页面</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-4-使用-auth-模块完成用户登录验证"><a href="#2-4-使用-auth-模块完成用户登录验证" class="headerlink" title="2.4 使用 auth 模块完成用户登录验证"></a><strong>2.4 使用 auth 模块完成用户登录验证</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/&#x27;</span>, views.login),<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;^logout/&#x27;</span>, views.logout),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br><br>        <span class="hljs-comment"># 认证成功会返回一个user对象，失败返回一个None</span><br>        user = auth.authenticate(username=name, password=pwd)<br><br>        <span class="hljs-built_in">print</span>(user)<br><br>        <span class="hljs-keyword">if</span> user:<br>            auth.login(request, user)  <span class="hljs-comment"># 登录成功后将当前用户信息封装到 request.user 中去</span><br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 如果 request.user 中的 is_anonymous 的值为 True，证明是匿名对象，没有登陆过，那就返回登陆页面</span><br>    <span class="hljs-keyword">if</span> request.user.is_anonymous:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">request</span>):<br>    auth.logout(request)<br>    <br>    <span class="hljs-comment"># 用户退出后，给用户返回一个登陆页面</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- login.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是 Index 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>欢迎，&#123;&#123; request.user.username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout/&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动项目进行测试：</p><p>第一步，直接访问 <a href="http://127.0.0.1:8000/index/%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%94%A8%E6%88%B7%E6%B2%A1%E6%9C%89%E7%99%BB%E5%BD%95%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%EF%BC%9B">http://127.0.0.1:8000/index/，此时用户没有登录，直接跳转到登录页面；</a></p><p>第二步，输入用户名和密码后，登陆成功跳转到首页；</p><p>第三步，点击首页注销按钮，此时用户登陆的相关会话信息已经被删除，跳转登录页面。此时再次直接访问  <a href="http://127.0.0.1:8000/index/%EF%BC%8C%E8%BF%98%E6%98%AF%E4%BC%9A%E8%B7%B3%E5%9B%9E%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%AF%81%E6%98%8E%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%9A%84%E8%AE%A4%E8%AF%81%E8%A2%AB%E6%B3%A8%E9%94%80%E3%80%82">http://127.0.0.1:8000/index/，还是会跳回登录页面，证明用户登录的认证被注销。</a></p><h2 id="三、User-对象"><a href="#三、User-对象" class="headerlink" title="三、User 对象"></a>三、User 对象</h2><p>User 对象是 django 内部封装的，配合 auth 模块使用的一个对象类，主要掌握以下的操作：</p><h3 id="3-1-is-authenticated"><a href="#3-1-is-authenticated" class="headerlink" title="3.1 is_authenticated"></a><strong>3.1 is_authenticated</strong></h3><p>​如果是真正的 User 对象，该属性的返回值恒为 True 。 用于检查用户是否已经通过了认证。通过认证并不意味着用户拥有任何权限，甚至也不检查该用户是否处于激活状态，这只是表明用户成功的通过了认证。 这个方法很重要, 在后台用request.user.is_authenticated()判断用户是否已经登录，如果true则可以向前台展示request.user中的相关信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 如果 request.user 中的 is_authenticated 的值为 False，证明是匿名对象，没有登陆过，那就返回登陆页面</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.user.is_authenticated:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-创建一个user对象"><a href="#3-2-创建一个user对象" class="headerlink" title="3.2 创建一个user对象"></a><strong>3.2 创建一个user对象</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br>user = User.objects.create_user（username=<span class="hljs-string">&#x27;&#x27;</span>,password=<span class="hljs-string">&#x27;&#x27;</span>,email=<span class="hljs-string">&#x27;&#x27;</span>）<br></code></pre></td></tr></table></figure><h3 id="3-3-check-password-passwd"><a href="#3-3-check-password-passwd" class="headerlink" title="3.3 check_password(passwd)"></a><strong>3.3 check_password(passwd)</strong></h3><p>用于检查密码是否符合规则，通常和修改密码功能联合使用</p><h3 id="3-4-set-password"><a href="#3-4-set-password" class="headerlink" title="3.4 set_password()"></a><strong>3.4 set_password()</strong></h3><p>修改密码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_password</span>(<span class="hljs-params">request</span>):<br>    user = request.user<br>    state = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        old_password = request.POST.get(<span class="hljs-string">&#x27;old_password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        new_password = request.POST.get(<span class="hljs-string">&#x27;new_password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        repeat_password = request.POST.get(<span class="hljs-string">&#x27;repeat_password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> user.check_password(old_password):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> new_password:<br>                state = <span class="hljs-string">&#x27;empty&#x27;</span><br>            <span class="hljs-keyword">elif</span> new_password != repeat_password:<br>                state = <span class="hljs-string">&#x27;repeat_error&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                user.set_password(new_password)<br>                user.save()<br>                <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/log_in/&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            state = <span class="hljs-string">&#x27;password_error&#x27;</span><br>    content = &#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: user,<br>        <span class="hljs-string">&#x27;state&#x27;</span>: state,<br>    &#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;set_password.html&#x27;</span>, content)<br></code></pre></td></tr></table></figure><h3 id="3-5-使用装饰器来实现用户认证"><a href="#3-5-使用装饰器来实现用户认证" class="headerlink" title="3.5 使用装饰器来实现用户认证"></a><strong>3.5 使用装饰器来实现用户认证</strong></h3><p>​想要判断用户是否已经通过登录认证，就需要在每个视图中对 request.user 中的 is_authenticated 进行判断，这其实是非常繁琐的。django 还专门提供了用于判断用户登录认证的装饰器，方便我们进行使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/&#x27;</span>, views.login),<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;^logout/&#x27;</span>, views.logout),<br>    url(<span class="hljs-string">r&#x27;^order/&#x27;</span>, views.order),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> auth<br><span class="hljs-keyword">from</span> django.contrib.auth.decorators <span class="hljs-keyword">import</span> login_required<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br><br>        <span class="hljs-comment"># 认证成功会返回一个user对象，失败返回一个None</span><br>        user = auth.authenticate(username=name, password=pwd)<br><br>        <span class="hljs-built_in">print</span>(user)<br><br>        <span class="hljs-keyword">if</span> user:<br>            auth.login(request, user)  <span class="hljs-comment"># 登录成功后将当前用户信息封装到 request.user 中去</span><br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/index/&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 如果 request.user 中的 is_anonymous 的值为 True，证明是匿名对象，没有登陆过，那就返回登陆页面</span><br>    <span class="hljs-comment"># if request.user.is_anonymous:</span><br>    <span class="hljs-comment">#     return redirect(&quot;/login/&quot;)</span><br>    <span class="hljs-comment"># else:</span><br>    <span class="hljs-comment">#     return render(request, &quot;index.html&quot;)</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br><br><br><span class="hljs-meta">@login_required</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">order</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;order.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">request</span>):<br>    auth.logout(request)<br><br>    <span class="hljs-comment"># 用户退出后，给用户返回一个登陆页面</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- order.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是 order 页面<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：使用装饰器时，要在 settings 中添加一个 LOGIN_URL 配置参数，否则访问登陆页面时会跳转到 django 内置的一个登录路径，而不是往我们自己定义的路由跳转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>LOGIN_URL = <span class="hljs-string">&quot;/login/&quot;</span><br></code></pre></td></tr></table></figure><p>启动项目进行测试，发现用户未登录的情况下直接访问 index 和 order 都会跳转到登陆页面，只有登录了才能正常访问。</p><p>​但是整体还存在一个问题，当我我们未登录的情况下访问 <a href="http://127.0.0.1:8000/login/index">http://127.0.0.1:8000/login/index</a> 的时候，会自动跳转到登陆页面，此时路由变为 <a href="http://127.0.0.1:8000/login/?next=/index/">http://127.0.0.1:8000/login/?next=/index/</a> ，这个路由的意思是，当前在login页面，登录成功后跳转到 index 请求；同样的，对于 order 页面，<a href="http://127.0.0.1:8000/login/?next=/order/">http://127.0.0.1:8000/login/?next=/order/</a> 表示当前在login页面，登录成功后跳转到 order请求，但是实际测试的时候，两者都是跳转到 index 页面，这是由于在login视图逻辑中，我们将验证成功后跳转的请求写死了，即</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis">if <span class="hljs-literal">user</span>:<br>auth.login(request, <span class="hljs-literal">user</span>)  <span class="hljs-comment"># 登录成功后将当前用户信息封装到 request.user 中去</span><br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/index/&quot;</span>)<br></code></pre></td></tr></table></figure><p>所以，我们应该根据实际要跳转的路由来进行跳转，而不是固定跳转到某一个路由。我们只需要对 login 函数进行一下改动即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br><br>        <span class="hljs-comment"># 认证成功会返回一个user对象，失败返回一个None</span><br>        user = auth.authenticate(username=name, password=pwd)<br><br>        <span class="hljs-built_in">print</span>(user)<br><br>        <span class="hljs-keyword">if</span> user:<br>            auth.login(request, user)  <span class="hljs-comment"># 登录成功后将当前用户信息封装到 request.user 中去</span><br>            <span class="hljs-comment"># return redirect(&quot;/index/&quot;)</span><br>            next_url = request.GET.get(<span class="hljs-string">&quot;next&quot;</span>)<br>            <span class="hljs-keyword">return</span> redirect(next_url)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之会话</title>
    <link href="/2020/04/23/0511-Djano%E7%BB%84%E4%BB%B6%E4%B9%8B%E4%BC%9A%E8%AF%9D/"/>
    <url>/2020/04/23/0511-Djano%E7%BB%84%E4%BB%B6%E4%B9%8B%E4%BC%9A%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、会话跟踪技术"><a href="#一、会话跟踪技术" class="headerlink" title="一、会话跟踪技术"></a>一、会话跟踪技术</h2><h3 id="1-1-HTTP-协议的无状态保存"><a href="#1-1-HTTP-协议的无状态保存" class="headerlink" title="1.1 HTTP 协议的无状态保存"></a><strong>1.1 HTTP 协议的无状态保存</strong></h3><p>​现在有这样一个需求，用户先通过网站的登陆页面进行登录，之后用户再去访问网站的其他页面或者模块，我们怎么才能知道该用户是已经登陆过的呢？显然只依靠 HTTP协议自身是无法实现这一点的，HTTP协议本身无法保存用户的状态，请求与请求之间是没有任何关系的。</p><h3 id="1-2-会话跟踪"><a href="#1-2-会话跟踪" class="headerlink" title="1.2 会话跟踪"></a><strong>1.2 会话跟踪</strong></h3><p>​什么是会话？可以把会话理解为客户端与服务器之间的一次会晤，在一次会晤中可能会包含多次请求和响应。例如你给10086打个电话，你就是客户端，而10086服务人员就是服务器了。从双方接通电话那一刻起，会话就开始了，到某一方挂断电话表示会话结束。在通话过程中，你会向10086发出多个请求，那么这多个请求都在一个会话中。</p><p> 在一个会话的多个请求中共享数据，这就是会话跟踪技术。例如在一个会话中的请求如下：</p><ul><li>请求登录（请求参数是用户名和密码）；</li><li>请求转账（请求参数与转账相关的数据）； </li><li>请求信誉卡还款（请求参数与还款相关的数据）。</li></ul><p>在这上会话中当前用户信息必须在这个会话中共享的，因为登录的是张三，那么在转账和还款时一定是相对张三的转账和还款！这就说明我们必须在一个会话过程中有共享数据的能力。</p><h3 id="1-3-会话跟踪技术的实现"><a href="#1-3-会话跟踪技术的实现" class="headerlink" title="1.3 会话跟踪技术的实现"></a><strong>1.3 会话跟踪技术的实现</strong></h3><p>​我们知道HTTP协议是无状态协议，也就是说每个请求都是独立的！无法记录前一次请求的状态。但HTTP协议中可以使用Cookie来完成会话跟踪！在Web开发中，使用session来完成会话跟踪，session底层依赖Cookie技术。</p><h2 id="二、cookie"><a href="#二、cookie" class="headerlink" title="二、cookie"></a>二、cookie</h2><h3 id="2-1-cookie简介"><a href="#2-1-cookie简介" class="headerlink" title="2.1 cookie简介"></a><strong>2.1 cookie简介</strong></h3><p>​其实Cookie是key-value结构的一个数据，类似于一个python中的字典。它是随着服务器端的响应发送给客户端浏览器的，然后客户端浏览器会把Cookie保存起来，当下一次再访问服务器时把Cookie再发送给服务器。 Cookie是由服务器创建，然后通过响应发送给客户端的一个键值对。客户端会保存Cookie，并会标注出Cookie的来源（哪个服务器的Cookie）。当客户端向服务器发出请求时会把所有这个服务器Cookie包含在请求中发送给服务器，这样服务器就可以识别客户端了！</p><img src="/img/blog/about_django/cookie原理.png" style="zoom:67%;" /> <p>需要注意的是，<strong>一个浏览器和一个服务器之前只能识别自己的Cookie</strong>。这是什么意思呢？</p><p>比如我使用浏览器访问了百度，进行了登录等操作以后，浏览器和百度的服务器之间就会有一套自己的专属cookie，此时我又使用了另一个浏览器访问了百度，此时之前的cookie不能被使用，因为对于百度的服务器来说，之前的浏览器和现在的浏览器是两个完全不同的客户端；</p><p>同样的，我们使用同一个浏览器在访问百度的同时也去访问京东，此时浏览器与百度之间的cookie也不能被京东使用，因为对于浏览器来说，百度和京东是完全不同的服务器。</p><h3 id="2-2-cookie的设置于读取"><a href="#2-2-cookie的设置于读取" class="headerlink" title="2.2 cookie的设置于读取"></a><strong>2.2 cookie的设置于读取</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/&#x27;</span>, views.login),<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> ret:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            cookie是服务器端来设置的，要封装到响应体中：</span><br><span class="hljs-string">            return HttpResponse()</span><br><span class="hljs-string">            return render()</span><br><span class="hljs-string">            return redirect()</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br><br>            <span class="hljs-comment"># 设置cookie</span><br>            response = HttpResponse(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br>            response.set_cookie(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 从请求中获取cookie，如果获取不到就默认赋值 None</span><br>    is_login = request.COOKIES.get(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">if</span> is_login:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- login.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        &#123;% csrf_token %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述示例主要实现了校验用户是否登录过的功能，实现流程如下：</p><ul><li>首先用户访问登陆页面，浏览器发出一个 get 请求；</li><li>服务器接收到 get 请求后返回登陆页面；</li><li>用户在登陆页面填写用户名和密码以后，点击提交数据，此时浏览器会发出一个 post 请求；</li><li>服务器接收到 post 请求带来的数据后进行正确性校验，如果校验成功会在响应体中封装 cookie，定义一个特殊的键值对表示该用户已经登陆成功，校验失败则还是继续返回登陆页面；</li><li>浏览器在接收到响应后，会把 cookie 暂存，继续访问 index 页面时，会把 cookie 封装在请求体中再次一起发送；</li><li>服务器接收到访问 index 页面的请求以后，检查请求中的 cookie 是否含有该特殊的键值，如果有就表示该用户已经登陆过了，直接返回首页；没有则返回登陆页面让用户登录。</li></ul><p>上述示例主测试结果如下：</p><p>**第一步：**访问 <a href="http://127.0.0.1:8000/login/%EF%BC%8C%E8%A7%82%E5%AF%9F%E6%AD%A4%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84">http://127.0.0.1:8000/login/，观察此时浏览器中的</a> cookie</p><img src="/img/blog/about_django/cookie1.png" style="zoom:50%;" /> <p>**第二步：**在为登录的情况下，直接访问 <a href="http://127.0.0.1:8000/index/%EF%BC%8C%E4%BC%9A%E8%B7%B3%E8%BD%AC%E4%BC%9A%E5%9B%9E%E7%99%BB%E9%99%86%E9%A1%B5%E9%9D%A2%EF%BC%8C%E6%AD%A4%E6%97%B6%E8%A7%82%E5%AF%9F">http://127.0.0.1:8000/index/，会跳转会回登陆页面，此时观察</a> index 相关请求中的 cookie</p><img src="/img/blog/about_django/cookie2.png" style="zoom:50%;" /> <p>**第三步：**输入用户名密码进行登录，登录成功后的 cookie 中可以看到我们自己设置的值了</p><img src="/img/blog/about_django/cookie3.png" style="zoom:50%;" /> <p>**第四步：**登录成功后再次访问 index，此时 index 请求相关的 cookie 为</p><img src="/img/blog/about_django/cookie4.png" style="zoom:50%;" /> <h3 id="2-3-cookie的参数设置"><a href="#2-3-cookie的参数设置" class="headerlink" title="2.3 cookie的参数设置"></a><strong>2.3 cookie的参数设置</strong></h3><h4 id="2-3-1-设置超时时间"><a href="#2-3-1-设置超时时间" class="headerlink" title="2.3.1 设置超时时间"></a><strong>2.3.1 设置超时时间</strong></h4><p>如果不设置超时时间，cookie 的有效期默认是在关闭浏览器之前。有两种方式可以设置超时时长</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> ret:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            cookie是服务器端来设置的，要封装到响应体中：</span><br><span class="hljs-string">            return HttpResponse()</span><br><span class="hljs-string">            return render()</span><br><span class="hljs-string">            return redirect()</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br><br>            <span class="hljs-comment"># 设置cookie</span><br>            response = HttpResponse(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br><br>            <span class="hljs-comment"># 方式一：max_age 规定多长时间后 cookies 失效</span><br>            response.set_cookie(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">True</span>, max_age=<span class="hljs-number">30</span>)  <span class="hljs-comment"># 30秒后设置的该键值对失效</span><br><br>            <span class="hljs-comment"># 方式二： expires 规定 cookie 失效的具体时间，值必须是一个时间对象</span><br>            data = datetime.datetime(year=<span class="hljs-number">2020</span>, month=<span class="hljs-number">3</span>, day=<span class="hljs-number">20</span>, hour=<span class="hljs-number">14</span>)<br>            response.set_cookie(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">True</span>, max_age=<span class="hljs-number">30</span>, expires=data)  <span class="hljs-comment"># 2020年3月20号14点时，该键值对失效</span><br><br>            <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-3-2-设置相对路径"><a href="#2-3-2-设置相对路径" class="headerlink" title="2.3.2 设置相对路径"></a><strong>2.3.2 设置相对路径</strong></h4><p>默认情况下，所有视图都可以使用我们设置的cookie，但是我们也可以手动规定 cookie 由哪些固定的视图可以获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> ret:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            cookie是服务器端来设置的，要封装到响应体中：</span><br><span class="hljs-string">            return HttpResponse()</span><br><span class="hljs-string">            return render()</span><br><span class="hljs-string">            return redirect()</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br><br>            <span class="hljs-comment"># 设置cookie</span><br>            response = HttpResponse(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br><br>            response.set_cookie(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">True</span>, path=<span class="hljs-string">&quot;/index/&quot;</span>)  <span class="hljs-comment"># 只有index请求可以获取该 cookie</span><br><br>            <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index&quot;</span>, request.COOKIES)<br><br>    <span class="hljs-comment"># 从请求中获取cookie，如果获取不到就默认赋值 None</span><br>    is_login = request.COOKIES.get(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">if</span> is_login:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test&quot;</span>, request.COOKIES)<br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;test&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/&#x27;</span>, views.login),<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;^test/&#x27;</span>, views.test),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># 测试结果<br>index &#123;&#x27;is_login&#x27;: &#x27;True&#x27;, &#x27;csrftoken&#x27;: &#x27;1rBhf4zliEruWHaoPmvQurF4RirU36j0D5snKSSkIdnbcZUiWEQysFvBSJJuBzGt&#x27;&#125;<br><span class="hljs-keyword">test </span>&#123;&#x27;csrftoken&#x27;: &#x27;1rBhf4zliEruWHaoPmvQurF4RirU36j0D5snKSSkIdnbcZUiWEQysFvBSJJuBzGt&#x27;&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-3-其他参数"><a href="#2-3-3-其他参数" class="headerlink" title="2.3.3 其他参数"></a><strong>2.3.3 其他参数</strong></h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">domain</span>=None,        Cookie生效的域名。你可用这个参数来构造一个跨站cookie。如 domain=<span class="hljs-string">&quot;.example.com&quot;</span> 所构造的cookie对下面这些站点都是可读的：www.example.com 、 www2.example.com 和                           an.other.sub.domain.example.com 。如果该参数设置为 None ，cookie只能由设置它的站点读取。<br><br><span class="hljs-attr">secure</span>=<span class="hljs-literal">False</span>,        如果设置为 <span class="hljs-literal">True</span> ，浏览器将通过HTTPS来回传cookie。<br><span class="hljs-attr">httponly</span>=<span class="hljs-literal">False</span>       只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）<br></code></pre></td></tr></table></figure><h3 id="2-4-删除-cookie"><a href="#2-4-删除-cookie" class="headerlink" title="2.4 删除 cookie"></a><strong>2.4 删除 cookie</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">response.delete_cookie(<span class="hljs-string">&quot;cookie_key&quot;</span>,path=<span class="hljs-string">&quot;/&quot;</span>,domain=name)<br></code></pre></td></tr></table></figure><h2 id="三、cookie-的使用"><a href="#三、cookie-的使用" class="headerlink" title="三、cookie 的使用"></a>三、cookie 的使用</h2><p>实现用户登录后可以访问首页的功能，且首页显示用户名和上次访问首页的时间，点击退出后，用户退出登录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/&#x27;</span>, views.login),<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;^test/&#x27;</span>, views.test),<br>    url(<span class="hljs-string">r&#x27;^exit/&#x27;</span>, views.exit),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> ret:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            cookie是服务器端来设置的，要封装到响应体中：</span><br><span class="hljs-string">            return HttpResponse()</span><br><span class="hljs-string">            return render()</span><br><span class="hljs-string">            return redirect()</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br><br>            <span class="hljs-comment"># 设置cookie</span><br>            response = HttpResponse(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br><br>            response.set_cookie(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">True</span>)<br>            response.set_cookie(<span class="hljs-string">&quot;user&quot;</span>, ret.user)  <span class="hljs-comment"># 把登陆成功的用户名也添加到 cookie 中</span><br><br>            <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;index&quot;</span>, request.COOKIES)<br><br>    <span class="hljs-comment"># 从请求中获取cookie，如果获取不到就默认赋值 None</span><br>    is_login = request.COOKIES.get(<span class="hljs-string">&quot;is_login&quot;</span>, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-keyword">if</span> is_login:<br>        <span class="hljs-comment"># 取出登陆成功的用户名</span><br>        user = request.COOKIES.get(<span class="hljs-string">&quot;user&quot;</span>)<br><br>        <span class="hljs-comment"># 取出上一次的登陆时间</span><br>        last_time = request.COOKIES.get(<span class="hljs-string">&quot;last_visited_time&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>        <span class="hljs-comment"># 将本次登陆时间封装到 cookie</span><br>        date = datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>        response = render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br>        response.set_cookie(<span class="hljs-string">&quot;last_visited_time&quot;</span>, date)<br><br>        <span class="hljs-keyword">return</span> response<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test&quot;</span>, request.COOKIES)<br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;test&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 删除 cookie</span><br>    response = HttpResponse(<span class="hljs-string">&quot;账户已经注销&quot;</span>)<br>    response.delete_cookie(<span class="hljs-string">&quot;is_login&quot;</span>)<br>    response.delete_cookie(<span class="hljs-string">&quot;user&quot;</span>)<br>    response.delete_cookie(<span class="hljs-string">&quot;last_visited_time&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>欢迎登录，&#123;&#123; user &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>上次登陆时间 &#123;&#123; last_time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/exit/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;退出&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、session"><a href="#四、session" class="headerlink" title="四、session"></a>四、session</h2><p>​使用 cookie 实现的会话跟踪实际上会存在很多问题，由于 cookie 是存储在浏览器端的，所以 cookie 内容都死明文可见的，对于用户的一些私密信息来说，也很容易遭到泄露。</p><p>​Session是服务器端技术，利用这个技术，服务器在运行时可以 为每一个用户的浏览器创建一个其独享的session对象，由于 session为用户浏览器独享，所以用户在访问服务器的web资源时 ，可以把各自的数据放在各自的session中，当用户再去访问该服务器中的其它web资源时，其它web资源再从用户各自的session中 取出数据为用户服务。Session 本质上也是基于 cookie 实现的，只是和 cookie 相比，session 操作多了一些额外的操作。</p><h3 id="4-1-设置-session"><a href="#4-1-设置-session" class="headerlink" title="4.1 设置 session"></a><strong>4.1 设置 session</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接在request 中设置，添加一个登录成功后的标识</span><br>request.session[<span class="hljs-string">&quot;is_login&quot;</span>] = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在设置 session 的过程中，实际上做了三件事情：</p><ul><li>第一步，生成一个随机的字符串，例如：ltv8zy1kh5lxj1if1fcs2pqwodumr45t</li><li>第二步，在响应体中设置 cookie，添加一个键值对，键名固定为 session_id，值为随机生成的那个字符串，如：{“session_id”:”ltv8zy1kh5lxj1if1fcs2pqwodumr45t”}</li><li>第三步，在 django_session表中创建一条记录，其中 seesion_key 字段的值为生成的那个随机字符串，seesion_data 字段的值为 {“is_login”:True} 序列化后的值</li></ul><h3 id="4-2-获取-session"><a href="#4-2-获取-session" class="headerlink" title="4.2 获取 session"></a><strong>4.2 获取 session</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接从request中获取</span><br>request.session.get(<span class="hljs-string">&quot;is_login&quot;</span>)<br></code></pre></td></tr></table></figure><p>在获取session的过程中，实际上做了三件事情：</p><ul><li>第一步，从请求的 cookie 中获取 session_id，即那段随机的字符串</li><li>第二步，拿着字符串去 django_session 表中根据 seesion_key 过滤，取出对应的那条记录</li><li>第三步，从记录中取出真实的 cookie 键值对</li></ul><p>下面我们就使用一个 session 版本的判断用户是否登录的示例来演示一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^session_login/&#x27;</span>, views.session_login),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_login</span>(<span class="hljs-params">request</span>):<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> ret:<br>        <br>        <span class="hljs-comment"># 设置 session</span><br>            request.session[<span class="hljs-string">&quot;is_login&quot;</span>] = <span class="hljs-literal">True</span><br>            request.session[<span class="hljs-string">&quot;name&quot;</span>] = ret.user<br><br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;登录成功&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;是否已经登录&quot;</span>, request.session.get(<span class="hljs-string">&quot;is_login&quot;</span>))  <span class="hljs-comment"># True</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录的用户是&quot;</span>, request.session.get(<span class="hljs-string">&quot;name&quot;</span>))  <span class="hljs-comment"># cdc</span><br><br>    is_login = request.session.get(<span class="hljs-string">&quot;is_login&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> is_login:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是首页&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/session_login/&quot;</span>)<br></code></pre></td></tr></table></figure><p>启动项目，进行测试</p><ul><li>第一次访问 <a href="http://127.0.0.1:8000/session_login/">http://127.0.0.1:8000/session_login/</a> 时，浏览器发送的是 get 请求，此时观察 cookie</li></ul><img src="/img/blog/about_django/session1.png" style="zoom:50%;" /> <ul><li>输入用户名密码登陆成功后，观察cookie信息</li></ul><img src="/img/blog/about_django/session2.png" style="zoom:50%;" /> <p>此时数据库中 django_session 表中的信息</p><img src="/img/blog/about_django/session3.png" style="zoom: 67%;" /> <p>在登录成功的情况下，我们在访问一下  <a href="http://127.0.0.1:8000/session_index/%EF%BC%8C%E8%A7%82%E5%AF%9F%E5%90%8E%E5%8F%B0%E6%89%93%E5%8D%B0%E5%87%BA%E7%9A%84">http://127.0.0.1:8000/session_index/，观察后台打印出的</a> session 信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 是否已经登录 True</span><br><span class="hljs-comment"># 登录的用户是 cdc</span><br></code></pre></td></tr></table></figure><h3 id="4-3-删除-session"><a href="#4-3-删除-session" class="headerlink" title="4.3 删除 session"></a><strong>4.3 删除 session</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一：只能删除某一个键值对</span><br><span class="hljs-keyword">del</span> request.session[<span class="hljs-string">&quot;session_name&quot;</span>]<br><br><span class="hljs-comment"># 方式二：删除整个内容</span><br>flush()    删除当前的会话数据并删除会话的Cookie。这用于确保前面的会话数据不可以再次被用户的浏览器访问<br></code></pre></td></tr></table></figure><p>使用 session 的删除技术，实现一个注销用户的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br><br>    url(<span class="hljs-string">r&#x27;^session_login/&#x27;</span>, views.session_login),<br>    url(<span class="hljs-string">r&#x27;^session_index/&#x27;</span>, views.session_index),<br>    url(<span class="hljs-string">r&#x27;^logout/&#x27;</span>, views.logout),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, redirect<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> UserInfo<br><span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        ret = UserInfo.objects.<span class="hljs-built_in">filter</span>(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> ret:<br>            request.session[<span class="hljs-string">&quot;is_login&quot;</span>] = <span class="hljs-literal">True</span><br>            request.session[<span class="hljs-string">&quot;name&quot;</span>] = ret.user<br><br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;登录成功&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;是否已经登录&quot;</span>, request.session.get(<span class="hljs-string">&quot;is_login&quot;</span>))  <span class="hljs-comment"># True</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录的用户是&quot;</span>, request.session.get(<span class="hljs-string">&quot;name&quot;</span>))  <span class="hljs-comment"># cdc</span><br><br>    is_login = request.session.get(<span class="hljs-string">&quot;is_login&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> is_login:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index_session.html&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/session_login/&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># del request.session[&quot;is_login&quot;]  # 不建议使用此方式，虽然可以实现，但是其他信息还是会保留</span><br>    <br>    request.session.flush()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">相当于做了三件事：</span><br><span class="hljs-string"> 1.从cookie中获取随机字符串randon_str=request.COOKIE.get(&quot;sessionid&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    2.使用字符串去数据库表中进行匹配并删除该记录django-session.objects.filter(session-key=randon_str).delete()</span><br><span class="hljs-string"></span><br><span class="hljs-string">    3.删除对应的cookie response.delete_cookie(&quot;sessionid&quot;,randon_str)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index_session --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout/&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-4-session-其他操作"><a href="#4-4-session-其他操作" class="headerlink" title="4.4 session 其他操作"></a><strong>4.4 session 其他操作</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">get(key, default=<span class="hljs-literal">None</span>)<br>  <br>fav_color = request.session.get(<span class="hljs-string">&#x27;fav_color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)<br>  <br>pop(key)<br>  <br>fav_color = request.session.pop(<span class="hljs-string">&#x27;fav_color&#x27;</span>)<br>  <br>keys()<br>  <br>items()<br>  <br>setdefault()<br>  <br>  <br>用户session的随机字符串<br>        request.session.session_key<br>   <br>        <span class="hljs-comment"># 将所有Session失效日期小于当前日期的数据删除</span><br>        request.session.clear_expired()<br>   <br>        <span class="hljs-comment"># 检查 用户session的随机字符串 在数据库中是否</span><br>        request.session.exists(<span class="hljs-string">&quot;session_key&quot;</span>)<br>   <br>        <span class="hljs-comment"># 删除当前用户的所有Session数据</span><br>        request.session.delete(<span class="hljs-string">&quot;session_key&quot;</span>)<br>   <br>        request.session.set_expiry(value)<br>            * 如果value是个整数，session会在些秒数后失效。<br>            * 如果value是个datatime或timedelta，session就会在这个时间后失效。<br>            * 如果value是<span class="hljs-number">0</span>,用户关闭浏览器session就会失效。<br>            * 如果value是<span class="hljs-literal">None</span>,session会依赖全局session失效策略。<br></code></pre></td></tr></table></figure><h3 id="4-5-session-参数设置"><a href="#4-5-session-参数设置" class="headerlink" title="4.5 session 参数设置"></a><strong>4.5 session 参数设置</strong></h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nsis">Django默认支持Session，并且默认是将Session数据存储在数据库中，即：django_session 表中。<br>   <br>session 相关参数配置要在项目中的配置文件中 settings.py<br>   <br>    SESSION_ENGINE = <span class="hljs-string">&#x27;django.contrib.sessions.backends.db&#x27;</span>   <span class="hljs-comment"># 引擎（默认）</span><br>       <br>    SESSION_COOKIE_NAME ＝ <span class="hljs-string">&quot;sessionid&quot;</span>                       <span class="hljs-comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认），可以自定义键的名称</span><br>    SESSION_COOKIE_PATH ＝ <span class="hljs-string">&quot;/&quot;</span>                               <span class="hljs-comment"># Session的cookie保存的路径（默认）</span><br>    SESSION_COOKIE_DOMAIN = <span class="hljs-literal">None</span>                             <span class="hljs-comment"># Session的cookie保存的域名（默认）</span><br>    SESSION_COOKIE_SECURE = <span class="hljs-literal">False</span>                            <span class="hljs-comment"># 是否Https传输cookie（默认）</span><br>    SESSION_COOKIE_HTTPONLY = <span class="hljs-literal">True</span>                           <span class="hljs-comment"># 是否Session的cookie只支持http传输（默认）</span><br>    SESSION_COOKIE_AGE = <span class="hljs-number">1209600</span>                             <span class="hljs-comment"># Session的cookie失效日期（2周）（默认）</span><br>    SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="hljs-literal">False</span>                  <span class="hljs-comment"># 是否关闭浏览器使得Session过期（默认）</span><br>    SESSION_SAVE_EVERY_REQUEST = <span class="hljs-literal">False</span>                       <span class="hljs-comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之forms组件</title>
    <link href="/2020/04/18/0510-Django%E7%BB%84%E4%BB%B6%E4%B9%8Bforms/"/>
    <url>/2020/04/18/0510-Django%E7%BB%84%E4%BB%B6%E4%B9%8Bforms/</url>
    
    <content type="html"><![CDATA[<h2 id="一、forms组件简介"><a href="#一、forms组件简介" class="headerlink" title="一、forms组件简介"></a>一、forms组件简介</h2><p>​forms 组件是 django 提供的一种可以快速校验前端发送的数据的格式以及渲染相关信息和标签的机制，使用 forms 组件可以大大提高开发中的效率。</p><h2 id="二、forms组件的校验功能"><a href="#二、forms组件的校验功能" class="headerlink" title="二、forms组件的校验功能"></a>二、forms组件的校验功能</h2><p>我们模拟实现一个用户注册信息的例子，来研究一下使用forms组件如何去实现对数据的校验功能。</p><h3 id="2-1-普通版"><a href="#2-1-普通版" class="headerlink" title="2.1 普通版"></a><strong>2.1 普通版</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^reg/&#x27;</span>, views.reg),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        对接收到数据分别进行校验，比如：</span><br><span class="hljs-string">        密码长度是不是大于4</span><br><span class="hljs-string">        电话号码是否是有效的</span><br><span class="hljs-string">        邮箱格式是否正确等</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- reg.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;r_pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮  箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>电话号码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们在后台的视图中要自己编写对应的规则去匹配用户输入的数据是否合法，显然这是十分复杂和困难的，我们可以使用 django 提供的forms机制来实现对数据的校验。</p><h3 id="2-2-使用forms简单校验数据"><a href="#2-2-使用forms简单校验数据" class="headerlink" title="2.2 使用forms简单校验数据"></a><strong>2.2 使用forms简单校验数据</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 用户名长度至少是4</span><br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    email = forms.EmailField()  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        r_pwd = request.POST.get(<span class="hljs-string">&quot;r_pwd&quot;</span>)<br>        email = request.POST.get(<span class="hljs-string">&quot;email&quot;</span>)<br>        tel = request.POST.get(<span class="hljs-string">&quot;tel&quot;</span>)<br><br>        form = UserForm(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;pwd&quot;</span>: pwd, <span class="hljs-string">&quot;email&quot;</span>: email&#125;)<br>        <span class="hljs-comment"># form = UserForm(request.POST)  # 如果想直接检验从前端获取的数据，那么form表单的name属性值应该与forms组件字段名称一致</span><br><br>        <span class="hljs-comment"># 使用forms检验数据，返回值是一个布尔值，当传入的值都检验成功时值为True，其他情况均为False</span><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对</span><br>            <span class="hljs-built_in">print</span>(form.errors)  <span class="hljs-comment"># 存放校验失败的内容部分</span><br><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>​首先要自定义一个检验的类，该类必须继承 forms.Form，在类中我们可以对相关的字段做一些条件的约束。当获取到前端的数据后，可以根据自定义的校验类来对数据进行校验。使用时需要注意以下几点：</p><h4 id="2-2-1-关于自定义校验类中的字段"><a href="#2-2-1-关于自定义校验类中的字段" class="headerlink" title="2.2.1 关于自定义校验类中的字段"></a><strong>2.2.1 关于自定义校验类中的字段</strong></h4><p>在传入校验数据的时候，必须要与类中的字段都能匹配上，只能多不能少，否则校验结果为 False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在类中定义了三个字段，分别为 name,pwd,email</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 用户名长度至少是4</span><br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    email = forms.EmailField()  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br>    <br>    <br><span class="hljs-comment"># 针对以下几种情况的校验结果</span><br><span class="hljs-comment"># 1.传入数据时，字段名填写错误，校验结果为false（比如类中定义的是name，传数据时候写的是names）</span><br>form = UserForm(&#123;<span class="hljs-string">&quot;names&quot;</span>: name, <span class="hljs-string">&quot;pwd&quot;</span>: pwd, <span class="hljs-string">&quot;email&quot;</span>: email&#125;)<br>form.is_valid()  <span class="hljs-comment"># 此时校验结果为false</span><br><br><span class="hljs-comment"># 2.传入数据时，字段少于类中定义的字段，校验结果为false（比如类中定义了三个属性，传数据时候只传了两个）</span><br>form = UserForm(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;pwd&quot;</span>: pwd&#125;)<br>form.is_valid()  <span class="hljs-comment"># 此时校验结果为false</span><br><br><span class="hljs-comment"># 3.传入数据时，字段多于类中定义的字段，只要能全部匹配到类中定义的字段，多余的字段会自动忽略，校验结果有数据的正确与否决定（比如类中定义了三个属性，传数据时候传了五个）</span><br>form = UserForm(&#123;<span class="hljs-string">&quot;name&quot;</span>: name, <span class="hljs-string">&quot;pwd&quot;</span>: pwd, <span class="hljs-string">&quot;r_pwd&quot;</span>:pwd, <span class="hljs-string">&quot;tel&quot;</span>:tel, <span class="hljs-string">&quot;email&quot;</span>: email&#125;)<br>form.is_valid()  <br></code></pre></td></tr></table></figure><h4 id="2-2-2-关于数据的校验"><a href="#2-2-2-关于数据的校验" class="headerlink" title="2.2.2 关于数据的校验"></a><strong>2.2.2 关于数据的校验</strong></h4><p>is_valid() 方法就是自动校验的方法，结果是一个布尔值：</p><ul><li>结果为False：校验时字段传入有问题，或者数据不符合规则</li><li>结果为True：校验时传入的字段没问题，且数据都符合规则</li></ul><p>form.cleaned_data    存放校验通过的字段，是一个字典的数据格式，存放的值是校验通过的数据键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 比如用户名和密码是校验通过的，那么 form.cleaned_data 存放的值的格式为</span><br>&#123;<span class="hljs-string">&quot;name&quot;</span>: “cdchello, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>form.errors     存放校验失败的内容部分，是一个字典的数据格式，但是跟我们常见的字典类型不一样，字典的键是校验失败的字段，值是一个列表，存放的是错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 比如用户名长度为3，不符合类中定义的最小长度为4的规则，其余都是合法数据</span><br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对  </span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对  &#123;&#x27;pwd&#x27;: &#x27;dasdasdasdasd&#x27;, &#x27;email&#x27;: &#x27;1275500642@qq.com&#x27;&#125;</span><br>            <span class="hljs-built_in">print</span>(form.errors)  <span class="hljs-comment"># 存放校验失败的内容部分   &lt;ul class=&quot;errorlist&quot;&gt;&lt;li&gt;name&lt;ul class=&quot;errorlist&quot;&gt;&lt;li&gt;Ensure this value has at least 4 characters (it has 3).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(form.errors))  <span class="hljs-comment">#  &lt;class &#x27;django.forms.utils.ErrorDict&#x27;&gt;</span><br>            <span class="hljs-built_in">print</span>(form.errors.get(<span class="hljs-string">&quot;name&quot;</span>))  <span class="hljs-comment"># &lt;ul class=&quot;errorlist&quot;&gt;&lt;li&gt;Ensure this value has at least 4 characters (it has 3).&lt;/li&gt;&lt;/ul&gt;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(form.errors.get(<span class="hljs-string">&quot;name&quot;</span>)))  <span class="hljs-comment"># &lt;class &#x27;django.forms.utils.ErrorList&#x27;&gt;</span><br>            <span class="hljs-built_in">print</span>(form.errors.get(<span class="hljs-string">&quot;name&quot;</span>)[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 获取错误信息  Ensure this value has at least 4 characters (it has 3).</span><br></code></pre></td></tr></table></figure><p>使用 form.errors.get(“字段值”)[0] 从 form.errors 中获取错误信息。</p><h2 id="三、forms组件渲染标签的功能"><a href="#三、forms组件渲染标签的功能" class="headerlink" title="三、forms组件渲染标签的功能"></a>三、forms组件渲染标签的功能</h2><p>在上一节中我们提到，我们可以直接将request.POST中获取到的内容进行校验，但是这就要求前端的form表单的name属性值应该与forms组件字段名称一致，如果不一致校验就会失败。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 用户名长度至少是4</span><br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    email = forms.EmailField()  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST) <br>      <br>        form = UserForm(request.POST)  <span class="hljs-comment"># 如果想直接检验从前端获取的数据，那么form表单的name属性值应该与forms组件字段名称一致</span><br><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <br>            <span class="hljs-built_in">print</span>(form.errors)  <br><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>)<br></code></pre></td></tr></table></figure><p>但是每次要保证前后端的一致性是十分麻烦的，所以 forms 组件还给我们提供了简单渲染标签的功能，会自动在前端根据我们设置的字段名生成对应的input标签，主要有以下三种方式：</p><ul><li>直接使用变量替换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 用户名长度至少是4</span><br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    r_pwd = forms.CharField(min_length=<span class="hljs-number">4</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    email = forms.EmailField()  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br>    tel = forms.EmailField()  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        form = UserForm(request.POST)  <span class="hljs-comment"># 如果想直接检验从前端获取的数据，那么form表单的name属性值应该与forms组件字段名称一致</span><br><br>        <span class="hljs-comment"># 使用forms检验数据，返回值是一个布尔值，当传入的值都检验成功时值为True，其他情况均为False</span><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对  </span><br>            <span class="hljs-built_in">print</span>(form.errors)  <span class="hljs-comment"># 存放校验失败的内容部分   </span><br>           <br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    form = UserForm()  <span class="hljs-comment"># 在接收到 get 请求时，就实例化一个form对象，用于渲染标签</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- reg.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>forms渲染标签1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：&#123;&#123; form.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：&#123;&#123; form.pwd &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>确认密码：&#123;&#123; form.r_pwd &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮  箱：&#123;&#123; form.email &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>电话号码：&#123;&#123; form.tel &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用for循环</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- reg.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>forms渲染标签2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    &#123;% for field in form %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; field &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上方式有一个问题，虽然输入狂生成了，但是没有前面的填写信息的提示，forms中在设置字段规则的时候还有一个label属性，我们可以通过设置各个字段 label 的值。如果不设置，默认值为字段名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;用户名&quot;</span>)  <span class="hljs-comment"># 用户名长度至少是4</span><br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;密码&quot;</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    r_pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;确认密码&quot;</span>)  <span class="hljs-comment"># 密码的长度至少为4</span><br>    email = forms.EmailField(label=<span class="hljs-string">&quot;邮箱&quot;</span>)  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br>    tel = forms.EmailField(label=<span class="hljs-string">&quot;电话&quot;</span>)  <span class="hljs-comment"># 邮箱必须符合邮箱规则</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        form = UserForm(request.POST) <br><br>        <span class="hljs-comment"># 使用forms检验数据，返回值是一个布尔值，当传入的值都检验成功时值为True，其他情况均为False</span><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <span class="hljs-comment"># 存放校验成功的键值对 </span><br>            <span class="hljs-built_in">print</span>(form.errors)  <span class="hljs-comment"># 存放校验失败的内容部分  </span><br><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br><br>    form = UserForm()  <span class="hljs-comment"># 在接收到 get 请求时，就实例化一个form对象，用于渲染标签</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- reg.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>forms渲染标签2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    &#123;% for field in form %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            &#123;&#123; field &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过 forms.as_p 属性，不推荐使用，一旦使用这种方式，前端自动生成的标签就固定住了，灵活性差</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- reg.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>forms渲染标签3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    &#123;&#123; form.as_p &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、forms组件渲染错误信息的功能"><a href="#四、forms组件渲染错误信息的功能" class="headerlink" title="四、forms组件渲染错误信息的功能"></a>四、forms组件渲染错误信息的功能</h2><h3 id="4-1-渲染错误信息"><a href="#4-1-渲染错误信息" class="headerlink" title="4.1 渲染错误信息"></a><strong>4.1 渲染错误信息</strong></h3><p>用户填写相关信息时，如果填写错误，需要给用户提示错误的原因。要实现这个功能，我们首先要对视图函数进行修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>       <br>        form = UserForm(request.POST)  <span class="hljs-comment"># 如果想直接检验从前端获取的数据，那么form表单的name属性值应该与forms组件字段名称一致</span><br><br>        <span class="hljs-comment"># 使用forms检验数据，返回值是一个布尔值，当传入的值都检验成功时值为True，其他情况均为False</span><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)  <br>            <span class="hljs-built_in">print</span>(form.errors) <br><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br><br>    form = UserForm()  <span class="hljs-comment"># 在接收到 get 请求时，就实例化一个form对象，用于渲染标签</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><p>​上面的代码中，我们实例化出了两个 forms 对象，但是两者是完全不同的。对于 get 请求的使用的 forms 对象（未绑定数据的forms对象），它的作用主要就是用来渲染生成标签；对于 post 请求中的forms 对象，除了有渲染标签的功能，它还能绑定用户在输入框中输入的数据，确保刷新页面时，数据不丢失。</p><p>对于前端，我们只需要在标签后显示对应的错误信息即可，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>forms渲染标签1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：&#123;&#123; form.name &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.name.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密 码：&#123;&#123; form.pwd &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.pwd.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>确认密码：&#123;&#123; form.r_pwd &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.r_pwd.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>邮 箱：&#123;&#123; form.email &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.email.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>电话号码：&#123;&#123; form.tel &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.tel.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-相关参数的设置"><a href="#4-2-相关参数的设置" class="headerlink" title="4.2 相关参数的设置"></a><strong>4.2 相关参数的设置</strong></h3><p>​渲染完错误信息后，我们发现提示语都是django内置的内容，我们要如何显示我们自己定义的内容呢？并且前端使用forms组件方式来进行渲染标签，我们想要给标签添加对应的属性又要怎么操作呢？使用forms组件渲染的标签都是text类型的输入标签，怎样设置其他格式的标签呢（单选框等）？这些都可以在定义forms组件时进行设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> widgets<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    <span class="hljs-comment"># error_message 参数用于设置错误提示信息</span><br>    <span class="hljs-comment">#   固定键值 required 表示为空错误</span><br>    <span class="hljs-comment">#   固定键值 invalid 表示格式错误</span><br><br>    <span class="hljs-comment"># widget 参数用于设置标签的类型以及添加相关的属性等</span><br>    <span class="hljs-comment">#   widget = widgets.PasswordInput()  规定标签的类型</span><br>    <span class="hljs-comment">#   widget = widgets.PasswordInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;pwd&quot;&#125;)  给标签添加对应的css属性</span><br>    <br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;用户名&quot;</span>,<br>                           error_messages=&#123;<span class="hljs-string">&quot;required&quot;</span>: <span class="hljs-string">&quot;信息不能为空&quot;</span>, <span class="hljs-string">&quot;invalid&quot;</span>: <span class="hljs-string">&quot;数据格式错误&quot;</span>&#125;, widget=widgets.TextInput())<br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;密码&quot;</span>,<br>                          widget=widgets.PasswordInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;pwd&quot;</span>&#125;))  <span class="hljs-comment">#</span><br>    r_pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;确认密码&quot;</span>, widget=widgets.PasswordInput())  <span class="hljs-comment">#</span><br>    email = forms.EmailField(label=<span class="hljs-string">&quot;邮箱&quot;</span>, widget=widgets.EmailInput())<br>    tel = forms.CharField(label=<span class="hljs-string">&quot;电话&quot;</span>, widget=widgets.TextInput)<br></code></pre></td></tr></table></figure><h2 id="五、forms组件的钩子功能"><a href="#五、forms组件的钩子功能" class="headerlink" title="五、forms组件的钩子功能"></a>五、forms组件的钩子功能</h2><p>​我们在自定义forms组件的类的时候，只能简单的进行一些规则的定制，如果想要实现更加负责的操作，可以使用forms组件提供的钩子机制来完成。由于钩子机制是forms组件内部封装好的，所以在使用前，有必要对forms的源码进行简单的了解，看一下forms的检验机制究竟是怎样实现的。</p><p>我们从 forms 的校验函数  form.is_valid() 进入查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># forms.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Returns True if the form has no errors. Otherwise, False. If errors are</span><br><span class="hljs-string">    being ignored, returns False.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.is_bound <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.errors<br></code></pre></td></tr></table></figure><p>该方法最后只返回了两个值，我们需要注意的是第二个返回值，这个 errors 就是存放校验失败内容的字典，我们再查看一下 errors 是怎么实现的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># forms.py</span><br><br><span class="hljs-meta"> @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">errors</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;Returns an ErrorDict for the data provided for the form&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._errors <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-variable language_">self</span>.full_clean()<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._errors<br></code></pre></td></tr></table></figure><p>在errors内部执行了一个 full_clean() 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># forms.py</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">full_clean</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Cleans all of self.data and populates self._errors and</span><br><span class="hljs-string">        self.cleaned_data.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>._errors = ErrorDict()  <span class="hljs-comment"># 定义一个存放校验失败内容的字典</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_bound:  <span class="hljs-comment"># Stop further processing.</span><br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-variable language_">self</span>.cleaned_data = &#123;&#125;  <span class="hljs-comment"># # 定义一个存放校验成功内容的字典</span><br>        <span class="hljs-comment"># If the form is permitted to be empty, and none of the form data has</span><br>        <span class="hljs-comment"># changed from the initial data, short circuit any validation.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.empty_permitted <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.has_changed():<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-variable language_">self</span>._clean_fields()  <span class="hljs-comment"># 局部钩子</span><br>        <span class="hljs-variable language_">self</span>._clean_form()  <span class="hljs-comment"># 全局钩子</span><br>        <span class="hljs-variable language_">self</span>._post_clean()<br></code></pre></td></tr></table></figure><p>我们需要重点关注的就是 full_clean() 方法中调用的 self._clean_fields() 和 self._clean_form()，这是实现钩子的核心。我们一个一个来看</p><h3 id="5-1-局部钩子"><a href="#5-1-局部钩子" class="headerlink" title="5.1 局部钩子"></a><strong>5.1 局部钩子</strong></h3><p>局部钩子函数用于实现对某一个字段进行更加复杂的校验操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># forms.py</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_clean_fields</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.fields.items():  <span class="hljs-comment"># fileds是一个字典，存放的内容是 &#123;&quot;name&quot;:name字段的校验规则, &quot;pwd&quot;:pwd的校验规则......&#125;</span><br>            <span class="hljs-comment"># value_from_datadict() gets the data from the data dictionaries.</span><br>            <span class="hljs-comment"># Each widget type knows how to retrieve its own data, because some</span><br>            <span class="hljs-comment"># widgets split data over several HTML fields.</span><br>            <span class="hljs-keyword">if</span> field.disabled:<br>                value = <span class="hljs-variable language_">self</span>.get_initial_for_field(field, name)<br>            <span class="hljs-keyword">else</span>:<br>                value = field.widget.value_from_datadict(<span class="hljs-variable language_">self</span>.data, <span class="hljs-variable language_">self</span>.files, <span class="hljs-variable language_">self</span>.add_prefix(name))<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(field, FileField):<br>                    initial = <span class="hljs-variable language_">self</span>.get_initial_for_field(field, name)<br>                    value = field.clean(value, initial)<br>                <span class="hljs-keyword">else</span>:<br>                    value = field.clean(value)  <span class="hljs-comment"># 按定义的规则进行数据的校验</span><br>                <span class="hljs-variable language_">self</span>.cleaned_data[name] = value  <span class="hljs-comment"># 数据校验通过，就把数据放到 cleaned_data 字典中，键为字段名，值为校验通过的数据</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;clean_%s&#x27;</span> % name):<br>                    value = <span class="hljs-built_in">getattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;clean_%s&#x27;</span> % name)()<br>                    <span class="hljs-variable language_">self</span>.cleaned_data[name] = value<br>            <span class="hljs-keyword">except</span> ValidationError <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-variable language_">self</span>.add_error(name, e)  <span class="hljs-comment"># 校验失败，就把数据放到 errors 字典中，键为字段名，值为校验失败的报错信息</span><br></code></pre></td></tr></table></figure><p>​局部钩子的逻辑是这样的，先对数据按照我们在类中定义的规则进行校验，如果校验成功，会把数据存入 cleaned_data 字典中，紧接着，再通过反射去寻找有没有以 clean_ 开头的函数方法，如果有就再去执行，并把刚刚存数据的操作重新覆盖执行一遍；如果校验失败，会引发一个 ValidationError 异常，并把字段和异常存入 error 字典。</p><p>​因此，我们想要对哪个字段使用钩子函数，只需要在自定义的类中去定义再去定义一个 clean_字段名 的函数即可，把复杂的操作在函数中完成。例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> widgets<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> ValidationError<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;用户名&quot;</span>,<br>                           error_messages=&#123;<span class="hljs-string">&quot;required&quot;</span>: <span class="hljs-string">&quot;信息不能为空&quot;</span>, <span class="hljs-string">&quot;invalid&quot;</span>: <span class="hljs-string">&quot;数据格式错误&quot;</span>&#125;, widget=widgets.TextInput())<br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;密码&quot;</span>,<br>                          widget=widgets.PasswordInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;pwd&quot;</span>&#125;))  <span class="hljs-comment">#</span><br>    r_pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;确认密码&quot;</span>, widget=widgets.PasswordInput())  <span class="hljs-comment">#</span><br>    email = forms.EmailField(label=<span class="hljs-string">&quot;邮箱&quot;</span>, widget=widgets.EmailInput())<br>    tel = forms.CharField(label=<span class="hljs-string">&quot;电话&quot;</span>, widget=widgets.TextInput)<br><br>    <span class="hljs-comment"># 校验用户名是不是在数据库中已经存在了</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 会先执行自带的局部钩子，自带的钩子用于校验定义字段时的那些规则</span><br>        <span class="hljs-comment"># 如果能取到值，表示已经通过字段中的定义规则了，就会接下去执行更复杂的校验</span><br>        val = <span class="hljs-variable language_">self</span>.cleaned_data.get(<span class="hljs-string">&quot;name&quot;</span>)<br><br>        ret = User.objects.<span class="hljs-built_in">filter</span>(name=val)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>            <span class="hljs-comment"># 数据库中还没有该名字，可以注册，返回该结果</span><br>            <span class="hljs-comment"># _clean_fields 函数会通过 value = getattr(self, &#x27;clean_%s&#x27; % name)() 拿到该结果</span><br>            <span class="hljs-comment"># 接着通过 self.cleaned_data[name] = value 把该值添加到 cleaned_data中去，如果已经存在该值，会进行覆盖</span><br>            <span class="hljs-keyword">raise</span> val<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果用户名已经存在，引发一个 ValidationError 异常</span><br>            <span class="hljs-comment"># 字段名和自定义的异常信息会以键值对的形式存储到 errors 字典中去，如&#123;&quot;name&quot;:[&quot;用户名已存在&quot;]&#125;</span><br>            <span class="hljs-keyword">return</span> ValidationError(<span class="hljs-string">&quot;用户名已存在&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-2-全局钩子"><a href="#5-2-全局钩子" class="headerlink" title="5.2 全局钩子"></a><strong>5.2 全局钩子</strong></h3><p>全局钩子函数用于实现对多个字段间的复杂校验操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># forms.py</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_clean_form</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            cleaned_data = <span class="hljs-variable language_">self</span>.clean()<br>        <span class="hljs-keyword">except</span> ValidationError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-variable language_">self</span>.add_error(<span class="hljs-literal">None</span>, e)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> cleaned_data <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-variable language_">self</span>.cleaned_data = cleaned_data<br></code></pre></td></tr></table></figure><p>对于全局钩子来说，最重要的就是执行了 clean 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">clean</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">     Hook for doing any extra form-wide cleaning after Field.clean() has been</span><br><span class="hljs-string">     called on every field. Any ValidationError raised by this method will</span><br><span class="hljs-string">     not be associated with a particular field; it will have a special-case</span><br><span class="hljs-string">     association with the field named &#x27;__all__&#x27;.</span><br><span class="hljs-string">     &quot;&quot;&quot;</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cleaned_data<br></code></pre></td></tr></table></figure><p>​clean 方法中只是给了简单的描述，并没有实际的逻辑代码，这就代表着 clean 方法只是开放了一个功能，具体的实现需要我们自己来完成。但是有一点需要注意的是，由于全局操作的是多个字段之间的关系校验，因此如果校验失败，想把错误放到 errors 字典中，键应该填什么呢？clean 方法规定了，在这里键可以填 _<em>all</em>_</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> widgets<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> ValidationError<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;用户名&quot;</span>,<br>                           error_messages=&#123;<span class="hljs-string">&quot;required&quot;</span>: <span class="hljs-string">&quot;信息不能为空&quot;</span>, <span class="hljs-string">&quot;invalid&quot;</span>: <span class="hljs-string">&quot;数据格式错误&quot;</span>&#125;, widget=widgets.TextInput())<br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;密码&quot;</span>,<br>                          widget=widgets.PasswordInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;pwd&quot;</span>&#125;))  <span class="hljs-comment">#</span><br>    r_pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;确认密码&quot;</span>, widget=widgets.TextInput())  <span class="hljs-comment">#</span><br>    email = forms.EmailField(label=<span class="hljs-string">&quot;邮箱&quot;</span>, widget=widgets.EmailInput())<br>    tel = forms.CharField(label=<span class="hljs-string">&quot;电话&quot;</span>, widget=widgets.TextInput)<br><br><br>    <span class="hljs-comment"># 校验输入的密码和确认密码是否一致</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 两个只要有一个不能从cleaned_data中拿到值，那就证明对于最开始定义的字段时的校验规则都没有通过，因此也没有必要进行一致性的校验了</span><br>        <span class="hljs-comment"># 两个都能从cleaned_data中拿到值就证明都通过了最基本的规则校验，可以接着进行更复杂的校验了</span><br><br>        pwd = <span class="hljs-variable language_">self</span>.cleaned_data.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        r_pwd = <span class="hljs-variable language_">self</span>.cleaned_data.get(<span class="hljs-string">&quot;r_pwd&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> pwd <span class="hljs-keyword">and</span> r_pwd:<br>            <span class="hljs-keyword">if</span> pwd == r_pwd:<br>                <span class="hljs-comment"># 一致性校验通过，将原始数据返回</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cleaned_data<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;两次密码不一致&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 两个只要有一个不能从cleaned_data中拿到值，就没有必要进行一致性的校验了，直接返回原结果</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cleaned_data<br>        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        form = UserForm(request.POST)  <span class="hljs-comment"># 如果想直接检验从前端获取的数据，那么form表单的name属性值应该与forms组件字段名称一致</span><br><br>        <span class="hljs-comment"># 使用forms检验数据，返回值是一个布尔值，当传入的值都检验成功时值为True，其他情况均为False</span><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)<br>            <span class="hljs-built_in">print</span>(form.errors)<br><br>            <span class="hljs-comment"># 校验全局钩子函数</span><br>            <span class="hljs-built_in">print</span>(form.errors.get(<span class="hljs-string">&quot;__all__&quot;</span>)[<span class="hljs-number">0</span>])<br><br>            <span class="hljs-comment"># 用该变量去前端渲染全局钩子错误</span><br>            errors = form.errors.get(<span class="hljs-string">&quot;__all__&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br><br>    form = UserForm()  <span class="hljs-comment"># 在接收到 get 请求时，就实例化一个form对象，用于渲染标签</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><p><strong>补充：由于forms 组件的功能比较多，我们一般会把forms组件相关的内容单独放到一个py文件中，比如上述操作都属于 app01 模块的forms组件，可以在模块中新建一个 app01_forms.py 的文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app0/app01_forms.py</span><br><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> widgets<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> ValidationError<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    <span class="hljs-comment"># error_message 参数用于设置错误提示信息</span><br>    <span class="hljs-comment">#   固定键值 required 表示为空错误</span><br>    <span class="hljs-comment">#   固定键值 invalid 表示格式错误</span><br><br>    <span class="hljs-comment"># widget 参数用于设置标签的类型以及添加相关的属性等</span><br>    <span class="hljs-comment">#   widget = widgets.PasswordInput()  规定标签的类型</span><br>    <span class="hljs-comment">#   widget = widgets.PasswordInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;pwd&quot;&#125;)  给标签添加对应的css属性</span><br>    name = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;用户名&quot;</span>,<br>                           error_messages=&#123;<span class="hljs-string">&quot;required&quot;</span>: <span class="hljs-string">&quot;信息不能为空&quot;</span>, <span class="hljs-string">&quot;invalid&quot;</span>: <span class="hljs-string">&quot;数据格式错误&quot;</span>&#125;, widget=widgets.TextInput())<br>    pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;密码&quot;</span>,<br>                          widget=widgets.PasswordInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;pwd&quot;</span>&#125;))  <span class="hljs-comment">#</span><br>    r_pwd = forms.CharField(min_length=<span class="hljs-number">4</span>, label=<span class="hljs-string">&quot;确认密码&quot;</span>, widget=widgets.TextInput())  <span class="hljs-comment">#</span><br>    email = forms.EmailField(label=<span class="hljs-string">&quot;邮箱&quot;</span>, widget=widgets.EmailInput())<br>    tel = forms.CharField(label=<span class="hljs-string">&quot;电话&quot;</span>, widget=widgets.TextInput)<br><br>    <span class="hljs-comment"># 校验用户名是不是在数据库中已经存在了</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 会先执行自带的局部钩子，自带的钩子用于校验定义字段时的那些规则</span><br>        <span class="hljs-comment"># 如果能取到值，表示已经通过字段中的定义规则了，就会接下去执行更复杂的校验</span><br>        val = <span class="hljs-variable language_">self</span>.cleaned_data.get(<span class="hljs-string">&quot;name&quot;</span>)<br><br>        ret = User.objects.<span class="hljs-built_in">filter</span>(name=val)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ret:<br>            <span class="hljs-comment"># 数据库中还没有该名字，可以注册，返回该结果</span><br>            <span class="hljs-comment"># _clean_fields 函数会通过 value = getattr(self, &#x27;clean_%s&#x27; % name)() 拿到该结果</span><br>            <span class="hljs-comment"># 接着通过 self.cleaned_data[name] = value 把该值添加到 cleaned_data中去，如果已经存在该值，会进行覆盖</span><br>            <span class="hljs-keyword">return</span> val<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 如果用户名已经存在，引发一个 ValidationError 异常</span><br>            <span class="hljs-comment"># 字段名和自定义的异常信息会以键值对的形式存储到 errors 字典中去，如&#123;&quot;name&quot;:[&quot;用户名已存在&quot;]&#125;</span><br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;用户名已存在&quot;</span>)<br><br>    <span class="hljs-comment"># 校验输入的密码和确认密码是否一致</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 两个只要有一个不能从cleaned_data中拿到值，那就证明对于最开始定义的字段时的校验规则都没有通过，因此也没有必要进行一致性的校验了</span><br>        <span class="hljs-comment"># 两个都能从cleaned_data中拿到值就证明都通过了最基本的规则校验，可以接着进行更复杂的校验了</span><br><br>        pwd = <span class="hljs-variable language_">self</span>.cleaned_data.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        r_pwd = <span class="hljs-variable language_">self</span>.cleaned_data.get(<span class="hljs-string">&quot;r_pwd&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> pwd <span class="hljs-keyword">and</span> r_pwd:<br>            <span class="hljs-keyword">if</span> pwd == r_pwd:<br>                <span class="hljs-comment"># 一致性校验通过，将原始数据返回</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cleaned_data<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;两次密码不一致&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 两个只要有一个不能从cleaned_data中拿到值，就没有必要进行一致性的校验了，直接返回原结果</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.cleaned_data<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.app01_forms <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reg</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        form = UserForm(request.POST)  <span class="hljs-comment"># 如果想直接检验从前端获取的数据，那么form表单的name属性值应该与forms组件字段名称一致</span><br><br>        <span class="hljs-comment"># 使用forms检验数据，返回值是一个布尔值，当传入的值都检验成功时值为True，其他情况均为False</span><br>        <span class="hljs-built_in">print</span>(form.is_valid())<br><br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(form.cleaned_data)<br>            <span class="hljs-built_in">print</span>(form.errors)<br><br>            <span class="hljs-comment"># 校验全局钩子函数</span><br>            <span class="hljs-built_in">print</span>(form.errors.get(<span class="hljs-string">&quot;__all__&quot;</span>)[<span class="hljs-number">0</span>])<br><br>            errors = form.errors.get(<span class="hljs-string">&quot;__all__&quot;</span>)<br><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br><br>    form = UserForm()  <span class="hljs-comment"># 在接收到 get 请求时，就实例化一个form对象，用于渲染标签</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;reg.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之分页器</title>
    <link href="/2020/04/15/0509-Django%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%88%86%E9%A1%B5%E5%99%A8/"/>
    <url>/2020/04/15/0509-Django%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、分页器简介"><a href="#一、分页器简介" class="headerlink" title="一、分页器简介"></a>一、分页器简介</h2><p>​分页器主要是为了解决大规模数据展示的问题。试想一下，如果数据库中有成千上万条数据，一下子全部在页面上展示出来的话，对于用户的体验肯定是不好的。我们可以将数据分批展示，例如每一页就展示十条数据，让用户通过页码去控制。Django 中也专门提供了这种分页的机制。</p><h2 id="二、分页器的简单使用"><a href="#二、分页器的简单使用" class="headerlink" title="二、分页器的简单使用"></a>二、分页器的简单使用</h2><p>**第一步：**创建 Book 表，用于存放书籍名字和价格等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/models.py</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># Create your models here.</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(models.Model):<br>    bid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    title = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    price = models.CharField(max_length=<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p>**第二步：**随机插入多条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_data</span>():<br>    <span class="hljs-comment"># 批量导入数据</span><br>    book_list = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        book_obj = Book(title=<span class="hljs-string">f&quot;book_<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>&quot;</span>, price=<span class="hljs-built_in">str</span>((i+<span class="hljs-number">1</span>)**<span class="hljs-number">2</span>))<br>        book_list.append(book_obj)<br><br>    Book.objects.bulk_create(book_list)<br></code></pre></td></tr></table></figure><p>这里不推荐使用 for 循环的方式去插入，那样每插入一条都需要连接和断开数据库，比较消耗性能。建议先将数据全都生成好再批量的插入。</p><p>**第三步：**使用分页器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> EmptyPage, Paginator<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    book_list = Book.objects.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 将表中所有的数据获取出来</span><br><br>    paginator = Paginator(book_list, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 对所有的book数据，每10个分一页</span><br>    <span class="hljs-built_in">print</span>(paginator.count)  <span class="hljs-comment"># 数据总数</span><br>    <span class="hljs-built_in">print</span>(paginator.num_pages)  <span class="hljs-comment"># 总页数</span><br>    <span class="hljs-built_in">print</span>(paginator.page_range)  <span class="hljs-comment"># 页码列表（顾头不顾尾）</span><br><br>    page_content = paginator.page(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 第一页的全部数据</span><br><br>    <span class="hljs-comment"># 获取某一页全部数据的两种方式</span><br>    <span class="hljs-comment"># 方式一：得到一个列表，里面都是book对象</span><br>    content_list = page_content.object_list<br>    <span class="hljs-built_in">print</span>(content_list)<br>    <br>    <span class="hljs-comment"># 方式二：通过for循环去获取值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> page_content:<br>        <span class="hljs-built_in">print</span>(i)<br>    <br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="三、配合前端显示数据"><a href="#三、配合前端显示数据" class="headerlink" title="三、配合前端显示数据"></a>三、配合前端显示数据</h2><h3 id="3-1-初始版本"><a href="#3-1-初始版本" class="headerlink" title="3.1 初始版本"></a><strong>3.1 初始版本</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> EmptyPage, Paginator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>   <br>    current_page_num = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 获取url中的page的值，如果没有值默认展示第一页</span><br><br>    book_list = Book.objects.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 将表中所有的数据获取出来</span><br><br>    paginator = Paginator(book_list, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 对所有的book数据，每10个分一页</span><br>    <span class="hljs-built_in">print</span>(paginator.count)  <span class="hljs-comment"># 数据总数</span><br>    <span class="hljs-built_in">print</span>(paginator.num_pages)  <span class="hljs-comment"># 总页数</span><br>    <span class="hljs-built_in">print</span>(paginator.page_range)  <span class="hljs-comment"># 页码列表（顾头不顾尾）</span><br><br>    page_content = paginator.page(current_page_num)<br><br>    <span class="hljs-comment"># 获取某一页全部数据的两种方式</span><br>    <span class="hljs-comment"># 方式一：得到一个列表，里面都是book对象</span><br>    <span class="hljs-comment"># content_list = page_content.object_list</span><br>    <span class="hljs-comment"># 方式二：通过for循环去获取值</span><br>    <span class="hljs-comment"># for i in page_content:</span><br>    <span class="hljs-comment">#     print(i)</span><br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% for i in page_content %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; i.title &#125;&#125;：&#123;&#123; i.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 测试</span><br>浏览器访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/index/</span><br>book_1：<span class="hljs-number">1</span><br>book_2：<span class="hljs-number">4</span><br>book_3：<span class="hljs-number">9</span><br>book_4：<span class="hljs-number">16</span><br>book_5：<span class="hljs-number">25</span><br>book_6：<span class="hljs-number">36</span><br>book_7：<span class="hljs-number">49</span><br>book_8：<span class="hljs-number">64</span><br>book_9：<span class="hljs-number">81</span><br>book_10：<span class="hljs-number">100</span><br><br><br>浏览器访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/index/</span>?page=<span class="hljs-number">2</span><br>book_11：<span class="hljs-number">121</span><br>book_12：<span class="hljs-number">144</span><br>book_13：<span class="hljs-number">169</span><br>book_14：<span class="hljs-number">196</span><br>book_15：<span class="hljs-number">225</span><br>book_16：<span class="hljs-number">256</span><br>book_17：<span class="hljs-number">289</span><br>book_18：<span class="hljs-number">324</span><br>book_19：<span class="hljs-number">361</span><br>book_20：<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p>但是当访问的page的值为 -1 或者超过页码的最大值时，会出现错误，我们还需要对后台逻辑进行一个异常的处理。</p><h3 id="3-2-处理页码不在合理范围内的问题"><a href="#3-2-处理页码不在合理范围内的问题" class="headerlink" title="3.2 处理页码不在合理范围内的问题"></a><strong>3.2 处理页码不在合理范围内的问题</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> EmptyPage, Paginator<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    current_page_num = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 获取url中的page的值，如果没有值默认展示第一页</span><br><br>    book_list = Book.objects.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 将表中所有的数据获取出来</span><br><br>    paginator = Paginator(book_list, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 对所有的book数据，每10个分一页</span><br>    <span class="hljs-built_in">print</span>(paginator.count)  <span class="hljs-comment"># 数据总数</span><br>    <span class="hljs-built_in">print</span>(paginator.num_pages)  <span class="hljs-comment"># 总页数</span><br>    <span class="hljs-built_in">print</span>(paginator.page_range)  <span class="hljs-comment"># 页码列表（顾头不顾尾）</span><br><br>    <span class="hljs-comment"># 如果页码不在合理范围内，就默认显示第一页的内容</span><br>    <span class="hljs-keyword">try</span>:<br>        page_content = paginator.page(current_page_num)<br>    <span class="hljs-keyword">except</span> EmptyPage <span class="hljs-keyword">as</span> e:<br>        page_content = paginator.page(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 测试</span><br><br>浏览器访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/index/</span>?page=-<span class="hljs-number">1</span><br>book_1：<span class="hljs-number">1</span><br>book_2：<span class="hljs-number">4</span><br>book_3：<span class="hljs-number">9</span><br>book_4：<span class="hljs-number">16</span><br>book_5：<span class="hljs-number">25</span><br>book_6：<span class="hljs-number">36</span><br>book_7：<span class="hljs-number">49</span><br>book_8：<span class="hljs-number">64</span><br>book_9：<span class="hljs-number">81</span><br>book_10：<span class="hljs-number">100</span><br><br><br>浏览器访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/index/</span>?page=<span class="hljs-number">11</span><br>book_1：<span class="hljs-number">1</span><br>book_2：<span class="hljs-number">4</span><br>book_3：<span class="hljs-number">9</span><br>book_4：<span class="hljs-number">16</span><br>book_5：<span class="hljs-number">25</span><br>book_6：<span class="hljs-number">36</span><br>book_7：<span class="hljs-number">49</span><br>book_8：<span class="hljs-number">64</span><br>book_9：<span class="hljs-number">81</span><br>book_10：<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="3-3-配合bootstrap在页面展示页码"><a href="#3-3-配合bootstrap在页面展示页码" class="headerlink" title="3.3 配合bootstrap在页面展示页码"></a><strong>3.3 配合bootstrap在页面展示页码</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> EmptyPage, Paginator<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    current_page_num = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 获取url中的page的值，如果没有值默认展示第一页</span><br><br>    book_list = Book.objects.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 将表中所有的数据获取出来</span><br><br>    paginator = Paginator(book_list, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 对所有的book数据，每10个分一页</span><br>    <span class="hljs-built_in">print</span>(paginator.count)  <span class="hljs-comment"># 数据总数</span><br>    <span class="hljs-built_in">print</span>(paginator.num_pages)  <span class="hljs-comment"># 总页数</span><br>    <span class="hljs-built_in">print</span>(paginator.page_range)  <span class="hljs-comment"># 页码列表（顾头不顾尾）</span><br><br>    <span class="hljs-comment"># 如果页码不在合理范围内，就默认显示第一页的内容</span><br>    <span class="hljs-keyword">try</span>:<br>        page_content = paginator.page(current_page_num)<br>    <span class="hljs-keyword">except</span> EmptyPage <span class="hljs-keyword">as</span> e:<br>        page_content = paginator.page(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% for i in page_content %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; i.title &#125;&#125;：&#123;&#123; i.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Page navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 根据实际的总页数动态生成页码 --&gt;</span><br>        &#123;% for item in paginator.page_range %&#125;<br>        <span class="hljs-comment">&lt;!-- 如果当前点击的页码和请求的页码是同一个，就添加选中样式--&gt;</span><br>            &#123;% if current_page_num == item %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% endif %&#125;<br><br>        &#123;% endfor %&#125;<br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试结果展示</p><img src="/img/blog/about_django/分页器1.png" style="zoom:67%;" /> <p>当我们每页展示的数据比较少或者数据足够大的时候，就会导致页码变得特别的多，这样就不会特别美观，例如：</p><img src="/img/blog/about_django/分页器2.png" style="zoom:67%;" /> <p>因此针对分页的设计，我们还需要进一步处理。</p><h3 id="3-4-优化分页设计"><a href="#3-4-优化分页设计" class="headerlink" title="3.4 优化分页设计"></a><strong>3.4 优化分页设计</strong></h3><h4 id="3-4-1-实现上一页和下一页的功能"><a href="#3-4-1-实现上一页和下一页的功能" class="headerlink" title="3.4.1 实现上一页和下一页的功能"></a><strong>3.4.1 实现上一页和下一页的功能</strong></h4><p>所谓的上一页和下一页，就是在当前页码&#x3D;的基础上进行加一或者减一的操作，因此我们可以在模板中这么改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% for i in page_content %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; i.title &#125;&#125;：&#123;&#123; i.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Page navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123;current_page_num|add:-1  &#125;&#125;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% for item in paginator.page_range %&#125;<br>            &#123;% if current_page_num == item %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% endif %&#125;<br><br>        &#123;% endfor %&#125;<br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; current_page_num|add:1 &#125;&#125;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>虽然实现了我们想要的功能，但是访问第一页和最后一页时，再点击上一页或者下一页时，url中的page的值就不在合理的范围内了。分页器中还提供了我们查看当前页的上一页或者下一页的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> EmptyPage, Paginator<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index_test</span>(<span class="hljs-params">request</span>):<br>    current_page_num = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 获取url中的page的值，如果没有值默认展示第一页</span><br><br>    book_list = Book.objects.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 将表中所有的数据获取出来</span><br><br>    paginator = Paginator(book_list, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 对所有的book数据，每10个分一页</span><br><br>    test_page = paginator.page(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 假设当前页是2</span><br><br>    <span class="hljs-comment"># 查看是否有上一页和下一页。有结果为True，没有为False</span><br>    <span class="hljs-built_in">print</span>(test_page.has_next())  <span class="hljs-comment"># 是否有下一页</span><br>    <span class="hljs-built_in">print</span>(test_page.has_previous())  <span class="hljs-comment"># 是否有上一页</span><br>    <br>    <span class="hljs-comment"># 查看上一页或者下一页的页码，有结果为页码，没有就报错</span><br>    <span class="hljs-built_in">print</span>(test_page.next_page_number())  <span class="hljs-comment"># 下一页的页码</span><br>    <span class="hljs-built_in">print</span>(test_page.previous_page_number())  <span class="hljs-comment"># 上一页的页码</span><br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们可以根据这四种方法去对上一页和下一页的功能进行完善。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% for i in page_content %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; i.title &#125;&#125;：&#123;&#123; i.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Page navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--如果当前页码有上一页，正常跳转；没有的话，禁用上一页功能--&gt;</span><br>        &#123;% if page_content.has_previous %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; page_content.previous_page_number &#125;&#125;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endif %&#125;<br><br>        &#123;% for item in paginator.page_range %&#125;<br>            &#123;% if current_page_num == item %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% endif %&#125;<br><br>        &#123;% endfor %&#125;<br><br>        <span class="hljs-comment">&lt;!--如果当前页码有下一页，正常跳转；没有的话，禁用下一页功能--&gt;</span><br>        &#123;% if page_content.has_next %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; page_content.next_page_number &#125;&#125;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endif %&#125;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-2-解决页码显示过多的问题"><a href="#3-4-2-解决页码显示过多的问题" class="headerlink" title="3.4.2 解决页码显示过多的问题"></a><strong>3.4.2 解决页码显示过多的问题</strong></h4><p>我们可以规定页面上最多只能出现11个页码，被选中的页码在最中间，左右各有5个相邻的页码，对于其他页码都隐藏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br><span class="hljs-keyword">from</span> django.core.paginator <span class="hljs-keyword">import</span> EmptyPage, Paginator<br><br><br><span class="hljs-comment"># Create your views here.</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>  <br>    current_page_num = <span class="hljs-built_in">int</span>(request.GET.get(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 获取url中的page的值，如果没有值默认展示第一页</span><br>    book_list = Book.objects.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 将表中所有的数据获取出来</span><br>    paginator = Paginator(book_list, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 对所有的book数据，每10个分一页</span><br>    <br>    <span class="hljs-comment"># 我们自己定义一个页码的列表，前端显示的时候据根据这列表来动态生成页码</span><br>    <span class="hljs-comment"># 如果当前页码在最前面5个，再往前减去5会出现负值，所以这种情况要固定展示前11个</span><br>    <span class="hljs-keyword">if</span> current_page_num - <span class="hljs-number">5</span> &lt; <span class="hljs-number">1</span>:<br>        page_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">12</span>)<br>    <span class="hljs-comment"># 如果当前页码在最后面5个，再往后加上5会超出边界，所以这种情况要固定展示最后11个</span><br>    <span class="hljs-keyword">elif</span> current_page_num + <span class="hljs-number">5</span> &gt; paginator.num_pages:<br>        page_range = <span class="hljs-built_in">range</span>(paginator.num_pages - <span class="hljs-number">10</span>, paginator.num_pages + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        page_range = <span class="hljs-built_in">range</span>(current_page_num - <span class="hljs-number">5</span>, current_page_num + <span class="hljs-number">6</span>)<br><br>    <span class="hljs-comment"># 如果页码不在合理范围内，就默认显示第一页的内容</span><br>    <span class="hljs-keyword">try</span>:<br>        page_content = paginator.page(current_page_num)<br>    <span class="hljs-keyword">except</span> EmptyPage <span class="hljs-keyword">as</span> e:<br>        page_content = paginator.page(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    &#123;% for i in page_content %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; i.title &#125;&#125;：&#123;&#123; i.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Page navigation&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--如果当前页码有上一页，正常跳转；没有的话，禁用上一页功能--&gt;</span><br>        &#123;% if page_content.has_previous %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; page_content.previous_page_number &#125;&#125;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endif %&#125;<br>        <br>        <span class="hljs-comment">&lt;!--这里生成页码就根据自定义的范围生成了--&gt;</span><br>        &#123;% for item in page_range %&#125;<br>            &#123;% if current_page_num == item %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% else %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; item &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            &#123;% endif %&#125;<br><br>        &#123;% endfor %&#125;<br><br>        <span class="hljs-comment">&lt;!--如果当前页码有下一页，正常跳转；没有的话，禁用下一页功能--&gt;</span><br>        &#123;% if page_content.has_next %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; page_content.next_page_number &#125;&#125;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% else %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endif %&#125;<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django结合AJAX的使用</title>
    <link href="/2020/04/14/0508-%E4%BD%BF%E7%94%A8AJAX%E5%92%8C%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92/"/>
    <url>/2020/04/14/0508-%E4%BD%BF%E7%94%A8AJAX%E5%92%8C%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h2 id="一、AJAX简介"><a href="#一、AJAX简介" class="headerlink" title="一、AJAX简介"></a>一、AJAX简介</h2><p>我们知道，前端页面想要和后端接口进行数据交互，可以通过以下方式：</p><ul><li>将参数添加到 url 中，后端通过 get 方式从 url 中获取数据；</li><li>前端页面通过 form 表单，将数据以 get 或者 post 的方式发送给后端；</li><li>前端通过 a 标签（和使用url方式传参的方式类似）；</li></ul><p>此外，我们还可以使用 ajax 技术来实现前后端数据的交互。</p><p>​AJAX（Asynchronous Javascript And XML）翻译成中文就是“异步的Javascript和XML”。即使用Javascript语言与服务器进行异步交互，传输的数据为XML（当然，传输的数据不只是XML）。AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p><p>​AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）。AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p><ul><li>同步交互：客户端发出一个请求后，需要等待服务器响应结束后，才能发出第二个请求；</li><li>异步交互：客户端发出一个请求后，无需等待服务器响应结束，就可以发出第二个请求。</li></ul><p>AJAX用于<strong>局部刷新页面</strong>和<strong>异步请求</strong>的特点，因此和使用Form表单和后端进行数据交互的方式比较，具有以下优点：</p><ul><li>AJAX使用JavaScript技术向服务器发送异步请求；</li><li>AJAX请求无须刷新整个页面；</li><li>因为服务器响应内容不再是整个页面，而是页面中的部分内容，所以AJAX性能高；</li></ul><h2 id="二、AJAX的简单使用"><a href="#二、AJAX的简单使用" class="headerlink" title="二、AJAX的简单使用"></a>二、AJAX的简单使用</h2><h3 id="2-1-简单实现"><a href="#2-1-简单实现" class="headerlink" title="2.1 简单实现"></a><strong>2.1 简单实现</strong></h3><p>AJAX技术是基于JS的，因此使用AJAX发送的请求也属于 JS 请求，而通过 Form表单等形式来发送请求的方式属于 HTML请求。在编写AJAX请求之前，我们先来回顾一下使用 Form 表单来和后端交互</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/test_form/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们再来观察一下AJAX的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test_ajax&quot;</span>&gt;</span>ajax提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.test_ajax&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/test_ajax/&quot;</span>,  <span class="hljs-comment">// 请求的url</span></span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,  <span class="hljs-comment">// post  请求的方式</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;  <span class="hljs-comment">// 回调函数</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对比两种方式，我们可以发现有以下区别：</p><ul><li>从实现方式上来看，form表单会自动将input标签中用户输入的值组装成键值对，在点击提交后自动发送给后端，这也就是为什么input标签必须有name属性的原因了，name属性的值，即为键值对的键。而对于ajax方式来说，实际上就是给提交按钮绑定了一个点击事件，数据也需要手动传给后端，所以对于ajax而言，只要能定位到要取值的标签就可以了，取值和数据封装工作由程序员来完成。</li><li>从实现效果上来看，通过form表单发送数据，点击提交后是对整个页面的刷新，即之前在数据框中填入的数据会置空，而使用ajax方式，点击提交后只是局部刷新，并不会将整个页面重新覆盖。（点击提交后仔细观察浏览器地址栏，form会进行刷新，ajax不会）</li></ul><p>所以在实际的项目中，往往都是使用ajax来和后端进行数据交互的。</p><h3 id="2-2-参数介绍"><a href="#2-2-参数介绍" class="headerlink" title="2.2 参数介绍"></a><strong>2.2 参数介绍</strong></h3><ul><li><strong>url</strong>               请求发送的url，相当于form表单中的action</li><li><strong>type</strong>            请求的方式，相当于form表单中的method</li><li><strong>data</strong>            要发送的数据，数据类型是 object 类型（类似python中的字典类型）</li><li><strong>success</strong>       回调函数，data为后端返回的结果</li></ul><h3 id="2-3-ajax交互的流程"><a href="#2-3-ajax交互的流程" class="headerlink" title="2.3 ajax交互的流程"></a><strong>2.3 ajax交互的流程</strong></h3><img src="/img/blog/about_django/ajax交互流程.png" style="zoom: 67%;" />  <h3 id="2-4-使用JS实现AJAX"><a href="#2-4-使用JS实现AJAX" class="headerlink" title="2.4 使用JS实现AJAX"></a><strong>2.4 使用JS实现AJAX</strong></h3><p>由于使用js实现ajax的过程比较麻烦，通常我们直接使用jQuery来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> b2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;b2&quot;</span>);<br>  b2.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 原生JS</span><br>    <span class="hljs-keyword">var</span> xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    xmlHttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;/ajax_test/&quot;</span>, <span class="hljs-literal">true</span>);<br>    xmlHttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>    xmlHttp.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;username=cdc&amp;password=123456&quot;</span>);<br>    xmlHttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xmlHttp.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(xmlHttp.<span class="hljs-property">responseText</span>);<br>      &#125;<br>    &#125;;<br>  &#125;;<br></code></pre></td></tr></table></figure><h2 id="三、AJAX传递数据"><a href="#三、AJAX传递数据" class="headerlink" title="三、AJAX传递数据"></a>三、AJAX传递数据</h2><p>使用Ajax实现一个简单的计算器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^index/$&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;^count/$&#x27;</span>, views.count),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add_no1&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add_no2&quot;</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add_ret&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ajax_test&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.ajax_test&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/count/&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;add_1&quot;</span>: $(<span class="hljs-string">&quot;.add_no1&quot;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">                <span class="hljs-string">&quot;add_2&quot;</span>: $(<span class="hljs-string">&quot;.add_no2&quot;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;.add_ret&quot;</span>).<span class="hljs-title function_">val</span>(data)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># Create your views here.</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(request.POST)<br>    add_1 = <span class="hljs-built_in">int</span>(request.POST.get(<span class="hljs-string">&quot;add_1&quot;</span>))<br>    add_2 = <span class="hljs-built_in">int</span>(request.POST.get(<span class="hljs-string">&quot;add_2&quot;</span>))<br>    ret = add_1 + add_2<br><br>    <span class="hljs-keyword">return</span> HttpResponse(ret)<br></code></pre></td></tr></table></figure><h2 id="四、AJAX实现登录验证"><a href="#四、AJAX实现登录验证" class="headerlink" title="四、AJAX实现登录验证"></a>四、AJAX实现登录验证</h2><p>用户在页面输入用户名和密码，如果正确返回成功页面，错误则在登录页面提示用户名或者密码错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, views.login),<br>    url(<span class="hljs-string">r&#x27;^login/success/$&#x27;</span>, views.login_success),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- login.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user_name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    密 码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#login&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/login/&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;user_name&quot;</span>: $(<span class="hljs-string">&quot;#user_name&quot;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">                <span class="hljs-string">&quot;pwd&quot;</span>: $(<span class="hljs-string">&quot;#pwd&quot;</span>).<span class="hljs-title function_">val</span>()</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);  <span class="hljs-comment">// 得到的是 json 字符串</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data);  <span class="hljs-comment">// 反序列化，得到 object</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (res.<span class="hljs-property">user</span>) &#123;</span><br><span class="language-javascript">                    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;/login/success/&quot;</span></span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;.content&quot;</span>).<span class="hljs-title function_">html</span>(res.<span class="hljs-property">msg</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        ret = &#123;<span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>&#125;<br><br>        name = request.POST.get(<span class="hljs-string">&quot;user_name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        user = User.objects.<span class="hljs-built_in">filter</span>(user_name=name, pwd=pwd).first()<br>        <span class="hljs-keyword">if</span> user:<br>            ret[<span class="hljs-string">&quot;user&quot;</span>] = user.user_name<br>        <span class="hljs-keyword">else</span>:<br>            ret[<span class="hljs-string">&quot;msg&quot;</span>] = <span class="hljs-string">&quot;username or password error&quot;</span><br><br>        <span class="hljs-comment"># 如果想要传输除了字符串以外其他的数据类型，需要传送前先序列化</span><br>        <span class="hljs-keyword">return</span> HttpResponse(json.dumps(ret))<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_success</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;success.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(models.Model):<br>    user_name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    pwd = models.CharField(max_length=<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><h2 id="五、使用AJAX上传文件"><a href="#五、使用AJAX上传文件" class="headerlink" title="五、使用AJAX上传文件"></a>五、使用AJAX上传文件</h2><h3 id="5-1-使用form表单上传文件"><a href="#5-1-使用form表单上传文件" class="headerlink" title="5.1 使用form表单上传文件"></a><strong>5.1 使用form表单上传文件</strong></h3><p>在之前，我们简单介绍过使用 form 表单上传文件的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^upload/$&#x27;</span>, views.upload),<br>    url(<span class="hljs-string">r&#x27;^upload/file/$&#x27;</span>, views.upload_file),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- upload.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload/file/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;upload.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    接收文件逻辑</span><br><span class="hljs-string">    :param request:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><p>除了form表单发送数据的三要素外，还需要对form表的属性 enctype 进行值得设定，其实针对 enctype 属性，我们有必要要详细的引申一下。</p><h3 id="5-2-Content-Type介绍"><a href="#5-2-Content-Type介绍" class="headerlink" title="5.2 Content-Type介绍"></a><strong>5.2 Content-Type介绍</strong></h3><p>​我们知道，所有的网络请求都是要遵循 http 协议的，例如在前后端进行数据交互中，我们就要告知后端服务器，前端的数据是按照什么样的格式来封装的，那么后端就会根据该格式进行反解，这些数据的封装格式，都可以在 http 请求头中的 Content-Type 字段中看到，而form表单中的属性 enctype，就是用于固定数据传输封装的格式的。</p><ul><li>当传输非文件数据时，不用写 enctype 或者 enctype  &#x3D; “application&#x2F;x-www-form-urlencoded”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload/file/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果不规定 enctype 的值，enctype 就会使用”application&#x2F;x-www-form-urlencoded”作为默认值，此时我们从web页面查看请求头可以发现Content-Type的值为application&#x2F;x-www-form-urlencoded</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Request Headers</span><br><br><span class="hljs-attribute">POST</span> /upload/file/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">127.0.0.1:8000</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">83</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">127.0.0.1:8000</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">80</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3987</span>.<span class="hljs-number">122</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Sec</span>-Fetch-Site: same-origin<br><span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br><span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">127.0.0.1:8000</span>/upload/<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: csrftoken=<span class="hljs-number">1</span>rBhf4zliEruWHaoPmvQurF4RirU36j0D5snKSSkIdnbcZUiWEQysFvBSJJuBzGt<br><br><br><span class="hljs-comment"># Form Data</span><br><span class="hljs-attribute">name</span>=cdc&amp;pwd=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>此时，发送的数据就会按照urlencoded的格式封装在请求体中，当django服务器检测到数据传输的格式是urlencoded时，就会对请求他中的数据进一步处理，把数据处理成QueryDict的形式，并封装到request.POST中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在视图中分别查看请求体和request.POST中的内容</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    接收文件逻辑</span><br><span class="hljs-string">    :param request:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;body中的内容&quot;</span>, request.body)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;psot中的内容&quot;</span>,request.POST)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 输出结果</span><br>body中的内容 b&#x27;name=cdc&amp;pwd=<span class="hljs-number">123456</span>&#x27;<br>psot中的内容 &lt;QueryDict<span class="hljs-punctuation">:</span> &#123;&#x27;name&#x27;<span class="hljs-punctuation">:</span> [&#x27;cdc&#x27;]<span class="hljs-punctuation">,</span> &#x27;pwd&#x27;<span class="hljs-punctuation">:</span> [&#x27;<span class="hljs-number">123456</span>&#x27;]&#125;&gt;<br></code></pre></td></tr></table></figure><p>所以，当数据的传输方式为urlencoded时，发送的数据是以 b’name&#x3D;cdc&amp;pwd&#x3D;123456’ 的形式封装在请求体中的，django机制会对数据进一步处理。但是如果使用该方式传输文件时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload/file/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    接收文件逻辑</span><br><span class="hljs-string">    :param request:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;body中的内容&quot;</span>, request.body)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;psot中的内容&quot;</span>, request.POST)<br>    <span class="hljs-built_in">print</span>(request.POST.get(<span class="hljs-string">&quot;name&quot;</span>))<br>    <span class="hljs-built_in">print</span>(request.FILES.get(<span class="hljs-string">&quot;avatar&quot;</span>))<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 输出的结果</span><br>body中的内容 b<span class="hljs-string">&#x27;name=cdc&amp;avatar=my_avatar.jpg&#x27;</span><br>psot中的内容 &lt;QueryDict: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: [<span class="hljs-string">&#x27;cdc&#x27;</span>], <span class="hljs-string">&#x27;avatar&#x27;</span>: [<span class="hljs-string">&#x27;my_avatar.jpg&#x27;</span>]&#125;&gt;<br>cdc<br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>只能接收到文件名，但是无法接收文件的实际内容，因此涉及到文件传输时，该数据传输方式无法满足</p><ul><li>当传输文件时，enctype  &#x3D; “multipart&#x2F;form-data”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload/file/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    接收文件逻辑</span><br><span class="hljs-string">    :param request:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;body中的内容&quot;</span>, request.body)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;psot中的内容&quot;</span>, request.POST)<br>    <span class="hljs-built_in">print</span>(request.POST.get(<span class="hljs-string">&quot;name&quot;</span>))<br>    <span class="hljs-built_in">print</span>(request.FILES.get(<span class="hljs-string">&quot;avatar&quot;</span>))<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"># 结果<br><br>body中的内容 <span class="hljs-string">b&#x27;------WebKitFormBoundaryWvWLmKBZEWP4XMzK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Disposition: form-data; name=&quot;name&quot;<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>cdc<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>------WebKitFormBoundaryWvWLmKBZEWP4XMzK<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;<span class="hljs-char escape_">\x</span>e9<span class="hljs-char escape_">\x</span>99<span class="hljs-char escape_">\x</span>88<span class="hljs-char escape_">\x</span>e8......</span><br><span class="hljs-string"></span><br><span class="hljs-string">psot中的内容 &lt;QueryDict: &#123;&#x27;</span>name<span class="hljs-string">&#x27;: [&#x27;</span>cdc<span class="hljs-string">&#x27;]&#125;&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">cdc</span><br><span class="hljs-string"></span><br><span class="hljs-string">my_avatar.jpg</span><br></code></pre></td></tr></table></figure><p>我们再从前端观察以下请求相关的信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Request Headers</span><br><br><span class="hljs-attribute">POST</span> /upload/file/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">127.0.0.1:8000</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">108825</span><br><span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span><br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">127.0.0.1:8000</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Type: multipart/form-data; boundary=----WebKitFormBoundary7Nna5hqVK9fCxR1m<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">80</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3987</span>.<span class="hljs-number">122</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Sec</span>-Fetch-Site: same-origin<br><span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br><span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">127.0.0.1:8000</span>/upload/<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: csrftoken=<span class="hljs-number">1</span>rBhf4zliEruWHaoPmvQurF4RirU36j0D5snKSSkIdnbcZUiWEQysFvBSJJuBzGt<br></code></pre></td></tr></table></figure><p>此时 Content-Type的值也变为了 multipart&#x2F;form-data，当然Content-Type除了这两种数据传输的格式，还有其他的方式，下面我们还会学习如何使用ajax发送json格式的数据。</p><p><strong>总结：</strong></p><ol><li>不过以何种方式传输数据，只要是POST请求，数据都会以对于的方式封装在请求体中，换句话说，在后台通过request.body都是可以获取到数据的，我们可以自己取出数据并处理。</li><li>只有当contentType为urlencoded方式时，request.POST中才有数据，这是django机制帮我们做了进一步的处理。</li><li>后台接收文件对象时，必须使用 FILES.get() 方法</li></ol><h3 id="5-3-使用AJAX发送json格式的数据"><a href="#5-3-使用AJAX发送json格式的数据" class="headerlink" title="5.3 使用AJAX发送json格式的数据"></a><strong>5.3 使用AJAX发送json格式的数据</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/test/ajax/json/&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json&quot;</span>,  <span class="hljs-comment">// 和form表单发送数据一样，要规定数据的传输方式，这里规定以json格式传输</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(   <span class="hljs-comment">// 将 object 对象序列化成 json 对象</span></span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            ),</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ajax_json</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;body中的内容&quot;</span>, request.body)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;psot中的内容&quot;</span>, request.POST)<br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Ok&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 视图函数打印结果</span><br><br><span class="hljs-attribute">body</span>中的内容 b&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">2</span>&#125;&#x27;<br><span class="hljs-attribute">psot</span>中的内容 &lt;QueryDict: &#123;&#125;&gt;<br></code></pre></td></tr></table></figure><p>我们再来看一下前端的请求相关的信息</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># Request Headers</span><br><br>POST /test/ajax/json/ HTTP/1.1<br><span class="hljs-section">Host: 127.0.0.1:8000</span><br><span class="hljs-section">Connection: keep-alive</span><br><span class="hljs-section">Content-Length: 13</span><br><span class="hljs-section">Accept: */*</span><br><span class="hljs-section">Sec-Fetch-Dest: empty</span><br><span class="hljs-section">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-section">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36</span><br><span class="hljs-section">Content-Type: application/json</span><br><span class="hljs-section">Origin: http://127.0.0.1:8000</span><br><span class="hljs-section">Sec-Fetch-Site: same-origin</span><br><span class="hljs-section">Sec-Fetch-Mode: cors</span><br><span class="hljs-section">Referer: http://127.0.0.1:8000/upload/</span><br><span class="hljs-section">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-section">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-section">Cookie: csrftoken=1rBhf4zliEruWHaoPmvQurF4RirU36j0D5snKSSkIdnbcZUiWEQysFvBSJJuBzGt</span><br><br><br><br><span class="hljs-comment"># Form Data</span><br><br><span class="hljs-section">&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br></code></pre></td></tr></table></figure><p>通过测试我们可以知道，json格式的传输方式是将数据按照键值对的排列方式进行封装的，由于不是urlencoded方式，所以request.POST无法拿到数据，但是数据还是会被封装在请求体中。</p><h3 id="5-4-Ajax上传文件"><a href="#5-4-Ajax上传文件" class="headerlink" title="5.4 Ajax上传文件"></a><strong>5.4 Ajax上传文件</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^upload/$&#x27;</span>, views.upload),<br>    url(<span class="hljs-string">r&#x27;^upload/file/$&#x27;</span>, views.upload_file),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- upload.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 固定写法</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> formdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">        formdata.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;name&quot;</span>, $(<span class="hljs-string">&quot;.name&quot;</span>).<span class="hljs-title function_">val</span>());</span><br><span class="language-javascript">        formdata.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;avatar&quot;</span>, $(<span class="hljs-string">&quot;.avatar&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);  <span class="hljs-comment">// 获取文件的实际内容</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/upload/file/&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript">            <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>:formdata,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> Django_AJAX.settings <span class="hljs-keyword">import</span> BASE_DIR<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    接收文件逻辑</span><br><span class="hljs-string">    :param request:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;body中的内容&quot;</span>, request.body)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;psot中的内容&quot;</span>, request.POST)<br>    name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    file_obj = request.FILES.get(<span class="hljs-string">&quot;avatar&quot;</span>)<br><br>    file_name = os.path.join(BASE_DIR, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>_avatar.jpg&quot;</span>)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> fw:<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> file_obj.chunks():<br>            fw.write(chunk)<br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="六、AJAX设置csrf-token"><a href="#六、AJAX设置csrf-token" class="headerlink" title="六、AJAX设置csrf_token"></a>六、AJAX设置csrf_token</h2><h3 id="6-1-方式一"><a href="#6-1-方式一" class="headerlink" title="6.1 方式一"></a><strong>6.1 方式一</strong></h3><ul><li>通过获取隐藏的input标签中的csrfmiddlewaretoken值，放置在data中发送。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&#123;% csrf_token %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/test/ajax/csrf/&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;csrfmiddlewaretoken&quot;</span>: $(<span class="hljs-string">&quot;[name=&#x27;csrfmiddlewaretoken&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>()  <span class="hljs-comment">// 使用jQuery取出csrfmiddlewaretoken的值，拼接到data中</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-2-方式二"><a href="#6-2-方式二" class="headerlink" title="6.2 方式二"></a><strong>6.2 方式二</strong></h3><ul><li>通过获取返回的cookie中的字符串 放置在请求头中发送。此时需要引入一个 jquery.cookie.js 插件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/jquery.cookie.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&#123;% csrf_token %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/test/ajax/csrf/&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&quot;X-CSRFToken&quot;</span>: $.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;csrftoken&quot;</span>)&#125;,  <span class="hljs-comment">// 从Cookie取csrftoken，并设置到请求头中</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-3-方式三"><a href="#6-3-方式三" class="headerlink" title="6.3 方式三"></a><strong>6.3 方式三</strong></h3><ul><li>自己手写一个获取cookie的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">var</span> cookieValue = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">var</span> cookies = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cookies.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> cookie = jQuery.<span class="hljs-title function_">trim</span>(cookies[i]);<br>            <span class="hljs-comment">// Does this cookie string begin with the name we want?</span><br>            <span class="hljs-keyword">if</span> (cookie.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>) === (name + <span class="hljs-string">&#x27;=&#x27;</span>)) &#123;<br>                cookieValue = <span class="hljs-built_in">decodeURIComponent</span>(cookie.<span class="hljs-title function_">substring</span>(name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cookieValue;<br>&#125;<br><span class="hljs-keyword">var</span> csrftoken = <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;csrftoken&#x27;</span>);<br></code></pre></td></tr></table></figure><p>每一次都这么写太麻烦了，可以使用$.ajaxSetup()方法为ajax请求统一设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">csrfSafeMethod</span>(<span class="hljs-params">method</span>) &#123;<br>  <span class="hljs-comment">// these HTTP methods do not require CSRF protection</span><br>  <span class="hljs-keyword">return</span> (<span class="hljs-regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.<span class="hljs-title function_">test</span>(method));<br>&#125;<br><br>$.<span class="hljs-title function_">ajaxSetup</span>(&#123;<br>  <span class="hljs-attr">beforeSend</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, settings</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">csrfSafeMethod</span>(settings.<span class="hljs-property">type</span>) &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">crossDomain</span>) &#123;<br>      xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;X-CSRFToken&quot;</span>, csrftoken);<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>如果使用从cookie中取csrftoken的方式，需要确保cookie存在csrftoken值。如果你的视图渲染的HTML文件中没有包含  <code>&#123;% csrf_token %&#125;</code>，Django可能不会设置CSRFtoken的cookie。这个时候需要使用ensure_csrf_cookie()装饰器强制设置Cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> ensure_csrf_cookie<br><br><br><span class="hljs-meta">@ensure_csrf_cookie</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ajax_csrf</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;ajax_csrf.html&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之多表操作</title>
    <link href="/2020/04/11/0507-Django%E6%A8%A1%E5%9E%8B%E5%B1%82(%E4%BA%8C)/"/>
    <url>/2020/04/11/0507-Django%E6%A8%A1%E5%9E%8B%E5%B1%82(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h2 id="一、创建模型"><a href="#一、创建模型" class="headerlink" title="一、创建模型"></a>一、创建模型</h2><h3 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a><strong>1.1 需求分析</strong></h3><p>为了方便演示，我们先来构造一下需求场景。现在有这么四张表，分别是：</p><ul><li>Book表用于记录书籍的书名，价格，作者，出版社等信息</li><li>Author表    用于记录作者的简要信息以及编写的书籍的相关信息</li><li>AuthorDetail表   用于记录作者的详细信息</li><li>Publish表    用于记录出版社的信息和出版书籍的相关信息</li></ul><p>我们再为上述的四张表添加以下的对应关系：</p><ul><li>一对一    每一条作者的简要信息都会有且仅有一条详细信息对应，即 Author表和AuthorDetail表是一对一的关系</li><li>一对多    一个出版社可以出版多本书籍，但是一本书籍不能由多个出版社联合出版，即Book表和Publish表是一对多的关系</li><li>多对多    一本书可以由多个作者联合编写，一个作者也可以编写多本书，即Book表和Author表是多对多的关系</li></ul><p>在 SQL 中，对于一对一的关系，只需要通过一个关联字段即可将两张表进行关联；对于一对多的关系，我们需要通过外键来将两张表进行关联；对于多对多的关系，我们需要通过第三张表来作为中间表进行关联，而在 ORM 中，我们也可以通过上述方式来对多表做关联操作，但是 ORM 还为我们提供了更简单的方式，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-comment"># 书籍表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(models.Model):<br>    nid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    title = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    price = models.DecimalField(max_digits=<span class="hljs-number">5</span>, decimal_places=<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># Book表和Publish建立一对多关系</span><br>    publish = models.ForeignKey(to=<span class="hljs-string">&quot;Publish&quot;</span>, to_field=<span class="hljs-string">&quot;nid&quot;</span>, on_delete=models.CASCADE)<br><br>    <span class="hljs-comment"># Book表和Author建立多对多关系</span><br>    author = models.ManyToManyField(to=<span class="hljs-string">&quot;Author&quot;</span>)<br><br><br><span class="hljs-comment"># 作者表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span>(models.Model):<br>    nid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br><br>    <span class="hljs-comment"># Author表和AuthorDetail表建立一对一的表关系</span><br>    author_detail = models.OneToOneField(to=<span class="hljs-string">&quot;AuthorDetail&quot;</span>, to_field=<span class="hljs-string">&quot;nid&quot;</span>, on_delete=models.CASCADE)<br><br><br><span class="hljs-comment"># 作者详细信息表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorDetail</span>(models.Model):<br>    nid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    age = models.IntegerField()<br>    gender = models.CharField(max_length=<span class="hljs-number">10</span>)<br>    phone = models.BigIntegerField()<br><br><br><span class="hljs-comment"># 出版社表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Publish</span>(models.Model):<br>    nid = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    address = models.CharField(max_length=<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p>执行数据库迁移操作</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p>此时我们可以看到在数据库中多出来五张表，且表中对应的字段分别如下：</p><img src="/img/blog/about_django/app02_tables.png" style="zoom:80%;" /> <ul><li>book表</li></ul><img src="/img/blog/about_django/app02_book.png" style="zoom: 80%;" /> <ul><li>author_detail表</li></ul><img src="/img/blog/about_django/app02_authordetail.png" style="zoom:80%;" /> <ul><li>author表</li></ul><img src="/img/blog/about_django/app02_author.png" style="zoom:80%;" /> <ul><li>publish表</li></ul><img src="/img/blog/about_django/app02_publish.png" style="zoom:80%;" /> <ul><li>book_author表</li></ul><img src="/img/blog/about_django/app02_book_author.png" style="zoom:80%;" /> <p>​对于 publish 表和 author_detail 表没有什么特别的地方，和我们在模型中定义的字段是一样的。对于author表，我们并没有看到在 Author模型中定义的一对一的关联字段 author_detail，反而多了一个author_detail_id 的属性，这是因为对于一对一的表关系，django 的 ORM 机制会把我们定义的关联字段自动加上 “_id” 后作为一个属性，存储在表中，该属性指向的就是关联表的 nid 属性。</p><p>​同样的，对于一对多的外键关系，django 的 ORM 机制也会把我们定义的外键字段加上 “_id” 后作为一个属性，存储在表中，该属性指向的也是关联表的 nid 属性，即 book 表中的 publish_id 属性字段就是这么由来的。</p><p>​最后，对于 book 和 author 这种多对多的关系，ORM 自动生成了第三张表来对两者的关系进行管理，表名就是这两张表的名字，中间加上下划线。表中的属性字段 book_id 和 author_id 分别对应book 表和 author 表中的 nid 字段。以上表关系的具体对应关系如下：</p><img src="/img/blog/about_django/表对应关系.png" style="zoom: 67%;" /> <p>补充说明：</p><p>​对于一对一的表关系，关联字段无论写在哪个模型中都行，因为本质上一对一的表是完全可以合并成一张表的；而对于一对多的表关系，关联字段必须定义在多的那个模型中，如 Book 和 Publish 中，一个 publish 可以对应多个 book，多以外键字段写在了 Book 类中；最后对于多对多的关系而言，关联字段无论写在哪个模型中都可以。</p><h3 id="1-2-正向查询与反向查询"><a href="#1-2-正向查询与反向查询" class="headerlink" title="1.2 正向查询与反向查询"></a><strong>1.2 正向查询与反向查询</strong></h3><p>​正向查询是指，从含有关联属性的表去跨表查询对应的表的过程；反向查询是指从其他表跨表查询含有关联属性的表的查询过程。举个例子，就 book 表 和 publish 表，在 book 表中定义了外键关联字段 publish，此时从 book 表出发去 publish 表中查询对应数据的过程就是正向查询，从  publish 表出发去 book 表中查询对应的数据的过程即为反向查询。</p><p>​这里简单介绍正向查询和反向查询的概念，是因为在 ORM 中，正向跨表查询和反向跨表查询的方式是有区别的，我们会在下面介绍查询时具体研究。</p><h2 id="二、添加记录"><a href="#二、添加记录" class="headerlink" title="二、添加记录"></a>二、添加记录</h2><p>​对于一对一的表关系来说，插入数据和单表的插入方式没有任何区别，只需要注意关联字段的值必须能在关联的表中找到对应的匹配值即可。因此我们可以简单的先来为 author，author_detail 和 publish 表插入一些数据，我们重点研究的是一对多和多对多的表关系的数据插入方式。</p><ul><li>author 表</li></ul><p><img src="/img/blog/about_django/author%E8%A1%A8%E5%86%85%E5%AE%B9.png"> </p><ul><li>author_detail 表</li></ul><p><img src="/img/blog/about_django/author_detail%E8%A1%A8%E5%86%85%E5%AE%B9.png"> </p><ul><li>publish 表</li></ul><p><img src="/img/blog/about_django/publish%E8%A1%A8%E5%86%85%E5%AE%B9.png"> </p><h3 id="2-1-一对多插入"><a href="#2-1-一对多插入" class="headerlink" title="2.1 一对多插入"></a><strong>2.1 一对多插入</strong></h3><h4 id="2-1-1-通过模型对象插入"><a href="#2-1-1-通过模型对象插入" class="headerlink" title="2.1.1 通过模型对象插入"></a><strong>2.1.1 通过模型对象插入</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新增一本书籍，出版社是北京出版社</span><br>publish_obj = Publish.objects.get(name=<span class="hljs-string">&quot;北京出版社&quot;</span>)<br>Book.objects.create(title=<span class="hljs-string">&quot;跟我学Python&quot;</span>, price=<span class="hljs-number">100</span>, publish=publish_obj)<br></code></pre></td></tr></table></figure><p>​该方式是通过模型中定义的关联字段来实现数据插入的。首先查询到对应的出版社对象，再将出版社对象赋值给Book模型中定义的外键字段，此时 ORM 引擎会自动去 book 表关联的 publish 表中匹配这个publish_obj 对象，找到这条数据后将该数据对象的 nid 的值赋给 book 表中的 publish_id 属性字段。</p><h4 id="2-1-2-直接给-book-表绑定-publish-id"><a href="#2-1-2-直接给-book-表绑定-publish-id" class="headerlink" title="2.1.2 直接给 book 表绑定 publish_id"></a><strong>2.1.2 直接给 book 表绑定 publish_id</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新增一本书籍，出版社是北京出版社</span><br>Book.objects.create(title=<span class="hljs-string">&quot;跟我一起学GoLang&quot;</span>, price=<span class="hljs-number">200</span>, publish_id=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>​该方式等价于直接对 book 表进行操作，给表中对应的每个字段赋值。</p><h3 id="2-2-多对多插入"><a href="#2-2-多对多插入" class="headerlink" title="2.2 多对多插入"></a><strong>2.2 多对多插入</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 插入一本书籍，book_obj为插入的对象</span><br>book_obj = Book.objects.create(title=<span class="hljs-string">&quot;跟我一起学Linux&quot;</span>, price=<span class="hljs-number">150</span>, publish_id=<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 查询作者对象</span><br>cdc = Author.objects.get(name=<span class="hljs-string">&quot;cdc&quot;</span>)<br>trr = Author.objects.get(name=<span class="hljs-string">&quot;trr&quot;</span>)<br><br><span class="hljs-comment"># 通过关联字段为book绑定多对多的关系</span><br>book_obj.author.add(cdc, trr)<br></code></pre></td></tr></table></figure><p>也可以通过指定主键的方式进行直接绑定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">book_obj = Book.objects.get(title=<span class="hljs-string">&quot;跟我学Python&quot;</span>)<br>book_obj.author.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)   <span class="hljs-comment"># 将关联表author中nid分别为 1、2、3的数据进行关联</span><br><span class="hljs-comment"># book_obj.author.add(*[1, 2, 3])  #  和上述方式一样</span><br></code></pre></td></tr></table></figure><p>补充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">book_obj.authors.remove()      <span class="hljs-comment"># 将某个特定的对象从被关联对象集合中去除，如 book_obj.authors.remove(cdc)  或者 book_obj.authors.remove(1)</span><br>book_obj.authors.clear()       <span class="hljs-comment"># 清空被关联对象集合，等价于 book_obj.authors.remove(所有作者)</span><br>book_obj.authors.<span class="hljs-built_in">set</span>()         <span class="hljs-comment"># 先清空再设置　　</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">book_obj.authors.<span class="hljs-built_in">all</span>()  <span class="hljs-comment"># 获取与这本书关联的所有作者对象集合，是一个QuerySet类型</span><br></code></pre></td></tr></table></figure><h2 id="三、跨表查询"><a href="#三、跨表查询" class="headerlink" title="三、跨表查询"></a>三、跨表查询</h2><h3 id="3-1-基于对象的跨表查询（子查询）"><a href="#3-1-基于对象的跨表查询（子查询）" class="headerlink" title="3.1 基于对象的跨表查询（子查询）"></a><strong>3.1 基于对象的跨表查询（子查询）</strong></h3><h4 id="3-1-1-一对一查询"><a href="#3-1-1-一对一查询" class="headerlink" title="3.1.1 一对一查询"></a><strong>3.1.1 一对一查询</strong></h4><ul><li>正向查询：根据关联字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询cdc的手机号</span><br>cdc = Author.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&quot;cdc&quot;</span>).first()<br>phone = cdc.author_detail.phone  <span class="hljs-comment"># 根据关联字段查询</span><br><span class="hljs-built_in">print</span>(phone)<br></code></pre></td></tr></table></figure><ul><li>反向查询：根据表名小写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询手机号是13169857456的作者名字</span><br>per = AuthorDetail.objects.<span class="hljs-built_in">filter</span>(phone=<span class="hljs-number">13169857456</span>).first()<br><span class="hljs-built_in">print</span>(per.author.name)  <span class="hljs-comment"># 根据表名小写反向查询</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-一对多查询"><a href="#3-1-2-一对多查询" class="headerlink" title="3.1.2 一对多查询"></a><strong>3.1.2 一对多查询</strong></h4><ul><li>正向查询：根据关联字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询《跟我学Python》这本书的出版社名字</span><br>book = Book.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;跟我学Python&quot;</span>).first()<br><span class="hljs-built_in">print</span>(book.publish)  <span class="hljs-comment"># 跟这本书有关的出版社对象</span><br><span class="hljs-built_in">print</span>(book.publish.name)  <span class="hljs-comment"># 出版社的名字</span><br></code></pre></td></tr></table></figure><ul><li>反向查询：<code>表名小写_set.all()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询北京出版社出版的所有书籍</span><br>pub = Publish.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&quot;北京出版社&quot;</span>).first()<br>books = pub.book_set.<span class="hljs-built_in">all</span>()<br><br><span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> books:<br>    <span class="hljs-built_in">print</span>(book.title)<br></code></pre></td></tr></table></figure><h4 id="3-1-3-多对多查询"><a href="#3-1-3-多对多查询" class="headerlink" title="3.1.3 多对多查询"></a><strong>3.1.3 多对多查询</strong></h4><ul><li>正向查询：根据关联字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询《跟我学Python》所有作者的名字</span><br>book = Book.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;跟我学Python&quot;</span>).first()<br>author_list = book.author.<span class="hljs-built_in">all</span>()<br><span class="hljs-built_in">print</span>(author_list)<br><span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span> author_list:<br><span class="hljs-built_in">print</span>(author.name)<br></code></pre></td></tr></table></figure><ul><li>反向查询：根据<code>表名小写_set.all()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询cdc写过的所有书籍</span><br>cdc = Author.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&quot;cdc&quot;</span>).first()<br>book_list = cdc.book_set.<span class="hljs-built_in">all</span>()<br><span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> book_list:<br><span class="hljs-built_in">print</span>(book.title)<br></code></pre></td></tr></table></figure><h3 id="3-2-基于双下划线的跨表查询（join查询）"><a href="#3-2-基于双下划线的跨表查询（join查询）" class="headerlink" title="3.2 基于双下划线的跨表查询（join查询）"></a><strong>3.2 基于双下划线的跨表查询（join查询）</strong></h3><p>基于双下划线的跨表查询，其本质是连表查询。正向查询主要通过在表中定义的关联字段来通知 ORM 引擎去 join 对应的关联表，然后进行连表查询；反向查询主要通过小写的表名来告诉 ORM 引擎，让当前表去 join 对应的表，然后进行连表查询。</p><h4 id="3-2-1-一对一查询"><a href="#3-2-1-一对一查询" class="headerlink" title="3.2.1 一对一查询"></a><strong>3.2.1 一对一查询</strong></h4><ul><li>正向查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询cdc的手机号</span><br>phone = Author.objects.<span class="hljs-built_in">filter</span>(name=<span class="hljs-string">&quot;cdc&quot;</span>).values(<span class="hljs-string">&quot;author_detail__phone&quot;</span>)<br><span class="hljs-built_in">print</span>(phone)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;author_detail__phone&#x27;: 13169857456&#125;]&gt;</span><br></code></pre></td></tr></table></figure><ul><li>反向查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询cdc的手机号</span><br>phone = AuthorDetail.objects.<span class="hljs-built_in">filter</span>(author__name=<span class="hljs-string">&quot;cdc&quot;</span>).values(<span class="hljs-string">&quot;phone&quot;</span>)<br><span class="hljs-built_in">print</span>(phone)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;phone&#x27;: 13169857456&#125;]&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-2-一对多查询"><a href="#3-2-2-一对多查询" class="headerlink" title="3.2.2 一对多查询"></a><strong>3.2.2 一对多查询</strong></h4><ul><li>正常查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询跟我学Python这本书的出版社</span><br>pub_name = Book.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;跟我学Python&quot;</span>).values(<span class="hljs-string">&quot;publish__name&quot;</span>)<br><span class="hljs-built_in">print</span>(pub_name)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;publish__name&#x27;: &#x27;北京出版社&#x27;&#125;]&gt;</span><br></code></pre></td></tr></table></figure><ul><li>反向查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询跟我学Python这本书的出版社</span><br>pub_name = Publish.objects.<span class="hljs-built_in">filter</span>(book__title=<span class="hljs-string">&quot;跟我学Python&quot;</span>).values(<span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-built_in">print</span>(pub_name)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;北京出版社&#x27;&#125;]&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3-多对多查询"><a href="#3-2-3-多对多查询" class="headerlink" title="3.2.3 多对多查询"></a><strong>3.2.3 多对多查询</strong></h4><ul><li>正向查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询跟我学Python这本书的所有作者</span><br>authors = Book.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;跟我学Python&quot;</span>).values(<span class="hljs-string">&quot;author__name&quot;</span>)<br><span class="hljs-built_in">print</span>(authors)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;author__name&#x27;: &#x27;trr&#x27;&#125;, &#123;&#x27;author__name&#x27;: &#x27;cdc&#x27;&#125;, &#123;&#x27;author__name&#x27;: &#x27;ctt&#x27;&#125;]&gt;</span><br></code></pre></td></tr></table></figure><ul><li>反向查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询跟我学Python这本书的所有作者</span><br>authors = Author.objects.<span class="hljs-built_in">filter</span>(book__title=<span class="hljs-string">&quot;跟我学Python&quot;</span>).values(<span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-built_in">print</span>(authors)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;trr&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;cdc&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;ctt&#x27;&#125;]&gt;</span><br></code></pre></td></tr></table></figure><p>练习：连续跨表查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询年龄大于25岁的作者以及写过的书和书籍的出版社</span><br>res = Book.objects.<span class="hljs-built_in">filter</span>(author__author_detail__age__gt=<span class="hljs-number">25</span>).values(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;publish__name&quot;</span>, <span class="hljs-string">&quot;author__name&quot;</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;跟我学Python&#x27;, &#x27;publish__name&#x27;: &#x27;北京出版社&#x27;, &#x27;author__name&#x27;: &#x27;ctt&#x27;&#125;]&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、聚合和分组查询"><a href="#四、聚合和分组查询" class="headerlink" title="四、聚合和分组查询"></a>四、聚合和分组查询</h2><h3 id="4-1-聚合查询"><a href="#4-1-聚合查询" class="headerlink" title="4.1 聚合查询"></a><strong>4.1 聚合查询</strong></h3><p>​ORM 中的聚合查询是通过  aggregate() 方法实现的，aggregate() 是 QuerySet 的一个终止子句，意思是说，它返回一个包含一些键值对的字典，不再是queryset。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。如果你想要为聚合值指定一个名称，可以向聚合子句提供它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Avg, Max, Min, Count<br><br><span class="hljs-comment"># 查询所有书籍的平均价格</span><br>avg_price = Book.objects.<span class="hljs-built_in">all</span>().aggregate(Avg(<span class="hljs-string">&quot;price&quot;</span>))  <span class="hljs-comment"># &#123;&#x27;price__avg&#x27;: 150.0&#125; 不为值指定名称的话，默认名称是字段加双下划线加计算方法</span><br>avg_price = Book.objects.<span class="hljs-built_in">all</span>().aggregate(average_price=Avg(<span class="hljs-string">&quot;price&quot;</span>))  <span class="hljs-comment"># 指定名称 &#123;&#x27;average_price&#x27;: 150.0&#125;</span><br><br><span class="hljs-comment"># 查询最贵的书的价格</span><br>max_price = Book.objects.<span class="hljs-built_in">all</span>().aggregate(max_price=Max(<span class="hljs-string">&quot;price&quot;</span>))<br><span class="hljs-built_in">print</span>(max_price)<br><br><span class="hljs-comment"># 查询最便宜的书的价格</span><br>min_price = Book.objects.<span class="hljs-built_in">all</span>().aggregate(min_price=Min(<span class="hljs-string">&quot;price&quot;</span>))<br><span class="hljs-built_in">print</span>(min_price)<br><br><span class="hljs-comment"># 查有多少本书</span><br>book_num = Book.objects.<span class="hljs-built_in">all</span>().aggregate(book_num=Count(<span class="hljs-string">&quot;title&quot;</span>))<br><span class="hljs-built_in">print</span>(book_num)<br></code></pre></td></tr></table></figure><p>如果你希望生成不止一个聚合，你可以向<code>aggregate()</code>子句中添加另一个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">res = Book.objects.<span class="hljs-built_in">all</span>().aggregate(max_price=Max(<span class="hljs-string">&quot;price&quot;</span>), min_price=Min(<span class="hljs-string">&quot;price&quot;</span>), average_price=Avg(<span class="hljs-string">&quot;price&quot;</span>))<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># &#123;&#x27;max_price&#x27;: Decimal(&#x27;200.00&#x27;), &#x27;min_price&#x27;: Decimal(&#x27;100.00&#x27;), &#x27;average_price&#x27;: 150.0&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-分组查询"><a href="#4-2-分组查询" class="headerlink" title="4.2 分组查询"></a><strong>4.2 分组查询</strong></h3><p>ORM 中的聚合查询是通过  annotate() 方法实现的，annotate()为调用的<code>QuerySet</code>中每一个对象都生成一个独立的统计值（统计方法用聚合函数），返回值依然是一个queryset</p><h4 id="4-2-1-单表分组"><a href="#4-2-1-单表分组" class="headerlink" title="4.2.1 单表分组"></a><strong>4.2.1 单表分组</strong></h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#----------------- 员工表 --------------------</span><br><span class="hljs-attribute">id</span>  name age  salary    dep<br><span class="hljs-attribute">1</span>   cdc  <span class="hljs-number">12</span>    <span class="hljs-number">2000</span>    销售部<br><span class="hljs-attribute">2</span>   ctt  <span class="hljs-number">22</span>    <span class="hljs-number">3000</span>    人事部<br><span class="hljs-attribute">3</span>   trr   <span class="hljs-number">22</span>   <span class="hljs-number">5000</span>    人事部<br></code></pre></td></tr></table></figure><p>我们要查询每个部门有多少人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">select</span> dep,<span class="hljs-built_in">Count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dep;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ORM</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Avg, Max, Min, Count<br><br>res = Emp.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;dep&quot;</span>).annotate(Count(<span class="hljs-string">&quot;name&quot;</span>))<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;dep&#x27;: &#x27;销售部&#x27;, &#x27;name__count&#x27;: 1&#125;, &#123;&#x27;dep&#x27;: &#x27;人事部&#x27;, &#x27;name__count&#x27;: 2&#125;]&gt;</span><br></code></pre></td></tr></table></figure><p>values 中存放要分组的条件（需求中是按部门分组），annotate 中存放计算结果，结果的键名默认值为计算的字段加双下划线加计算方式，当然我们也可以指定结果名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">res = Emp.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;dep&quot;</span>).annotate(people_num=Count(<span class="hljs-string">&quot;name&quot;</span>))<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;dep&#x27;: &#x27;销售部&#x27;, &#x27;people_num&#x27;: 1&#125;, &#123;&#x27;dep&#x27;: &#x27;人事部&#x27;, &#x27;people_num&#x27;: 2&#125;]&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-多表分组"><a href="#4-2-2-多表分组" class="headerlink" title="4.2.2 多表分组"></a><strong>4.2.2 多表分组</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询每个出版社的名称以及对应的出版的书籍量<br># <span class="hljs-keyword">SQL</span> 先连表，后查询<br><span class="hljs-keyword">select</span> publish.name,<span class="hljs-built_in">Count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> book <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> publish <span class="hljs-keyword">on</span> book.nid<span class="hljs-operator">=</span>publish.id <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> publish.id<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ORM</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Avg, Max, Min, Count<br><br><span class="hljs-comment"># 查询每个出版社的名称以及对应的出版的书籍量</span><br>res = Publish.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;name&quot;</span>).annotate(book_num=Count(<span class="hljs-string">&quot;book__title&quot;</span>))<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;北京出版社&#x27;, &#x27;book_num&#x27;: 2&#125;, &#123;&#x27;name&#x27;: &#x27;南京出版社&#x27;, &#x27;book_num&#x27;: 1&#125;, &#123;&#x27;name&#x27;: &#x27;上海出版社&#x27;, &#x27;book_num&#x27;: 0&#125;]&gt;</span><br></code></pre></td></tr></table></figure><p>或者还可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询每个出版社的名称以及对应的出版的书籍量</span><br>Publish.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;nid&quot;</span>).annotate(book_num=Count(<span class="hljs-string">&quot;book__title&quot;</span>)).values(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;book_num&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询每一个书籍的名称以及对应的作者个数</span><br>Book.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;nid&quot;</span>).annotate(author_num=Count(<span class="hljs-string">&quot;author__name&quot;</span>))<br></code></pre></td></tr></table></figure><p>总结：多表分组查询模型：</p><ul><li>正向查询</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">表模型<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.all</span>()<span class="hljs-selector-class">.values</span>(<span class="hljs-string">&quot;主键&quot;</span>)<span class="hljs-selector-class">.annotate</span>(聚合函数(关联字段__统计字段))<br></code></pre></td></tr></table></figure><ul><li>反向查询</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">后表模型<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.all</span>()<span class="hljs-selector-class">.values</span>(<span class="hljs-string">&quot;主键&quot;</span>)<span class="hljs-selector-class">.annotate</span>(聚合函数(关联表名__统计字段))<br></code></pre></td></tr></table></figure><p>**补充：**当我们不指定分组的依据时，ORM 引擎默认根据主键来分组；</p><p>我们还可以查询到分组模型对象的其他字段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询每一个出版社的名称以及出版的书籍个数</span><br>ret = Publish.objects.values(<span class="hljs-string">&quot;nid&quot;</span>).annotate(c=Count(<span class="hljs-string">&quot;book__title&quot;</span>)).values(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>)  <span class="hljs-comment"># 完整版分组查询</span><br>ret = Publish.objects.<span class="hljs-built_in">all</span>().annotate(c=Count(<span class="hljs-string">&quot;book__title&quot;</span>)).values(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>)  <span class="hljs-comment"># 此时会自动按照主键分组</span><br>ret = Publish.objects.annotate(c=Count(<span class="hljs-string">&quot;book__title&quot;</span>)).values(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>)  <span class="hljs-comment"># 默认全部查询后再按主键分组</span><br></code></pre></td></tr></table></figure><h2 id="五、F查询和Q查询"><a href="#五、F查询和Q查询" class="headerlink" title="五、F查询和Q查询"></a>五、F查询和Q查询</h2><h3 id="5-1-F查询"><a href="#5-1-F查询" class="headerlink" title="5.1 F查询"></a><strong>5.1 F查询</strong></h3><p>在上面所有的例子中，我们构造的过滤器都只是将字段值与某个常量做比较。如果我们要对两个字段的值做比较，那该怎么做呢？Django 提供 F() 来做这样的比较。F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询评论数大于收藏数的书籍</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> F<br><br>Book.objects.<span class="hljs-built_in">filter</span>(commnet_no__lt=F(<span class="hljs-string">&#x27;keep_no&#x27;</span>))<br></code></pre></td></tr></table></figure><p>Django 还支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取模的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询评论数大于收藏数2倍的书籍</span><br><br>Book.objects.<span class="hljs-built_in">filter</span>(commnet_no__lt=F(<span class="hljs-string">&#x27;keep_no&#x27;</span>)*<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>修改操作也可以使用F函数，比如将每一本书的价格提高30元：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Book.objects.<span class="hljs-built_in">all</span>().update(price=F(<span class="hljs-string">&quot;price&quot;</span>)+<span class="hljs-number">30</span>)　<br></code></pre></td></tr></table></figure><h3 id="5-2-Q查询"><a href="#5-2-Q查询" class="headerlink" title="5.2 Q查询"></a><strong>5.2 Q查询</strong></h3><p>filter() 等方法中的关键字参数查询其实都是一起进行 AND 操作 的。如果你需要执行更复杂的查询（例如 OR ），你可以使用 Q 对象。Q对象可以使用&amp; 和| 操作符组合起来。当一个操作符在两个Q 对象上使用时，它产生一个新的Q 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询书名是以Py开头或者以Li开头的书籍</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Q<br><br>Book.objects.<span class="hljs-built_in">filter</span>(Q(title__startswith=<span class="hljs-string">&#x27;Py&#x27;</span>)|Q(title__startswith=<span class="hljs-string">&#x27;Li&#x27;</span>))<br></code></pre></td></tr></table></figure><p>可以组合使用 &amp; 和 | 操作符，以及使用括号进行分组来编写任意复杂的Q 对象。同时，Q 对象可以使用 ~ 操作符取反，这允许组合正常的查询和取反(NOT) 查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询作者是cdc且发行年限不是2017年的书籍的书名</span><br><br>bookList=Book.objects.<span class="hljs-built_in">filter</span>(Q(author__name=<span class="hljs-string">&quot;cdc&quot;</span>) &amp; ~Q(publish_date__year=<span class="hljs-number">2017</span>)).values_list(<span class="hljs-string">&quot;title&quot;</span>)<br></code></pre></td></tr></table></figure><p>查询函数可以混合使用Q 对象和关键字参数。所有提供给查询函数的参数（关键字参数或Q 对象）都将”AND” 在一起。但是，如果出现Q 对象，它必须位于所有关键字参数的前面。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询在2016年或者2017年出版的，且书名忽略大小写为python的书籍</span><br><br>bookList=Book.objects.<span class="hljs-built_in">filter</span>(Q(publishDate__year=<span class="hljs-number">2016</span>) | Q(publishDate__year=<span class="hljs-number">2017</span>), title__icontains=<span class="hljs-string">&quot;python&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之单表操作</title>
    <link href="/2020/04/03/0506-Django%E6%A8%A1%E5%9E%8B%E5%B1%82(%E4%B8%80)/"/>
    <url>/2020/04/03/0506-Django%E6%A8%A1%E5%9E%8B%E5%B1%82(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="一、ORM简介"><a href="#一、ORM简介" class="headerlink" title="一、ORM简介"></a>一、ORM简介</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a><strong>1.1 简介</strong></h3><p>​我们在使用 Django 框架开发web应用的过程中，不可避免地会涉及到数据的管理操作（增、删、改、查），而一旦谈到数据的管理操作，就需要用到数据库管理软件，例如 mysql、oracle 等。如果应用程序需要操作数据（比如将用户注册信息永久存放起来），那么我们需要在应用程序中编写原生 sql 语句，然后使用 pymysql 模块远程操作 mysql 数据库，但是直接编写原生 sql 语句会存在两方面的问题，严重影响开发效率：</p><ul><li>sql 语句的执行效率：应用开发程序员需要耗费一大部分精力去优化 sql 语句；</li><li>数据库迁移：针对 mysql 开发的sql语句无法直接应用到oracle数据库上，一旦需要迁移数据库，便需要考虑跨平台问题</li></ul><p>为了解决上述问题，django引入了ORM的概念，ORM全称Object Relational Mapping，即对象关系映射，是在pymysq之上又进行了一层封装，对于数据的操作，我们无需再去编写原生sql，取代代之的是基于面向对象的思想去编写类、对象、调用相应的方法等，ORM会将其转换&#x2F;映射成原生SQL然后交给pymysql执行。</p><p>原生SQL和ORM的对应关系：</p><p>​                                 <img src="/img/blog/about_django/ORM与DB的映射关系.png" style="zoom:67%;" /> </p><h3 id="1-2-ORM和SQL的比较"><a href="#1-2-ORM和SQL的比较" class="headerlink" title="1.2 ORM和SQL的比较"></a><strong>1.2 ORM和SQL的比较</strong></h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> ===================  <span class="hljs-keyword">sql</span>中的表  =========================                                                      <br><br> # 创建表:<br>     <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employee(                                     <br>                id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span> auto_increment ,                    <br>                <span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>),                                      <br>                gender <span class="hljs-type">BIT</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>,                                  <br>                birthday DATA ,                                         <br>                department <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>),                                <br>                salary <span class="hljs-type">DECIMAL</span> (<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) unsigned,                          <br>              );<br><br><br>  =================  <span class="hljs-keyword">sql</span>中的表记录  ======================                                                   <br><br>  # 添加一条表记录:                                                          <br>      <span class="hljs-keyword">INSERT</span> employee (<span class="hljs-type">name</span>,gender,birthday,salary,department)            <br>             <span class="hljs-keyword">VALUES</span>   (&quot;cdc&quot;,<span class="hljs-number">1</span>,&quot;1999-12-12&quot;,<span class="hljs-number">8000</span>,&quot;IT部&quot;);               <br><br>  # 查询一条表记录:                                                           <br>      <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employee <span class="hljs-keyword">WHERE</span> age=<span class="hljs-number">24</span>;                               <br><br>  # 更新一条表记录:                                                           <br>      <span class="hljs-keyword">UPDATE</span> employee <span class="hljs-keyword">SET</span> birthday=&quot;1989-10-24&quot; <span class="hljs-keyword">WHERE</span> id=<span class="hljs-number">1</span>;              <br><br>  # 删除一条表记录:                                                          <br>      <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> employee <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span>=&quot;alex&quot;                             <br><br><br><br><br><br>=====================  python的类  ========================<br><span class="hljs-keyword">class</span> Employee(models.Model):<br>     id=models.AutoField(primary_key=<span class="hljs-keyword">True</span>)<br>     <span class="hljs-type">name</span>=models.CharField(max_length=<span class="hljs-number">32</span>)<br>     gender=models.BooleanField()<br>     birthday=models.DateField()<br>     department=models.CharField(max_length=<span class="hljs-number">32</span>)<br>     salary=models.DecimalField(max_digits=<span class="hljs-number">8</span>,decimal_places=<span class="hljs-number">2</span>)<br><br><br> =================  python的类对象  =========================<br>      # 添加一条表记录:<br>          emp=Employee(<span class="hljs-type">name</span>=&quot;cdc&quot;,gender=<span class="hljs-keyword">True</span>,birthday=&quot;1999-12-12&quot;,epartment=&quot;IT部&quot;)<br>          emp.save()<br>      # 查询一条表记录:<br>          Employee.objects.<span class="hljs-keyword">filter</span>(age=<span class="hljs-number">24</span>)<br>      # 更新一条表记录:<br>          Employee.objects.<span class="hljs-keyword">filter</span>(id=<span class="hljs-number">1</span>).<span class="hljs-keyword">update</span>(birthday=&quot;1989-10-24&quot;)<br>      # 删除一条表记录:<br>          Employee.objects.<span class="hljs-keyword">filter</span>(<span class="hljs-type">name</span>=&quot;alex&quot;).<span class="hljs-keyword">delete</span>()<br></code></pre></td></tr></table></figure><h3 id="1-3-ORM的使用"><a href="#1-3-ORM的使用" class="headerlink" title="1.3 ORM的使用"></a><strong>1.3 ORM的使用</strong></h3><h4 id="1-3-1-数据库信息设置"><a href="#1-3-1-数据库信息设置" class="headerlink" title="1.3.1 数据库信息设置"></a><strong>1.3.1 数据库信息设置</strong></h4><p>在 Django 中默认使用的是文件类型数据库 sqlite，如果想要使用 mysql 或者其他类别的数据库，需要在 settings.py 中进行相关的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&quot;数据库名字&quot;</span>,<br>        <span class="hljs-string">&quot;USER&quot;</span>: <span class="hljs-string">&quot;登录的用户名&quot;</span>,<br>        <span class="hljs-string">&quot;PASSWORD&quot;</span>: <span class="hljs-string">&quot;密码&quot;</span>,<br>        <span class="hljs-string">&quot;HOST&quot;</span>: <span class="hljs-string">&quot;mysql数据库的连接IP&quot;</span>,<br>        <span class="hljs-string">&quot;PORT&quot;</span>: <span class="hljs-number">3306</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-更换-mysql-操作模块"><a href="#1-3-2-更换-mysql-操作模块" class="headerlink" title="1.3.2 更换 mysql 操作模块"></a><strong>1.3.2 更换 mysql 操作模块</strong></h4><p>Django中默认对mysql的操作使用的是 MySQLdb 模块，而对于 python3 而言，是使用 pymysql 模块来对数据库进行操作的，因此需要在项目名下的 __init__.py 中进行操作模块的替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ORM1/__init__.py</span><br><br><span class="hljs-keyword">import</span> pymysql<br>pymysql.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><h4 id="1-3-3-模块注册检查"><a href="#1-3-3-模块注册检查" class="headerlink" title="1.3.3 模块注册检查"></a><strong>1.3.3 模块注册检查</strong></h4><p>检查新创建的 app 是否已经注册，否则在 app 中的 ORM 操作将不会生效</p><h4 id="1-3-4-数据库迁移"><a href="#1-3-4-数据库迁移" class="headerlink" title="1.3.4 数据库迁移"></a><strong>1.3.4 数据库迁移</strong></h4><p>​需要注意的是，ORM 只能操作数据表和数据记录，对于数据库是无法操作的，因此我们需要手动建立一个数据库。此外，只要涉及到数据表的操作（新建、删除表）或者对数据表的结构进行了修改，都需要执行数据库迁移的操作，对于数据的增删改查则不需要。数据库迁移命令如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations   # 这一步是将对表的操作记录一下，执行后会在对应模块下的migrations文件夹中依次多出一条记录<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate# 这一步是执行数据表的相关操作，即把我们写的类翻译成sql语句去执行<br></code></pre></td></tr></table></figure><h4 id="1-3-5-其他操作"><a href="#1-3-5-其他操作" class="headerlink" title="1.3.5 其他操作"></a><strong>1.3.5 其他操作</strong></h4><ul><li>如果报错如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">django.core.exceptions.ImproperlyConfigured: mysqlclient <span class="hljs-number">1.3</span><span class="hljs-number">.3</span> <span class="hljs-keyword">or</span> newer <span class="hljs-keyword">is</span> required; you have <span class="hljs-number">0.7</span><span class="hljs-number">.11</span>.<span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>MySQLclient 目前只支持到 python3.4，因此如果使用的更高版本的python，需要修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过查找路径C:\Programs\Python\Python36-32\Lib\site-packages\Django-2.0-py3.6.egg\django\db\backends\mysql 这个路径里的文件，把下行注释掉 就OK了。</span><br><br><span class="hljs-keyword">if</span> version &lt; (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>):   <span class="hljs-keyword">raise</span>` `ImproperlyConfigured(<span class="hljs-string">&quot;mysqlclient 1.3.3 or newer is required; you have %s&quot;</span>` `%` `Database.__version__)<br></code></pre></td></tr></table></figure><ul><li>如果想打印 orm 转换过程中的 sql，需要在 settings.py 中进行如下配置：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">LOGGING = &#123;<br>    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;console&#x27;</span>:&#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;django.db.backends&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>],<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&#x27;level&#x27;</span>:<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>        &#125;,<br>    &#125;<br>&#125;　　<br></code></pre></td></tr></table></figure><h2 id="二、单表操作"><a href="#二、单表操作" class="headerlink" title="二、单表操作"></a>二、单表操作</h2><h3 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1 创建表"></a><strong>2.1 创建表</strong></h3><p>所有对表的创建，都要写在对应功能模块中的 models.py 中，对表中记录的增删改查可以写在对应模块的视图中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/models.py</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>(models.Model):<br>    <span class="hljs-built_in">id</span> = models.AutoField(primary_key=<span class="hljs-literal">True</span>)<br>    title = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    state = models.BooleanField()<br>    pub_date = models.DateField()<br>    price = models.DecimalField(max_digits=<span class="hljs-number">4</span>, decimal_places=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 浮点数类型（高精度）</span><br>    publish = models.CharField(max_length=<span class="hljs-number">32</span>)<br></code></pre></td></tr></table></figure><p>执行数据库迁移操作后，去数据库中查看，多了一张表 app01_book，这就是我们刚刚建立的表，django会将表名统一转换成小写后在最前面加一个模块名的前缀。</p><ul><li>更多数据类型</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs erlang">&lt;<span class="hljs-number">1</span>&gt; CharField<br>        字符串字段, 用于较短的字符串.<br>        CharField 要求必须有一个参数 maxlength, 用于从数据库层和Django校验层限制该字段所允许的最大字符数.<br> <br>&lt;<span class="hljs-number">2</span>&gt; IntegerField<br>       #用于保存一个整数.<br> <br>&lt;<span class="hljs-number">3</span>&gt; FloatField<br>        一个浮点数. 必须 提供两个参数:<br>         <br>        参数    描述<br>        max_digits    总位数(不包括小数点和符号)<br>        decimal_places    小数位数<br>                举例来说, 要保存最大值为 <span class="hljs-number">999</span> (小数点后保存<span class="hljs-number">2</span>位),你要这样定义字段:<br>                 <br>                models.FloatField(..., max_digits=<span class="hljs-number">5</span>, decimal_places=<span class="hljs-number">2</span>)<br>                要保存最大值一百万(小数点后保存<span class="hljs-number">10</span>位)的话,你要这样定义:<br>                 <br>                models.FloatField(..., max_digits=<span class="hljs-number">19</span>, decimal_places=<span class="hljs-number">10</span>)<br>                admin 用一个文本框(&lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;)表示该字段保存的数据.<br> <br>&lt;<span class="hljs-number">4</span>&gt; AutoField<br>        一个 IntegerField, 添加记录时它会自动增长. 你通常不需要直接使用这个字段;<br>        自定义一个主键：my_id=models.AutoField(primary_key=True)<br>        如果你不指定主键的话,系统会自动添加一个主键字段到你的 model.<br> <br>&lt;<span class="hljs-number">5</span>&gt; BooleanField<br>        A <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span> field. admin 用 checkbox 来表示此类字段.<br> <br>&lt;<span class="hljs-number">6</span>&gt; TextField<br>        一个容量很大的文本字段.<br>        admin 用一个 &lt;textarea&gt; (文本区域)表示该字段数据.(一个多行编辑框).<br> <br>&lt;<span class="hljs-number">7</span>&gt; EmailField<br>        一个带有检查Email合法性的 CharField,不接受 maxlength 参数.<br> <br>&lt;<span class="hljs-number">8</span>&gt; DateField<br>        一个日期字段. 共有下列额外的可选参数:<br>        Argument    描述<br>        auto_now    当对象被保存时,自动将该字段的值设置为当前时间.通常用于表示 <span class="hljs-string">&quot;last-modified&quot;</span> 时间戳.<br>        auto_now_add    当对象首次被创建时,自动将该字段的值设置为当前时间.通常用于表示对象创建时间.<br>        （仅仅在admin中有意义...)<br> <br>&lt;<span class="hljs-number">9</span>&gt; DateTimeField<br>         一个日期时间字段. 类似 DateField 支持同样的附加选项.<br> <br>&lt;<span class="hljs-number">10</span>&gt; ImageField<br>        类似 FileField, 不过要校验上传对象是否是一个合法图片.#它有两个可选参数:height_field和width_field,<br>        如果提供这两个参数,则图片将按提供的高度和宽度规格保存.    <br>&lt;<span class="hljs-number">11</span>&gt; FileField<br>     一个文件上传字段.<br>     要求一个必须有的参数: upload_to, 一个用于保存上载文件的本地文件系统路径. 这个路径必须包含 strftime #formatting,<br>     该格式将被上载文件的 date/time<br>     替换(so that uploaded files don&#x27;t fill up the given directory).<br>     admin 用一个&lt;input type=<span class="hljs-string">&quot;file&quot;</span>&gt;部件表示该字段保存的数据(一个文件上传部件) .<br> <br>     注意：在一个 model 中使用 FileField 或 ImageField 需要以下步骤:<br>            （<span class="hljs-number">1</span>）在你的 settings 文件中, 定义一个完整路径给 MEDIA_ROOT 以便让 Django在此处保存上传文件.<br>            (出于性能考虑,这些文件并不保存到数据库.) 定义MEDIA_URL 作为该目录的公共 URL. 要确保该目录对<br>             WEB服务器用户帐号是可写的.<br>            （<span class="hljs-number">2</span>） 在你的 model 中添加 FileField 或 ImageField, 并确保定义了 upload_to 选项,以告诉 Django<br>             使用 MEDIA_ROOT 的哪个子目录保存上传文件.你的数据库中要保存的只是文件的路径(相对于 MEDIA_ROOT).<br>             出于习惯你一定很想使用 Django 提供的 get_&lt;#fieldname&gt;_url 函数.举例来说,如果你的 ImageField<br>             叫作 mug_shot, 你就可以在模板中以 &#123;&#123; object.#get_mug_shot_url &#125;&#125; 这样的方式得到图像的绝对路径.<br> <br>&lt;<span class="hljs-number">12</span>&gt; URLField<br>      用于保存 URL. 若 verify_exists 参数为 True (默认), 给定的 URL 会预先检查是否存在( 即URL是否被有效装入且<br>      没有返回<span class="hljs-number">404</span>响应).<br>      admin 用一个 &lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt; 文本框表示该字段保存的数据(一个单行编辑框)<br> <br>&lt;<span class="hljs-number">13</span>&gt; NullBooleanField<br>       类似 BooleanField, 不过允许 NULL 作为其中一个选项. 推荐使用这个字段而不要用 BooleanField 加 null=True 选项<br>       admin 用一个选择框 &lt;select&gt; (三个可选择的值: <span class="hljs-string">&quot;Unknown&quot;</span>, <span class="hljs-string">&quot;Yes&quot;</span> 和 <span class="hljs-string">&quot;No&quot;</span> ) 来表示这种字段数据.<br> <br>&lt;<span class="hljs-number">14</span>&gt; SlugField<br>       <span class="hljs-string">&quot;Slug&quot;</span> 是一个报纸术语. slug 是某个东西的小小标记(短签), 只包含字母,数字,下划线和连字符.#它们通常用于URLs<br>       若你使用 Django 开发版本,你可以指定 maxlength. 若 maxlength 未指定, Django 会使用默认长度: <span class="hljs-number">50</span>.  #在<br>       以前的 Django 版本,没有任何办法改变<span class="hljs-number">50</span> 这个长度.<br>       这暗示了 db_index=True.<br>       它接受一个额外的参数: prepopulate_from, which is a list <span class="hljs-keyword">of</span> fields from which to auto-#populate<br>       the slug, via JavaScript,in the object&#x27;s admin form: models.SlugField<br>       (prepopulate_from=(<span class="hljs-string">&quot;pre_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>))prepopulate_from 不接受 DateTimeFields.<br> <br>&lt;<span class="hljs-number">13</span>&gt; XMLField<br>        一个校验值是否为合法XML的 TextField,必须提供参数: schema_path, 它是一个用来校验文本的 RelaxNG schema #的文件系统路径.<br> <br>&lt;<span class="hljs-number">14</span>&gt; FilePathField<br>        可选项目为某个特定目录下的文件名. 支持三个特殊的参数, 其中第一个是必须提供的.<br>        参数    描述<br>        path    必需参数. 一个目录的绝对文件系统路径. FilePathField 据此得到可选项目.<br>        Example: <span class="hljs-string">&quot;/home/images&quot;</span>.<br>        match    可选参数. 一个正则表达式, 作为一个字符串, FilePathField 将使用它过滤文件名. <br>        注意这个正则表达式只会应用到 base filename 而不是<br>        路径全名. Example: <span class="hljs-string">&quot;foo.*\.txt^&quot;</span>, 将匹配文件 foo23.txt 却不匹配 bar.txt 或 foo23.gif.<br>        recursive可选参数.要么 True 要么 False. 默认值是 False. 是否包括 path 下面的全部子目录.<br>        这三个参数可以同时使用.<br>        match 仅应用于 base filename, 而不是路径全名. 那么,这个例子:<br>        FilePathField(path=<span class="hljs-string">&quot;/home/images&quot;</span>, match=<span class="hljs-string">&quot;foo.*&quot;</span>, recursive=True)<br>        ...会匹配 /home/images/foo.gif 而不匹配 /home/images/foo/bar.gif<br> <br>&lt;<span class="hljs-number">15</span>&gt; IPAddressField<br>        一个字符串形式的 IP 地址, (i.e. <span class="hljs-string">&quot;24.124.1.30&quot;</span>).<br>&lt;<span class="hljs-number">16</span>&gt; CommaSeparatedIntegerField<br>        用于存放逗号分隔的整数值. 类似 CharField, 必须要有maxlength参数.<br></code></pre></td></tr></table></figure><ul><li>更多参数</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros">(1)<span class="hljs-literal">null</span><br> <br>如果为<span class="hljs-literal">True</span>，Django 将用<span class="hljs-literal">NULL</span> 来在数据库中存储空值。 默认值是 <span class="hljs-literal">False</span>.<br> <br>(1)blank<br> <br>如果为<span class="hljs-literal">True</span>，该字段允许不填。默认为<span class="hljs-literal">False</span>。<br>要注意，这与 <span class="hljs-literal">null</span> 不同。<span class="hljs-literal">null</span>纯粹是数据库范畴的，而 blank 是数据验证范畴的。<br>如果一个字段的<span class="hljs-attribute">blank</span>=<span class="hljs-literal">True</span>，表单的验证将允许该字段是空值。如果字段的blank=False，该字段就是必填的。<br> <br>(2)default<br> <br>字段的默认值。可以是一个值或者可调用对象。如果可调用 ，每有新对象被创建它都会被调用。<br> <br>(3)primary_key<br> <br>如果为<span class="hljs-literal">True</span>，那么这个字段就是模型的主键。如果你没有指定任何一个字段的<span class="hljs-attribute">primary_key</span>=<span class="hljs-literal">True</span>，<br>Django 就会自动添加一个IntegerField字段做为主键，所以除非你想覆盖默认的主键行为，<br>否则没必要设置任何一个字段的<span class="hljs-attribute">primary_key</span>=<span class="hljs-literal">True</span>。<br> <br>(4)unique<br> <br>如果该值设置为 <span class="hljs-literal">True</span>, 这个数据字段的值在整张表中必须是唯一的<br> <br>(5)choices<br>由二元组组成的一个可迭代对象（例如，列表或元组），用来给字段提供选择项。 如果设置了choices ，默认的表单将是一个选择框而不是标准的文本框，&lt;br&gt;而且这个选择框的选项就是choices 中的选项。<br></code></pre></td></tr></table></figure><h3 id="2-2-插入记录"><a href="#2-2-插入记录" class="headerlink" title="2.2 插入记录"></a><strong>2.2 插入记录</strong></h3><ul><li>方式一：save 方式，此时book_object是Book的一个实例化对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">book_object = Book(title=<span class="hljs-string">&quot;Python&quot;</span>, price=<span class="hljs-number">75</span>, state=<span class="hljs-literal">True</span>, pub_date=<span class="hljs-string">&quot;2012-12-12&quot;</span>, publish=<span class="hljs-string">&quot;人民出版社&quot;</span>)<br><span class="hljs-built_in">print</span>(book_object)<br>book_object.save()<br></code></pre></td></tr></table></figure><ul><li>方式二：create 方式，此时book_object就是要插入的模型对象，我们可以获取该对象的相关属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">book_object = Book.objects.create(title=<span class="hljs-string">&quot;Java&quot;</span>, price=<span class="hljs-number">75</span>, state=<span class="hljs-literal">True</span>, pub_date=<span class="hljs-string">&quot;2012-12-12&quot;</span>, publish=<span class="hljs-string">&quot;人民出版社&quot;</span>)<br><span class="hljs-built_in">print</span>(book_object)<br><span class="hljs-built_in">print</span>(book_object.title)<br><span class="hljs-built_in">print</span>(book_object.price)<br><span class="hljs-built_in">print</span>(book_object.pub_date)<br><span class="hljs-built_in">print</span>(book_object.publish)<br></code></pre></td></tr></table></figure><h3 id="2-3-查询记录"><a href="#2-3-查询记录" class="headerlink" title="2.3 查询记录"></a><strong>2.3 查询记录</strong></h3><h4 id="2-3-1-常用查询-API"><a href="#2-3-1-常用查询-API" class="headerlink" title="2.3.1 常用查询 API"></a><strong>2.3.1 常用查询 API</strong></h4><ul><li>all查询所有结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：管理器，即示例中的Book类</span><br><span class="hljs-string">返回值：QuerySet类型数据，类似一个列表，元素为一个个模型对象，可以进行类似列表的操作（遍历、索引取值等）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book_list = Book.objects.<span class="hljs-built_in">all</span>()<br><span class="hljs-built_in">print</span>(book_list)  <span class="hljs-comment"># &lt;QuerySet [&lt;Book: Book object&gt;, &lt;Book: Book object&gt;]&gt;</span><br><br><span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> book_list:<br>    <span class="hljs-built_in">print</span>(book)  <span class="hljs-comment"># Book object</span><br>    <span class="hljs-built_in">print</span>(book.title)<br></code></pre></td></tr></table></figure><ul><li>filter包含了与所给筛选条件相匹配的对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：管理器，即示例中的Book类</span><br><span class="hljs-string">返回值：QuerySet类型数据</span><br><span class="hljs-string">可以根据多个条件过滤，条件之间用逗号隔开</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book_list = Book.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;Python&quot;</span>)<br>book_list = Book.objects.<span class="hljs-built_in">filter</span>(title=<span class="hljs-string">&quot;Python&quot;</span>, price=<span class="hljs-number">85.00</span>)<br></code></pre></td></tr></table></figure><ul><li>get返回与所给筛选条件相匹配的对象，返回结果有且只有一个；如果符合筛选条件的对象超过一个或者没有都会抛出错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：管理器，即示例中的Book类</span><br><span class="hljs-string">返回值：模型对象</span><br><span class="hljs-string">可以根据多个条件过滤，条件之间用逗号隔开</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book = Book.objects.get(title=<span class="hljs-string">&quot;Python&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>exclude包含了与所给筛选条件不匹配的对象，即找到的是不符合删选条件的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：管理器，即示例中的Book类</span><br><span class="hljs-string">返回值：QuerySet类型数据</span><br><span class="hljs-string">可以根据多个条件过滤，条件之间用逗号隔开</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book = Book.objects.exclude(title=<span class="hljs-string">&quot;Python&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>order_by对查询结果排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值：QuerySet</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book_list = Book.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;pirce&quot;</span>)  <span class="hljs-comment"># 根据查询结果的price字段排序，默认是从小到大排序</span><br>book_list = Book.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;-pirce&quot;</span>)  <span class="hljs-comment"># 根据查询结果的price字段排序，从大到小排序</span><br>book_list = Book.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&quot;pirce&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)  <span class="hljs-comment"># 先根据价格排序，如果价格相同再根据id排序</span><br></code></pre></td></tr></table></figure><ul><li>reverse对查询结果进行反向排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值：QuerySet</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book_list = Book.objects.<span class="hljs-built_in">all</span>().reverse()<br></code></pre></td></tr></table></figure><ul><li>count返回数据库中匹配查询QuerySet的对象数量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值：数字</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>book_num = Book.objects.<span class="hljs-built_in">all</span>().count()<br></code></pre></td></tr></table></figure><ul><li>first返回第一条记录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值：模型对象</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>book = Book.objects.<span class="hljs-built_in">all</span>().first()<br></code></pre></td></tr></table></figure><ul><li>last返回最后一条记录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值：模型对象</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>book = Book.objects.<span class="hljs-built_in">all</span>().last()<br></code></pre></td></tr></table></figure><ul><li>values查询某个字段的所有的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值: 特殊的QuerySet，是一个可迭代的字典序列</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>books = Book.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;title&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>values_list</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值: 特殊的QuerySet，回的是一个元组序列</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>books = Book.objects.<span class="hljs-built_in">all</span>().values_list(<span class="hljs-string">&quot;title&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>distinct去重</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值: QuerySet</span><br><span class="hljs-string">需要注意的是，对于包含主键的记录进行去重是没有意义的，因为主键永远不可能一样；所以distinct往往和values联合使用</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>res = Book.objects.<span class="hljs-built_in">filter</span>(author=<span class="hljs-string">&quot;cdc&quot;</span>).values(<span class="hljs-string">&quot;price&quot;</span>).distinct()<br></code></pre></td></tr></table></figure><h4 id="2-3-2-基于双下划线的模糊查询"><a href="#2-3-2-基于双下划线的模糊查询" class="headerlink" title="2.3.2 基于双下划线的模糊查询"></a><strong>2.3.2 基于双下划线的模糊查询</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 价格在 100，200，300三者之一的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(price__in=[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>])<br><br><span class="hljs-comment"># 价格大于100的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(price__gt=<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># 价格小于100的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(price__lt=<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># 价格在100到200之间的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(price__range=[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>])<br><br><span class="hljs-comment"># 书名字包含 python 的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(title__contains=<span class="hljs-string">&quot;python&quot;</span>)<br><br><span class="hljs-comment"># 书名忽略大小写后包含 python 的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(title__icontains=<span class="hljs-string">&quot;python&quot;</span>)<br><br><span class="hljs-comment"># 书名是以py开头的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(title__startswith=<span class="hljs-string">&quot;py&quot;</span>)<br><br><span class="hljs-comment"># 发布时间是2012年的书籍（注意此方法只对DateField类型字段有作用）</span><br>Book.objects.<span class="hljs-built_in">filter</span>(pub_date__year=<span class="hljs-number">2012</span>)<br></code></pre></td></tr></table></figure><h3 id="2-4-删除记录"><a href="#2-4-删除记录" class="headerlink" title="2.4 删除记录"></a><strong>2.4 删除记录</strong></h3><p>删除方法就是 delete()。它运行时立即删除对象而不返回任何值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet或者model对象</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>Book.objects.<span class="hljs-built_in">filter</span>(author=<span class="hljs-string">&quot;cdc&quot;</span>).delete()  <span class="hljs-comment"># 删除作者是cdc的书籍</span><br>Book.objects.<span class="hljs-built_in">filter</span>(author=<span class="hljs-string">&quot;cdc&quot;</span>).first().delete()  <span class="hljs-comment"># 删除作者是cdc的第一本书籍</span><br></code></pre></td></tr></table></figure><p>要注意的是： delete() 方法是 QuerySet 上的方法，但并不适用于 Manager 本身。这是一种保护机制，是为了避免意外地调用 Book.objects.delete() 方法导致 所有的 记录被误删除。如果你确认要删除所有的对象，那么你必须显式地调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Book.objects.<span class="hljs-built_in">all</span>().delete()  <span class="hljs-comment"># 删除所有书籍</span><br></code></pre></td></tr></table></figure><p>在 Django 删除对象时，会模仿 SQL 约束 ON DELETE CASCADE 的行为，换句话说，删除一个对象时也会删除与它相关联的外键对象。如果不想级联删除，可以设置为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pub = models.ForeignKey(to=<span class="hljs-string">&#x27;Publisher&#x27;</span>, on_delete=models.SET_NULL, blank=<span class="hljs-literal">True</span>, null=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="2-5-修改记录"><a href="#2-5-修改记录" class="headerlink" title="2.5 修改记录"></a><strong>2.5 修改记录</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">调用者：QuerySet</span><br><span class="hljs-string">返回值：一个整型的数值，表示受影响的行数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>Book.objects.<span class="hljs-built_in">filter</span>(title__startswith=<span class="hljs-string">&quot;py&quot;</span>).update(price=<span class="hljs-number">120</span>)  <span class="hljs-comment"># 将所有书名是以py开头的书籍的价格修改成120</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之模板层</title>
    <link href="/2020/03/31/0505-Django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/"/>
    <url>/2020/03/31/0505-Django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="一、模板简介"><a href="#一、模板简介" class="headerlink" title="一、模板简介"></a>一、模板简介</h2><p>​对于一个web请求的全过程，浏览器发出的请求会转到视图函数进行相关的处理，再将处理完的结果返回给浏览器进行渲染。如果我们想给浏览器返回一个我们自己设计好的页面，可以在视图函数中这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;&lt;h1&gt;欢迎%s&lt;/h1&gt;&quot;</span> % name)<br></code></pre></td></tr></table></figure><p>但是这种将前端代码和后端代码耦合到一起的开发方式会存在以下的问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>、程序的可维护性与可扩展性问题<br>前端界面一旦需要重新设计、修改，则必须对后端的Python代码进行相应的修改。 然而前端界面的修改往往比后端 Python 代码的修改要频繁得多，因此如果可以在不进行 Python 代码修改的情况下变更前端界面的设计，那将会方便得多。<br><br><span class="hljs-number">2</span>、开发效率问题<br>Python 代码编写和 <span class="hljs-selector-tag">HTML</span> 设计是两项不同的工作，大多数专业的网站开发环境都将它们分配给不同的人员（甚至不同部门）来完成。 专门的程序员去编写 Python代码、专门的设计人员去制作模板，这两项工作同时进行，效率才是最高的。<br></code></pre></td></tr></table></figure><p>​为此，Django专门提供了模板系统（模板层）来实现这种将HTML页面和python代码分离开发的模式。存放在templates目录下的html文件称之为模板文件，如果我们想返回的html页面中的数据是动态的，那么必须在html页面中进行相关的操作，django提供了一套专门的模板语法。</p><h2 id="二、模板语法之变量"><a href="#二、模板语法之变量" class="headerlink" title="二、模板语法之变量"></a>二、模板语法之变量</h2><h3 id="2-1、变量"><a href="#2-1、变量" class="headerlink" title="2.1、变量"></a><strong>2.1、变量</strong></h3><p>​在 html 页面中需要动态生成的数据，我们可以使用一个嵌入的变量进行占位，最后使用视图函数渲染模板的时候再将对应的变量只以字典键值对的形式传给模板。对于 html 模板而言，当模版引擎遇到一个变量，它将解析这个变量，然后用结果替换掉它本身。例如，我们要实现根据不同的登录用户，在首页显示欢迎该用户的信息。</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, &#123;<span class="hljs-string">&quot;user&quot;</span>: user&#125;)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django_templates <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^login&quot;</span>, views.login)<br><br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>欢迎光临，&#123;&#123; user &#125;&#125; !<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- templates/login.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传给模板的值可以是任意的python数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 传给模板的变量值可以是任意python类型，如下</span><br>    msg=<span class="hljs-string">&#x27;hello world&#x27;</span><br>    dic=&#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-number">2</span>&#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>            <span class="hljs-variable language_">self</span>.name=name<br>            <span class="hljs-variable language_">self</span>.age=age<br><br>    obj=Person(<span class="hljs-string">&#x27;egon&#x27;</span>,<span class="hljs-number">18</span>)<br>    li = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>,obj]<br><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;test.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;msg&#x27;</span>:msg,<span class="hljs-string">&#x27;dic&#x27;</span>:dic,<span class="hljs-string">&#x27;obj&#x27;</span>:obj,<span class="hljs-string">&#x27;li&#x27;</span>:li&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- test.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; dic &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; obj &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; li &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><p>​render函数的第三个参数包含了要传给模板的变量值，是一个<strong>字典类型</strong>，<strong>该字典中的key必须与模板文件中的变量名相对应</strong>，render函数会去templates目录下找到模板文件，然后根据字典中的key对应到模板文件中的变量名进行赋值操作，最后将赋值后的模板文件内容返回给浏览器</p><p>在视图函数中，如果需要传输的变量较多，我们可以直接将render函数的第三个参数简写为locals()，该函数会将视图内定义的变量与值转换为字典中的k与v，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 传给模板的变量值可以是任意python类型，如下</span><br>    msg=<span class="hljs-string">&#x27;hello world&#x27;</span><br>    dic=&#123;<span class="hljs-string">&#x27;k1&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;k2&#x27;</span>:<span class="hljs-number">2</span>&#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>            <span class="hljs-variable language_">self</span>.name=name<br>            <span class="hljs-variable language_">self</span>.age=age<br><br>    obj=Person(<span class="hljs-string">&#x27;egon&#x27;</span>,<span class="hljs-number">18</span>)<br>    li = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>,obj]<br><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;test.html&#x27;</span>,<span class="hljs-built_in">locals</span>()) <span class="hljs-comment">#locals()会将函数test内定义的名字与值转换为字典中的k与v</span><br></code></pre></td></tr></table></figure><h3 id="2-2、使用句点符号进行查询"><a href="#2-2、使用句点符号进行查询" class="headerlink" title="2.2、使用句点符号进行查询"></a><strong>2.2、使用句点符号进行查询</strong></h3><p>当视图传给模板的值中包含多个元素时，若想取出单个元素，可以使用句点符。句点符既可以引用容器类型的元素（字典、列表等），也可以引用对象的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    msg = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    dic = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>            <span class="hljs-variable language_">self</span>.name = name<br>            <span class="hljs-variable language_">self</span>.age = age<br><br>    obj = Person(<span class="hljs-string">&#x27;egon&#x27;</span>, <span class="hljs-number">18</span>)<br>    li = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>, obj]<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--将接收到的字符串转成大写--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; msg.upper &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br><br><span class="hljs-comment">&lt;!--取字典的键来取值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; dic.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--获取对象的属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--获取列表中第二个元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; li.1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：Django的模板语言中属性的优先级大于方法</strong></p><p>视图中定义的字典中含有一个名为 items 的键</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> xx(request):<br>    <span class="hljs-attribute">d</span> = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;items&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>&#125;<br>    <span class="hljs-attribute">return</span> render(request, <span class="hljs-string">&quot;xx.html&quot;</span>, &#123;<span class="hljs-string">&quot;data&quot;</span>: d&#125;)<br></code></pre></td></tr></table></figure><p>模板中对字典进行操作</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">data.items</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>此时得到的结果并不是  dict_items([(‘a’, 1), (‘b’, 2), (‘c’, 3)],(‘items’,100))，而是100，即得到的是字典中键为 items 的值。</p><h3 id="2-3、过滤器"><a href="#2-3、过滤器" class="headerlink" title="2.3、过滤器"></a><strong>2.3、过滤器</strong></h3><p>过滤器类似于python中的内置函数，会对变量进行对应的操作以后再显示</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; 变量名|过滤器:传给过滤器的参数 &#125;&#125;<br></code></pre></td></tr></table></figure><p>常用过滤器如下：</p><ul><li><strong>default</strong></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">作用：如果一个变量值是<span class="hljs-literal">False</span>或者为空，使用<span class="hljs-literal">default</span>后指定的默认值，否则，使用变量本身的值<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;!-- 如果value=<span class="hljs-string">&#x27;&#x27;</span>则输出<span class="hljs-string">&#x27;nothing&#x27;</span> --&gt;<br>&#123;&#123; value|default:<span class="hljs-string">&quot;nothing&quot;</span> &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>length</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">作用：返回值的长度。它对字符串、列表、字典等容器类型都起作用，如果value是 <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]</span>，那么输出是<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|length &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>filesizeformat</strong></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">作用：将值的格式化为一个<span class="hljs-string">&quot;人类可读的&quot;</span>文件尺寸(如<span class="hljs-number">13</span>KB、<span class="hljs-number">4.1</span> MB、<span class="hljs-number">102</span><span class="hljs-built_in">bytes</span>等等），如果 value 是 <span class="hljs-number">12312312321</span>，输出将会是 <span class="hljs-number">11.5</span> GB<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|filesizeformat &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>date</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">作用：将日期按照指定的格式输出，如果<span class="hljs-attribute">value</span>=datetime.datetime.now(),按照格式Y-m-d则输出2019-02-02<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|date:<span class="hljs-string">&quot;Y-m-d&quot;</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p>date可用参数（显示默认都是英文，想要显示中文要去修改 django 项目中 settings.py 中的 LANGUAGE_CODE ，将值改为zh-Hans(简体中文)&#x2F;zh-Hant(繁体中文)）</p><table><thead><tr><th>格式化字符</th><th>描述</th><th>示例输出</th></tr></thead><tbody><tr><td>a</td><td><code>&#39;a.m.&#39;</code>或<code>&#39;p.m.&#39;</code>（请注意，这与PHP的输出略有不同，因为这包括符合Associated Press风格的期间）</td><td><code>&#39;a.m.&#39;</code></td></tr><tr><td>A</td><td><code>&#39;AM&#39;</code>或<code>&#39;PM&#39;</code>。</td><td><code>&#39;AM&#39;</code></td></tr><tr><td>b</td><td>月，文字，3个字母，小写。</td><td><code>&#39;jan&#39;</code></td></tr><tr><td>B</td><td>未实现。</td><td></td></tr><tr><td>c</td><td>ISO 8601格式。 （注意：与其他格式化程序不同，例如“Z”，“O”或“r”，如果值为naive datetime，则“c”格式化程序不会添加时区偏移量（请参阅<a href="https://docs.python.org/3/library/datetime.html#datetime.tzinfo"><code>datetime.tzinfo</code></a>） 。</td><td><code>2008-01-02T10:30:00.000123+02:00</code>或<code>2008-01-02T10:30:00.000123</code>如果datetime是天真的</td></tr><tr><td>d</td><td>月的日子，带前导零的2位数字。</td><td><code>&#39;01&#39;</code>到<code>&#39;31&#39;</code></td></tr><tr><td>D</td><td>一周中的文字，3个字母。</td><td><code>“星期五”</code></td></tr><tr><td>e</td><td>时区名称 可能是任何格式，或者可能返回一个空字符串，具体取决于datetime。</td><td><code>&#39;&#39;</code>、<code>&#39;GMT&#39;</code>、<code>&#39;-500&#39;</code>、<code>&#39;US/Eastern&#39;</code>等</td></tr><tr><td>E</td><td>月份，特定地区的替代表示通常用于长日期表示。</td><td><code>&#39;listopada&#39;</code>（对于波兰语区域，而不是<code>&#39;Listopad&#39;</code>）</td></tr><tr><td>f</td><td>时间，在12小时的小时和分钟内，如果它们为零，则分钟停留。 专有扩展。</td><td><code>&#39;1&#39;</code>，<code>&#39;1:30&#39;</code></td></tr><tr><td>F</td><td>月，文，长。</td><td><code>&#39;一月&#39;</code></td></tr><tr><td>g</td><td>小时，12小时格式，无前导零。</td><td><code>&#39;1&#39;</code>到<code>&#39;12&#39;</code></td></tr><tr><td>G</td><td>小时，24小时格式，无前导零。</td><td><code>&#39;0&#39;</code>到<code>&#39;23&#39;</code></td></tr><tr><td>h</td><td>小时，12小时格式。</td><td><code>&#39;01&#39;</code>到<code>&#39;12&#39;</code></td></tr><tr><td>H</td><td>小时，24小时格式。</td><td><code>&#39;00&#39;</code>到<code>&#39;23&#39;</code></td></tr><tr><td>i</td><td>分钟。</td><td><code>&#39;00&#39;</code>到<code>&#39;59&#39;</code></td></tr><tr><td>I</td><td>夏令时间，无论是否生效。</td><td><code>&#39;1&#39;</code>或<code>&#39;0&#39;</code></td></tr><tr><td>j</td><td>没有前导零的月份的日子。</td><td><code>&#39;1&#39;</code>到<code>&#39;31&#39;</code></td></tr><tr><td>l</td><td>星期几，文字长。</td><td><code>&#39;星期五&#39;</code></td></tr><tr><td>L</td><td>布尔值是否是一个闰年。</td><td><code>True</code>或<code>False</code></td></tr><tr><td>m</td><td>月，2位数字带前导零。</td><td><code>&#39;01&#39;</code>到<code>&#39;12&#39;</code></td></tr><tr><td>M</td><td>月，文字，3个字母。</td><td><code>“三月”</code></td></tr><tr><td>n</td><td>月无前导零。</td><td><code>&#39;1&#39;</code>到<code>&#39;12&#39;</code></td></tr><tr><td>N</td><td>美联社风格的月份缩写。 专有扩展。</td><td><code>&#39;Jan.&#39;</code>，<code>&#39;Feb.&#39;</code>，<code>&#39;March&#39;</code>，<code>&#39;May&#39;</code></td></tr><tr><td>o</td><td>ISO-8601周编号，对应于使用闰年的ISO-8601周数（W）。 对于更常见的年份格式，请参见Y。</td><td><code>&#39;1999年&#39;</code></td></tr><tr><td>O</td><td>与格林威治时间的差异在几小时内。</td><td><code>&#39;+0200&#39;</code></td></tr><tr><td>P</td><td>时间为12小时，分钟和’a.m。’&#x2F;‘p.m。’，如果为零，分钟停留，特殊情况下的字符串“午夜”和“中午”。 专有扩展。</td><td><code>&#39;1 am&#39;</code>，<code>&#39;1:30 pm&#39; / t3&gt;，&#39;midnight&#39;，&#39;noon&#39;，&#39;12：30 pm&#39; / T10&gt;</code></td></tr><tr><td>r</td><td><a href="https://tools.ietf.org/html/rfc5322.html"><strong>RFC 5322</strong></a>格式化日期。</td><td><code>&#39;Thu, 21 Dec 2000 16:01:07 +0200&#39;</code></td></tr><tr><td>s</td><td>秒，带前导零的2位数字。</td><td><code>&#39;00&#39;</code>到<code>&#39;59&#39;</code></td></tr><tr><td>S</td><td>一个月的英文序数后缀，2个字符。</td><td><code>&#39;st&#39;</code>，<code>&#39;nd&#39;</code>，<code>&#39;rd&#39;</code>或<code>&#39;th&#39;</code></td></tr><tr><td>t</td><td>给定月份的天数。</td><td><code>28</code> to <code>31</code></td></tr><tr><td>T</td><td>本机的时区。</td><td><code>&#39;EST&#39;</code>，<code>&#39;MDT&#39;</code></td></tr><tr><td>u</td><td>微秒。</td><td><code>000000</code> to <code>999999</code></td></tr><tr><td>U</td><td>自Unix Epoch以来的二分之一（1970年1月1日00:00:00 UTC）。</td><td></td></tr><tr><td>w</td><td>星期几，数字无前导零。</td><td><code>&#39;0&#39;</code>（星期日）至<code>&#39;6&#39;</code>（星期六）</td></tr><tr><td>W</td><td>ISO-8601周数，周数从星期一开始。</td><td><code>1</code>，<code>53</code></td></tr><tr><td>y</td><td>年份，2位数字。</td><td><code>&#39;99&#39;</code></td></tr><tr><td>Y</td><td>年，4位数。</td><td><code>&#39;1999年&#39;</code></td></tr><tr><td>z</td><td>一年中的日子</td><td><code>0</code>到<code>365</code></td></tr><tr><td>Z</td><td>时区偏移量，单位为秒。 UTC以西时区的偏移量总是为负数，对于UTC以东时，它们总是为正。</td><td><code>-43200</code>到<code>43200</code></td></tr></tbody></table><ul><li><strong>slice</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">作用：对输出的字符串进行切片操作，顾头不顾尾,如果<span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;egon&quot;</span>，则输出&quot;eg&quot;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|<span class="hljs-built_in">slice</span>:<span class="hljs-string">&quot;0:2&quot;</span> &#125;&#125;　<br></code></pre></td></tr></table></figure><ul><li><strong>truncatechars</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">作用：如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（<span class="hljs-string">&quot;...&quot;</span>）结尾，如果<span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;hello world egon 嘎嘎&quot;</span>，则输出&quot;hello...&quot;,注意8个字符也包含末尾的3个点<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|truncatechars:<span class="hljs-number">8</span> &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>truncatewords</strong></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">作用：同truncatechars，但truncatewords是按照单词截断，注意末尾的<span class="hljs-number">3</span>个点不算作单词，如果value<span class="hljs-operator">=</span><span class="hljs-string">&quot;hello world egon 嘎嘎&quot;</span>，则输出<span class="hljs-string">&quot;hello world ...&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|truncatewords:<span class="hljs-number">2</span> &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>safe</strong></li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">作用：出于安全考虑，Django的模板会对HTML标签、JS等语法标签进行自动转义,例如value=&quot;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;，模板变量</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml">会被渲染成<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert(123)<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span></span><br><span class="language-xml">交给浏览器后会被解析成普通字符&quot;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(123)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;，失去了js代码的语法意义，但如果我们就想让模板变量</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml">被渲染的结果有语法意义，那么就用到了过滤器safe，比如value=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点我啊<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;，在被safe过滤器处理后就成为了真正的超链接，不加safe过滤器则会当做普通字符显示&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点我啊<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|safe &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>cut</strong></li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">作用：移除value中所有的与给出的变量相同的字符串，如果value的值是<span class="hljs-string">&quot;banana&quot;</span>，结果为<span class="hljs-string">&quot;bnn&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;!-- 把字符串中所有的字母a移除 --&gt;<br>&#123;&#123; value|cut:<span class="hljs-string">&#x27;a&#x27;</span> &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>join</strong></li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">作用：使用字符串按照指定的符号连接列表，例如Python的<span class="hljs-built_in">str</span>.<span class="hljs-keyword">join</span>(list)，如果value的值是<span class="hljs-string">&quot;[&quot;</span>hello<span class="hljs-string">&quot;, &quot;</span>world<span class="hljs-string">&quot;, &quot;</span>!<span class="hljs-string">&quot;]&quot;</span>，结果为<span class="hljs-string">&quot;hello/world/!&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; value|join:<span class="hljs-string">&quot;/&quot;</span> &#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>timesince</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">作用：计算日期间的时间间隔，变量和参数必须是时间对象，且变量的日期要小于参数的日期<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span>|timesince &#125;&#125;</span><span class="language-xml">  不加参数，表示 value 据当前日期间隔多少，如 value是2020年03月12日12时的一个时间对象，当前为2020年03月14日14时的一个时间对象，得到的结果为&quot;2日，2小时&quot;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span>|timesince:value2 &#125;&#125;</span><span class="language-xml">  加参数，表示 value 据 value2 日期间隔的时间</span><br></code></pre></td></tr></table></figure><ul><li><strong>timeuntil</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">作用：类似于timesince，它测量从现在开始直到给定日期或日期时间的间隔，且变量的日日期要大于参数的日期<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span>|timeuntil &#125;&#125;</span><span class="language-xml">  不加参数，表示当前日期距离 value 的时间间隔（value必须在当前日期之后，不然结果为0）</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span>|timeuntil:value2 &#125;&#125;</span><span class="language-xml">  加参数，表示 value2 距离 value 的时间间隔（value必须在value2之后，不然结果为0）</span><br></code></pre></td></tr></table></figure><ul><li>其余常用内置过滤器（了解）</li></ul><table><thead><tr><th>过滤器</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>upper</td><td>以大写方式输出</td><td><code>&#123;&#123; user.name \| upper &#125;&#125;&lt;br&gt;</code></td></tr><tr><td>add</td><td>给value加上一个数值</td><td><code>&#123;&#123; user.age \| add:"5" &#125;&#125;&lt;br&gt;</code></td></tr><tr><td>addslashes</td><td>单引号加上转义号</td><td></td></tr><tr><td>capfirst</td><td>第一个字母大写</td><td><code>&#123;&#123; 'good' \| capfirst &#125;&#125;&lt;br&gt;</code> 返回’Good’</td></tr><tr><td>center</td><td>输出指定长度的字符串，把变量居中</td><td><code>&#123;&#123; 'abcd'\| center:'50' &#125;&#125;&lt;br&gt;</code></td></tr><tr><td>cut</td><td>删除指定字符串</td><td><code>&#123;&#123; 'You are not a Englishman' \| cut:'not' &#125;&#125;&lt;br&gt;</code></td></tr><tr><td>date</td><td>格式化日期</td><td></td></tr><tr><td>default</td><td>如果值不存在，则使用默认值代替</td><td><code>&#123;&#123; value \| default:'(N/A)' &#125;&#125;&lt;br&gt;</code></td></tr><tr><td>default_if_none</td><td>如果值为None, 则使用默认值代替</td><td></td></tr><tr><td>dictsort</td><td>按某字段排序，变量必须是一个dictionary</td><td><code>&#123;% for moment in moments \| dictsort:”id” %&#125;&lt;br&gt;</code></td></tr><tr><td>dictsortreversed</td><td>按某字段倒序排序，变量必须是dictionary</td><td></td></tr><tr><td>divisibleby</td><td>判断是否可以被数字整除</td><td><code>&#123;&#123; 224 \| divisibleby:2 &#125;&#125;&lt;br&gt;</code> 返回 True</td></tr><tr><td>escape</td><td>按HTML转义，比如将”&lt;”转换为”&amp;lt”</td><td></td></tr><tr><td>filesizeformat</td><td>增加数字的可读性，转换结果为13KB,89MB,3Bytes等</td><td><code>&#123;&#123; 1024 \| filesizeformat &#125;&#125;&lt;br&gt;</code>返回 1.0KB</td></tr><tr><td>first</td><td>返回列表的第1个元素，变量必须是一个列表</td><td></td></tr><tr><td>floatformat</td><td>转换为指定精度的小数，默认保留1位小数</td><td><code>&#123;&#123; 3.1415926 \| floatformat:3 &#125;&#125;&lt;br&gt;</code> 返回 3.142 四舍五入</td></tr><tr><td>get_digit</td><td>从个位数开始截取指定位置的数字</td><td><code>&#123;&#123; 123456 \| get_digit:'1'&#125;&#125;&lt;br&gt;</code></td></tr><tr><td>join</td><td>用指定分隔符连接列表</td><td><code>&#123;&#123; ['abc','45'] \| join:’*’ &#125;&#125;&lt;br&gt;</code> 返回 abc*45</td></tr><tr><td>length</td><td>返回列表中元素的个数或字符串长度</td><td></td></tr><tr><td>length_is</td><td>检查列表，字符串长度是否符合指定的值</td><td><code>&#123;&#123; 'hello'\| length_is:'3' &#125;&#125;&lt;br&gt;</code></td></tr><tr><td>linebreaks</td><td>用或 标签包裹变量</td><td><code>&#123;&#123; 'Hi\n\nDavid'\|linebreaks &#125;&#125;&lt;br&gt;</code> 返回HiDavid</td></tr><tr><td>linebreaksbr</td><td>用 标签代替换行符</td><td></td></tr><tr><td>linenumbers</td><td>为变量中的每一行加上行号</td><td></td></tr><tr><td>ljust</td><td>输出指定长度的字符串，变量左对齐</td><td><code>&#123;&#123;'ab'\|ljust:5&#125;&#125;&lt;br&gt;</code>返回 ‘ab   ‘</td></tr><tr><td>lower</td><td>字符串变小写</td><td></td></tr><tr><td>make_list</td><td>将字符串转换为列表</td><td></td></tr><tr><td>pluralize</td><td>根据数字确定是否输出英文复数符号</td><td></td></tr><tr><td>random</td><td>返回列表的随机一项</td><td></td></tr><tr><td>removetags</td><td>删除字符串中指定的HTML标记</td><td><code>&#123;&#123;value \| removetags: 'h1 h2'&#125;&#125;&lt;br&gt;</code></td></tr><tr><td>rjust</td><td>输出指定长度的字符串，变量右对齐</td><td></td></tr><tr><td>slice</td><td>切片操作， 返回列表</td><td><code>&#123;&#123;[3,9,1] \| slice:':2'&#125;&#125; &#123;&#123; 'asdikfjhihgie' \| slice:':5' &#125;&#125;&lt;br&gt;</code> 返回 [3,9] 和 ‘asdik’</td></tr><tr><td>slugify</td><td>在字符串中留下减号和下划线，其它符号删除，空格用减号替换</td><td><code>&#123;&#123; '5-2=3and5 2=3' \| slugify &#125;&#125;&lt;br&gt;</code> 返回 5-23and5-23</td></tr><tr><td>stringformat</td><td>字符串格式化，语法同python</td><td></td></tr><tr><td>time</td><td>返回日期的时间部分</td><td></td></tr><tr><td>timesince</td><td>以“到现在为止过了多长时间”显示时间变量</td><td>结果可能为 45days, 3 hours</td></tr><tr><td>timeuntil</td><td>以“从现在开始到时间变量”还有多长时间显示时间变量</td><td></td></tr><tr><td>title</td><td>每个单词首字母大写</td><td></td></tr><tr><td>truncatewords</td><td>将字符串转换为省略表达方式</td><td><code>&#123;&#123; 'This is a pen' \| truncatewords:2 &#125;&#125;&lt;br&gt;</code> 返回 This is …</td></tr><tr><td>truncatewords_html</td><td>同上，但保留其中的HTML标签</td><td><code>&#123;&#123; 'This is a pen' \| truncatewords:2 &#125;&#125;&lt;br&gt;</code> 返回 This is …</td></tr><tr><td>urlencode</td><td>将字符串中的特殊字符转换为url兼容表达方式</td><td><code>&#123;&#123; ‘http://www.aaa.com/foo?a=b&b=c’ \| urlencode&#125;&#125;&lt;br&gt;</code></td></tr><tr><td>urlize</td><td>将变量字符串中的url由纯文本变为链接</td><td></td></tr><tr><td>wordcount</td><td>返回变量字符串中的单词数</td><td></td></tr><tr><td>yesno</td><td>将布尔变量转换为字符串yes, no 或maybe</td><td><code>&#123;&#123; True \| yesno &#125;&#125;&#123;&#123; False \| yesno &#125;&#125;&#123;&#123; None \| yesno &#125;&#125;&lt;br&gt;</code> 分别返回 yes  no maybe</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="三、模板语法之标签"><a href="#三、模板语法之标签" class="headerlink" title="三、模板语法之标签"></a>三、模板语法之标签</h2><p>标签是为了在模板中完成一些特殊功能</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% 标签名 %&#125;<br><span class="hljs-comment"># 一些标签还需要搭配结束标签 &#123;% endtag %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-1、for-标签"><a href="#3-1、for-标签" class="headerlink" title="3.1、for 标签"></a><strong>3.1、for 标签</strong></h3><h4 id="3-1-1、遍历所有元素"><a href="#3-1-1、遍历所有元素" class="headerlink" title="3.1.1、遍历所有元素"></a><strong>3.1.1、遍历所有元素</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 普通循环遍历</span><br>&#123;% <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> value_list %&#125;<br>    &lt;p&gt;&#123;&#123; value &#125;&#125;&lt;/p&gt;<br>&#123;% endfor %&#125;<br><br><span class="hljs-comment"># 反向循环遍历</span><br>&#123;% <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> value_list <span class="hljs-built_in">reversed</span> %&#125;<br>    &lt;p&gt;&#123;&#123; value &#125;&#125;&lt;/p&gt;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># view.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    li = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 结果为 a b  c d--&gt;</span><br>    &#123;% for ele in li %&#125;<br>        &#123;&#123; ele &#125;&#125;<br>    &#123;% endfor %&#125;<br><br><br><span class="hljs-comment">&lt;!-- 结果为 d c b a --&gt;</span><br>    &#123;% for ele in li reversed %&#125;<br>        &#123;&#123; ele &#125;&#125;<br>    &#123;% endfor %&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2、遍历字典"><a href="#3-1-2、遍历字典" class="headerlink" title="3.1.2、遍历字典"></a><strong>3.1.2、遍历字典</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> key,val <span class="hljs-keyword">in</span> dic.items %&#125;<br>    &lt;p&gt;&#123;&#123; key &#125;&#125;:&#123;&#123; val &#125;&#125;&lt;/p&gt;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    dic = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;AAA&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;BBB&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;CCC&quot;</span>&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 结果为 a b c --&gt;</span><br>&#123;% for key in dic %&#125;<br>        &#123;&#123; key &#125;&#125;<br>    &#123;% endfor %&#125;<br><br><br>   <span class="hljs-comment">&lt;!-- 结果为 (&#x27;a&#x27;,&#x27;AAA&#x27;)  (&#x27;b&#x27;,&#x27;BBB&#x27;)  (&#x27;c&#x27;,&#x27;CCC&#x27;) --&gt;</span><br>    &#123;% for ele in dic.items %&#125;<br>        &#123;&#123; ele &#125;&#125;<br>    &#123;% endfor %&#125;<br>    <br>    <br>    <span class="hljs-comment">&lt;!-- 结果为 a:AAA  b:BBB  c:CCC --&gt;</span><br>    &#123;% for key,value in dic.items %&#125;<br>        &#123;&#123; key &#125;&#125;:&#123;&#123; value &#125;&#125;<br>    &#123;% endfor %&#125;<br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-3、循环的序号"><a href="#3-1-3、循环的序号" class="headerlink" title="3.1.3、循环的序号"></a><strong>3.1.3、循环的序号</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 循环序号可以通过&#123;&#123; forloop &#125;&#125;显示　</span><br>forloop.counter            当前循环的索引值（从<span class="hljs-number">1</span>开始）<br>forloop.counter0           当前循环的索引值（从<span class="hljs-number">0</span>开始）<br>forloop.revcounter         当前循环的倒序索引值（从<span class="hljs-number">1</span>开始）<br>forloop.revcounter0        当前循环的倒序索引值（从<span class="hljs-number">0</span>开始）<br>forloop.first              当前循环是第一次循环则返回<span class="hljs-literal">True</span>，否则返回<span class="hljs-literal">False</span><br>forloop.last               当前循环是最后一次循环则返回<span class="hljs-literal">True</span>，否则返回<span class="hljs-literal">False</span><br>forloop.parentloop         本层循环的外层循环<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    li = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]<br>    li2 = [[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>]]<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    &#123;% for ele in li %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>循环次数-&#123;&#123; forloop.counter0 &#125;&#125;，值-&#123;&#123; ele &#125;&#125;，是否是第一次循环：&#123;&#123; forloop.first &#125;&#125;，是否是最后一次循环-&#123;&#123; forloop.last &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endfor %&#125;<br><br><br>    &#123;% for li in li2 %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 50px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是外层循环-元素为&#123;&#123; li &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            &#123;% for ele in li %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是内层循环-元素为&#123;&#123; ele &#125;&#125;，外层循环信息：&#123;&#123; forloop.parentloop &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    &#123;% endfor %&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 结果为</span><br><br>循环次数<span class="hljs-number">-0</span>，值-a，是否是第一次循环：<span class="hljs-literal">True</span>，是否是最后一次循环-<span class="hljs-literal">False</span><br>循环次数<span class="hljs-number">-1</span>，值-b，是否是第一次循环：<span class="hljs-literal">False</span>，是否是最后一次循环-<span class="hljs-literal">False</span><br>循环次数<span class="hljs-number">-2</span>，值-c，是否是第一次循环：<span class="hljs-literal">False</span>，是否是最后一次循环-<span class="hljs-literal">False</span><br>循环次数<span class="hljs-number">-3</span>，值-d，是否是第一次循环：<span class="hljs-literal">False</span>，是否是最后一次循环-<span class="hljs-literal">True</span><br><br><br><br>这是外层循环-元素为[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>这是内层循环-元素为a，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br>这是内层循环-元素为b，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br>这是内层循环-元素为c，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br><br>这是外层循环-元素为[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>这是内层循环-元素为<span class="hljs-number">1</span>，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br>这是内层循环-元素为<span class="hljs-number">2</span>，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br>这是内层循环-元素为<span class="hljs-number">3</span>，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br><br>这是外层循环-元素为[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br>这是内层循环-元素为a，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">True</span>&#125;<br>这是内层循环-元素为o，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">True</span>&#125;<br>这是内层循环-元素为e，外层循环信息：&#123;<span class="hljs-string">&#x27;parentloop&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;counter0&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;counter&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;revcounter&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;revcounter0&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;first&#x27;</span>: <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;last&#x27;</span>: <span class="hljs-literal">True</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-1-4、for-和-empty"><a href="#3-1-4、for-和-empty" class="headerlink" title="3.1.4、for 和 empty"></a><strong>3.1.4、for 和 empty</strong></h4><p>for 标签可以带有一个可选的 <code>&#123;% empty %&#125;</code>从句，在变量为空或者没有被找到时，则执行 empty 子句</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> ele <span class="hljs-keyword">in</span> ele_list %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; ele &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">empty</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>sorry,no element here<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    li_1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]<br>    li_2 = []<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    &#123;% for ele in li_1 %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; ele &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% empty %&#125;<br>         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>sorry,no element here<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endfor %&#125;<br><br><br>    &#123;% for ele in li_2 %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; ele &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% empty %&#125;<br>         <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>sorry,no element here<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endfor %&#125;<br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2、if-标签"><a href="#3-2、if-标签" class="headerlink" title="3.2、if 标签"></a><strong>3.2、if 标签</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1、注意：</span><br>&#123;% <span class="hljs-keyword">if</span> 条件 %&#125;条件为真时<span class="hljs-keyword">if</span>的子句才会生效，条件也可以是一个变量，<span class="hljs-keyword">if</span>会对变量进行求值，在变量值为空、或者视图没有为其传值的情况下均为<span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 2、具体语法</span><br>&#123;% <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">100</span> <span class="hljs-keyword">or</span> num &lt; <span class="hljs-number">0</span> %&#125;<br>    &lt;p&gt;无效&lt;/p&gt;<br>&#123;% <span class="hljs-keyword">elif</span> num &gt; <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> num &lt; <span class="hljs-number">100</span> %&#125;<br>    &lt;p&gt;优秀&lt;/p&gt;<br>&#123;% <span class="hljs-keyword">else</span> %&#125;<br>    &lt;p&gt;凑活吧&lt;/p&gt;<br>&#123;% endif %&#125;<br><br><span class="hljs-comment"># 3、if语句支持 and 、or、==、&gt;、&lt;、!=、&lt;=、&gt;=、in、not in、is、is not判断。</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    user = []<br>    black = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>]<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 普通判断 --&gt;</span><br>    &#123;% if name == &quot;cdc&quot; %&#125;<br>        用户名正确<br>    &#123;% else %&#125;<br>        用户名错误<br>    &#123;% endif %&#125;<br><br><br>    <span class="hljs-comment">&lt;!-- 多分支判断 --&gt;</span><br>    &#123;% if user %&#125;<br>        用户人数为&#123;&#123; user|length &#125;&#125;<br>    &#123;% elif black %&#125;<br>        黑名单人数为&#123;&#123; black|length &#125;&#125;<br>    &#123;% else %&#125;<br>        没有查到对应的信息<br>    &#123;% endif %&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意： Django的模板语言不支持连续判断，即不支持以下写法</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> a &gt; b &gt; c %&#125;</span><span class="language-xml"></span><br><span class="language-xml">...</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3、with-标签"><a href="#3-3、with-标签" class="headerlink" title="3.3、with 标签"></a><strong>3.3、with 标签</strong></h3><p>定义一个中间变量，多用于给一个复杂的变量起别名。如果有赋值操作，注意等号左右不要加空格。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">with</span></span> total=business.employees.count %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; total &#125;&#125;</span><span class="language-xml"> employee</span><span class="hljs-template-variable">&#123;&#123; total|<span class="hljs-name">pluralize</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endwith</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">或者</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">with</span></span> business.employees.count <span class="hljs-keyword">as</span> total %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; total &#125;&#125;</span><span class="language-xml"> employee</span><span class="hljs-template-variable">&#123;&#123; total|<span class="hljs-name">pluralize</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endwith</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-4、csrf-token标签"><a href="#3-4、csrf-token标签" class="headerlink" title="3.4、csrf_token标签"></a><strong>3.4、csrf_token标签</strong></h3><p>​csrf_token标签用于防止伪造跨域请求保护。在实际的项目中，如果用户浏览器通过<strong>post请求</strong>发送了一些数据，在不做特殊的处理的情况下，django无法知道这些数据是不是有害数据，接收该请求会不会对真个服务器造成危害，为了防止这种情况，会对该请求进行跨域伪造，该post请求就会请求失败，我们也无法直接获取到发送过来的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django_templates <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^login&quot;</span>, views.login),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/login.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> pwd == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;欢迎登录&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">启动项目，访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/login/</span> ，输入用户名密码，点击登录，发现请求失败，浏览器显示<br><br>禁止访问 (<span class="hljs-number">403</span>)<br>CSRF验证失败. 请求被中断.<br></code></pre></td></tr></table></figure><p>我们可以通过以下两种方式来解决跨域问题（任选一种）：</p><ul><li>修改项目配置文件settings.py中的中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-comment">#  &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,  #  注释掉此行就不会发生跨域问题了</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><ul><li>通过csrf_token标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/login.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 当用form表单提交POST请求时必须加上标签&#123;% csrf_token%&#125;，该标签用于防止跨站伪造请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>&#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>csrf_token</code> 标签具体工作原理为:</p><ol><li>在GET请求到form表单时，标签 <code>&#123;% csrf_token%&#125;</code> 会被渲染成一个隐藏的input标签，该标签包含了由服务端生成的一串随机字符串</li><li>在使用form表单提交POST请求时，会提交上述随机字符串，服务端在接收到该POST请求时会对比该随机字符串，对比成功则处理该POST请求，否则拒绝，以此来确定客户端的身份</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 加上csrf_token标签后，实际上的login.html的代码如下 --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 隐藏的input标签，该标签包含了由服务端生成的一串随机字符串 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;csrfmiddlewaretoken&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;FwdFXQsqgX0XpAphwjWojA45TPYQsnUS7ZKhpi3hhZZxlAzl41Nc1sVQQSORrUFb&quot;</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密  码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、自定义过滤器和标签"><a href="#四、自定义过滤器和标签" class="headerlink" title="四、自定义过滤器和标签"></a>四、自定义过滤器和标签</h2><p>当Django内置的过滤器或者标签无法满足我们的需求时，我们可以自定义过滤器和标签，步骤如下：</p><p><strong>第一步：</strong></p><p>检查要自定义标签或过滤器的app是否已经在配置文件中注册，如果没有注册就注册以下，不然django无法找到自定义的过滤器或标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&quot;app01.apps.App01Config&quot;</span>,  <span class="hljs-comment"># app01为新创建的app</span><br>]<br></code></pre></td></tr></table></figure><p><strong>第二步：</strong></p><p>在文件夹 app01中创建子文件夹 templatetags，<strong>注意子文件夹的名字只能是templatetags</strong></p><p><strong>第三步：</strong></p><p>在 templatetags 新建任意 .py 文件，如 my_tags.py，在该文件中自定义过滤器或标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/templatetags/my_tags.py</span><br><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template<br><br>register = template.Library()  <span class="hljs-comment"># 变量名必须为register</span><br><br><br><span class="hljs-comment"># 自定义过滤器</span><br><span class="hljs-comment"># @register.filter(name=&quot;MyFilter&quot;)  # name是可选参数，如果使用了，在模板中使用过滤器时就要用name的值；不使用，过滤器就是函数名</span><br><span class="hljs-meta">@register.filter</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_filter</span>(<span class="hljs-params">v1, v2</span>):<br>    <span class="hljs-comment"># 自定义的过滤器最多只能接收两个参数</span><br>    <span class="hljs-comment"># &#123;&#123; value1|my_filter:value2 &#125;&#125;，其中 v1 = value1  v2 = value2</span><br>    <span class="hljs-keyword">return</span> v1 * v2<br><br><br><span class="hljs-comment"># 自定义标签</span><br><span class="hljs-comment"># @register.simple_tag(name=&quot;MyTag&quot;)  # name是可选参数，如果使用了，在模板中使用标签时就要用name的值；不使用，标签名就是函数名</span><br><span class="hljs-meta">@register.simple_tag</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_tag</span>(<span class="hljs-params">v1, v2, v3</span>):<br>    <span class="hljs-comment"># 自定义标签可以接收多个值</span><br>    <span class="hljs-keyword">return</span> (v1 + v2) * v3<br><br><span class="hljs-comment"># 用于返回 html 片段，括号内的参数就是html片段存放的文件</span><br><span class="hljs-meta">@register.inclusion_tag(<span class="hljs-params"><span class="hljs-string">&#x27;result.html&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_results</span>(<span class="hljs-params">n</span>):<br>    n = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">int</span>(n)<br>    data = [<span class="hljs-string">&quot;第&#123;&#125;项&quot;</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;data&quot;</span>: data&#125;<br><br><br><span class="hljs-comment"># 自定义标签 mark_safe</span><br><span class="hljs-comment"># 我们可以用内置的标签safe来让标签内容有语法意义，如果我们想让自定义标签处理的结果也有语法意义，则不能使用内置标签safe了，需要使用mark_safe，可以实现与内置标签safe同样的功能</span><br><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe<br><br><br><span class="hljs-meta">@register.simple_tag</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_input_tag</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, name</span>):<br>    res = <span class="hljs-string">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; name=&#x27;%s&#x27; /&gt;&quot;</span> % (<span class="hljs-built_in">id</span>, name)<br>    <span class="hljs-keyword">return</span> mark_safe(res)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    data_1 = <span class="hljs-number">10</span><br>    data_2 = <span class="hljs-number">5</span><br>    <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;inp1&quot;</span><br>    name = <span class="hljs-string">&quot;username&quot;</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-built_in">locals</span>())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^app01/index/$&quot;</span>, views.index),<br><br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 必须先加载存有自定义过滤器和标签的文件 --&gt;</span><br>    &#123;% load my_tags %&#125;<br><br>    <span class="hljs-comment">&lt;!-- data_1的值是10，经过自定义过滤器处理的结果为 100 --&gt;</span><br>    &#123;&#123; data_1|my_filter:10 &#125;&#125;<br><br>    <span class="hljs-comment">&lt;!-- data_2的值是5，经过自定义标签处理的结果为 12 --&gt;</span><br>    &#123;% my_tag data_2 1 2 %&#125;<br><br>    <span class="hljs-comment">&lt;!-- input标签的id是&#x27;inp1&#x27;，name属性的值是&#x27;username&#x27; --&gt;</span><br>    &#123;% my_input_tag id name %&#125;<br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自定义标签和过滤器对比：</p><ul><li>自定义过滤器只能传两个值，而自定义标签可以传多个</li><li>自定义过滤器可以使用 if 判断，而自定义标签不能</li></ul><p><strong>补充：使用自定义标签返回html片段</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/templatetags/my_tags.py</span><br><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> template<br><br>register = template.Library()<br><br><br><span class="hljs-meta">@register.inclusion_tag(<span class="hljs-params"><span class="hljs-string">&#x27;result.html&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_results</span>(<span class="hljs-params">n</span>):<br>    n = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">int</span>(n)<br>    data = [<span class="hljs-string">&quot;第&#123;&#125;项&quot;</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;data&quot;</span>: data&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/snippets/result.html --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  &#123;% for choice in data %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; choice &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;x-ua-compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>inclusion_tag test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>&#123;% load inclusion_tag_test %&#125;<br><br>&#123;% show_results 10 %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、模板的导入和继承"><a href="#五、模板的导入和继承" class="headerlink" title="五、模板的导入和继承"></a>五、模板的导入和继承</h2><p>​在项目开发过程中，模板中可能会使用大量的相同的代码，这就会导致造成大量的代码重复使用和冗余的问题。我们可以将代码和功能重复的地方进行抽取和封装（类似面向对象的思想），需要使用时，我们再去调用，这就是Django中的模板继承思想。</p><h3 id="5-1、模板（组件）的导入"><a href="#5-1、模板（组件）的导入" class="headerlink" title="5.1、模板（组件）的导入"></a><strong>5.1、模板（组件）的导入</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 作用：在一个模板文件中，引入/重用另外一个模板文件的内容，我们通常把一些常用的特定功能写在模板中方便使用，所以这些模板也叫组件</span><br>&#123;% include <span class="hljs-string">&#x27;模版名称&#x27;</span> %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/base.html --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 50px;text-align: center;font-weight: bolder;font-size: 30px;color: black; background-color: red;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>这是导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^app01/index/$&quot;</span>, views.index),<br><br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01/views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--在index.html引入base.html文件的内容--&gt;</span><br>    &#123;% include &quot;base.html&quot; %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试可以看到，虽然index页面可以显示和base页面一样的内容，但是index页面中并灭有写那些代码。</p><h3 id="5-2、模板的继承与派生"><a href="#5-2、模板的继承与派生" class="headerlink" title="5.2、模板的继承与派生"></a><strong>5.2、模板的继承与派生</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  作用：在一个模板文件中，引入/重用另外一个模板文件的内容</span><br>&#123;% extends <span class="hljs-string">&quot;模版名称&quot;</span> %&#125;<br><span class="hljs-comment">#  注意：include有的功能extends全都有，但是extends可以搭配一个block标签，用于在继承的基础上定制新的内容</span><br></code></pre></td></tr></table></figure><p>Django模版引擎中最复杂且最强大的部分就是模版继承了。我们以先创建一个基本的“骨架”模版，它包含我们站点中的全部元素，并且可以定义多处blocks 。</p><p>首先我们先定义一个用户填写注册信息的基础页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/register_base.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>        &#123;% block title %&#125;<br>            注册页面的基础模板<br>        &#123;% endblock %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/app01/register/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 30px;font-weight: bolder&quot;</span>&gt;</span>用户名密码信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;user_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>用户名：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>密 码：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请设置密码&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 30px;font-weight: bolder&quot;</span>&gt;</span>设置个人资料<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    &#123;% block personal_info %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>手机号：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入手机号&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>            女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>&#123;% block content %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        基础模板中的内容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们新建子模板register.html的主要工作就是继承基础模板l然后填充&#x2F;覆盖其内部的blocks。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/register.html --&gt;</span><br><br>&#123;% extends &quot;register_base.html&quot; %&#125;<br><br><span class="hljs-comment">&lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br>&#123;% block title %&#125;<br>    用户注册详细页面<br>&#123;% endblock %&#125;<br><br><br>&#123;% block personal_info %&#125;<br>    <span class="hljs-comment">&lt;!--该变量会将父模板中sidebar中原来的内容继承过来，然后我们可以在此基础上新增，否则就是纯粹地覆盖--&gt;</span><br>    &#123;&#123; block.super &#125;&#125;<br><br>    唱<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span><br>    条<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dance&quot;</span>&gt;</span><br>    rap<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rap&quot;</span>&gt;</span><br>    篮球<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br><br>&#123;% block content %&#125;<br>    <span class="hljs-comment">&lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>详细注册页面内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><p>我们通过django访问register.html，实际上看到内容如下(block标签的内容都完成了替换或更新)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- saved from url=(0037)http://127.0.0.1:8000/app01/register/ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>        <br>    用户注册详细页面<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://127.0.0.1:8000/app01/register/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 30px;font-weight: bolder&quot;</span>&gt;</span>用户名密码信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;user_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>用户名：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>密 码：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请设置密码&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 30px;font-weight: bolder&quot;</span>&gt;</span>设置个人资料<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--该变量会将父模板中sidebar中原来的内容继承过来，然后我们可以在此基础上新增，否则就是纯粹地覆盖--&gt;</span><br>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>手机号：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入手机号&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>            女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <br><br>    唱<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span><br>    条<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dance&quot;</span>&gt;</span><br>    rap<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rap&quot;</span>&gt;</span><br>    篮球<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>详细注册页面内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结与注意：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1、标签extends必须放在首行，base.html中block越多可定制性越强</span><br><br><span class="hljs-comment"># 2、include仅仅只是完全引用其他模板文件，而extends却可以搭配block在引用的基础上进行扩写</span><br><br><span class="hljs-comment"># 3、变量&#123;&#123; block.super &#125;&#125; 可以重用父类的内容，然后在父类基础上增加新内容，而不是完全覆盖</span><br><br><span class="hljs-comment"># 4、为了提升可读性，我们可以给标签&#123;% endblock %&#125; 起一个名字 。例如：</span><br>    &#123;% block content %&#125;<br>    ...<br>    &#123;% endblock content %&#125;　　<br><span class="hljs-comment"># 5、在一个模版中不能出现重名的block标签。</span><br></code></pre></td></tr></table></figure><h3 id="5-3、静态文件相关"><a href="#5-3、静态文件相关" class="headerlink" title="5.3、静态文件相关"></a><strong>5.3、静态文件相关</strong></h3><p>我们在编写模板文件时，需要大量引用css、js、图片等静态文件，如果我们将这些文件在服务端存放的路径都固定写死那么将非常不利于后期的扩展，我们可以这么做</p><p><strong>第一步：</strong></p><p>在settings.py中配置相关的静态文件目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span> <span class="hljs-comment"># 找到这一行，然后新增下述代码</span><br>STATICFILES_DIRS = [<br>    os.path.join(BASE_DIR, <span class="hljs-string">&#x27;statics&#x27;</span>),<span class="hljs-comment"># 获取静态文件在服务端的绝对路径</span><br>]<br><br><span class="hljs-comment"># STATIC_URL = &#x27;/static/&#x27;就是为静态文件的绝对路径起了一个别名，以后我们只需要用路径/static/即可</span><br></code></pre></td></tr></table></figure><p><strong>第二步：</strong></p><p>在项目根目录下新增文件夹statics，为了更便于管理，可以在statics下新建子文件夹css、js、img等</p><p><strong>第三步：</strong></p><p>新建模板文件index.html,在该文件中对静态文件的引用如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 引用css文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/my.css&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是红色的，点我就绿<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 引用图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/img/rb.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 引用js文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/my.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​综上，在配置完settings.py后，所有的静态文件路径都可以采用别名&#x2F;static&#x2F;作为起始，这在一定程度上会有利于程序的扩展性，但如果我们在项目后期维护时，连&#x2F;static&#x2F;这个值也需要修改，那意味着所有模板文件中也都需要跟着改了，扩展性依然很差，为此，django在一个名为static.py的文件中定义了标签static、get_static_prefix，二者都可以解决该问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注意：必须先加载文件static.py--&gt;</span><br>    &#123;% load static %&#125;<br>    <span class="hljs-comment">&lt;!--注意：此处的static是一个定义在static.py中的一个标签，名字与文件名一样而已，不要搞混--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;css/my.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是红色的，点我就绿<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;img/rb.jpeg&#x27; %&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 某个文件被多处引用，也可以将该文件的引用存为一个变量&gt;</span><br><span class="hljs-comment">&#123;% load static %&#125;</span><br><span class="hljs-comment">&#123;% static &quot;images/hi.jpg&quot; as myphoto %&#125;</span><br><span class="hljs-comment">&lt;img src=&quot;&#123;&#123; myphoto &#125;&#125;&quot;&gt;&lt;/img&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#123;% load static %&#125;</span><br><span class="hljs-comment">&lt;script src=&quot;&#123;% static &#x27;js/jquery-3.3.1.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">&lt;script src=&quot;&#123;% static &#x27;js/my.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;/body&gt;</span><br><span class="hljs-comment">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>​标签static会接收传入的参数，然后这根据settings.py中变量 STATIC_URL 的值拼接出一个完整的路径，如果STATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘，那么 <code>href = &quot;&#123;% static 'css/my.css' %&#125;&quot;</code> 会被渲染成href&#x3D;”&#x2F;static&#x2F;css&#x2F;my.css”，如果 STATIC_URL  &#x3D;  ‘&#x2F;static123&#x2F;‘，那么 <code>href = &quot;&#123;% static 'css/my.css' %&#125;&quot;</code> 会被渲染成href&#x3D;”&#x2F;static123&#x2F;css&#x2F;my.css”。</p><p>​标签get_static_prefix也可以完成同样的效果，只不过用法不同。我们不能为标签get_static_prefix传参，因为标签get_static_prefix代表的只是settings.py中STATIC_URL的值，所以我们需要做的是在get_static_prefix的基础上自行拼接路径，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注意：同样需要先加载文件static.py--&gt;</span><br>    &#123;% load static %&#125;<br>    <span class="hljs-comment">&lt;!--使用标签get_static_prefix拼接路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% get_static_prefix %&#125;css/my.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是红色的，点我就绿<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% get_static_prefix %&#125;img/rb.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><br>&#123;% load static %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% get_static_prefix %&#125;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% get_static_prefix %&#125;js/my.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果STATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘，那么<code>href=&quot;&#123;% get_static_prefix %&#125;css/my.css&quot;</code>会被渲染成href&#x3D;”&#x2F;static&#x2F;css&#x2F;my.css”，其它同理。</p>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之视图层</title>
    <link href="/2020/03/23/0504-Django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
    <url>/2020/03/23/0504-Django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="一、视图层简介"><a href="#一、视图层简介" class="headerlink" title="一、视图层简介"></a>一、视图层简介</h2><p>​一个视图函数（类），简称视图，是一个简单的 Python 函数（类），它接受 Web 请求并且返回 Web 响应。响应可以是一张网页的 HTML 内容，一个重定向，一个404错误，一个XML文档，或者一张图片。</p><p>​无论视图本身包含什么逻辑，都要返回响应。代码写在哪里也无所谓，只要它在你当前项目目录下面。除此之外没有更多的要求了。为了将代码放在某处，大家约定成俗将视图放置在项目（project）或应用程序（app）目录中的名为 views.py 的文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),<br>    url(<span class="hljs-string">r&#x27;^index/&#x27;</span>, views.index),<span class="hljs-comment"># views.index 为视图函数，当在浏览器访问 127.0.0.1:8000/index 时，会通过该路由找到对应的视图函数</span><br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py  存放视图函数</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):  <span class="hljs-comment"># 试图函数必须接收一个 request 参数，所有跟请求相关的数据都封装到了这个request对象里面</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;进行对应的逻辑处理...&quot;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是首页&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="二、FBV和CBV"><a href="#二、FBV和CBV" class="headerlink" title="二、FBV和CBV"></a>二、FBV和CBV</h2><h3 id="2-1-FBV"><a href="#2-1-FBV" class="headerlink" title="2.1 FBV"></a><strong>2.1 FBV</strong></h3><p>FBV 是基于函数的视图（function base view），即视图层的相关逻辑处理接口都是基于函数的。下面我们根据一个用户登录的示例来看一下FBV的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^login/&quot;</span>, views.login)<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 1.判断浏览器发送的请求是 get 还是 post</span><br>    <span class="hljs-comment">#       如果是get：是用户第一次访问，直接返回登录的页面</span><br>    <span class="hljs-comment">#       如果是post：是用户发数据过来了，接收用户名和密码</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-comment"># 2.判断用户名密码是否正确，正确返回首页，错误返回提示信息</span><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--templates/login.html--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>                用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>                密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br>&#123;# templates/index.py #&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;color: red&quot;</span>&gt;</span>欢迎登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-CBV"><a href="#2-2-CBV" class="headerlink" title="2.2 CBV"></a><strong>2.2 CBV</strong></h3><p>CBV是基于类的视图（class base view），采用CBV可以引入面向对象的思想对数据进行更高程度的封装。使用CBV来编写视图层如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br>    <span class="hljs-comment"># 如果是get请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到get请求了&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    <span class="hljs-comment"># 如果是post请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到post请求了&quot;</span>)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^login/&quot;</span>, views.Login.as_view()),  <span class="hljs-comment"># 固定写法</span><br>]<br></code></pre></td></tr></table></figure><p>在使用CBV方式构建视图层时，要求必须自己先定义一个类，在路由层调用该类的实例化对象时，也要使用django自己的实例化方式，即 “类名.as_view()”。</p><h3 id="2-3-CBV源码剖析"><a href="#2-3-CBV源码剖析" class="headerlink" title="2.3 CBV源码剖析"></a><strong>2.3 CBV源码剖析</strong></h3><p>我们根据CBV的源码来详细了解一下django内部究竟是怎么实现这个机制的。</p><p><strong>第一步：</strong></p><p>浏览器发送请求后，先来到了路由层，路由层根据请求的路由调用了对应的视图，即 Login 类中的 as_view() 方法，显然我们自己定义的Login类中是没有这个方法的，所以该方法肯定是使用的父类 View 中的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># base.py</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">View</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Intentionally simple parent class for all views. Only implements</span><br><span class="hljs-string">    dispatch-by-method and simple sanity checking.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    http_method_names = [<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;put&#x27;</span>, <span class="hljs-string">&#x27;patch&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;head&#x27;</span>, <span class="hljs-string">&#x27;options&#x27;</span>, <span class="hljs-string">&#x27;trace&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Constructor. Called in the URLconf; can contain helpful extra</span><br><span class="hljs-string">        keyword arguments, and other things.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Go through keyword arguments, and either save their values to our</span><br>        <span class="hljs-comment"># instance, or raise an error.</span><br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> six.iteritems(kwargs):<br>            <span class="hljs-built_in">setattr</span>(<span class="hljs-variable language_">self</span>, key, value)<br><br><span class="hljs-meta">    @classonlymethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">as_view</span>(<span class="hljs-params">cls, **initkwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Main entry point for a request-response process.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> initkwargs:<br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> cls.http_method_names:<br>                <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;You tried to pass in the %s method name as a &quot;</span><br>                                <span class="hljs-string">&quot;keyword argument to %s(). Don&#x27;t do that.&quot;</span><br>                                % (key, cls.__name__))<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, key):<br>                <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;%s() received an invalid keyword %r. as_view &quot;</span><br>                                <span class="hljs-string">&quot;only accepts arguments that are already &quot;</span><br>                                <span class="hljs-string">&quot;attributes of the class.&quot;</span> % (cls.__name__, key))<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>(<span class="hljs-params">request, *args, **kwargs</span>):<br>            <span class="hljs-variable language_">self</span> = cls(**initkwargs)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;get&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, <span class="hljs-string">&#x27;head&#x27;</span>):<br>                <span class="hljs-variable language_">self</span>.head = <span class="hljs-variable language_">self</span>.get<br>            <span class="hljs-variable language_">self</span>.request = request<br>            <span class="hljs-variable language_">self</span>.args = args<br>            <span class="hljs-variable language_">self</span>.kwargs = kwargs<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.dispatch(request, *args, **kwargs)<br>        view.view_class = cls<br>        view.view_initkwargs = initkwargs<br><br>        <span class="hljs-comment"># take name and docstring from class</span><br>        update_wrapper(view, cls, updated=())<br><br>        <span class="hljs-comment"># and possible attributes set by decorators</span><br>        <span class="hljs-comment"># like csrf_exempt from dispatch</span><br>        update_wrapper(view, cls.dispatch, assigned=())<br>        <span class="hljs-keyword">return</span> view<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-comment"># Try to dispatch to the right method; if a method doesn&#x27;t exist,</span><br>        <span class="hljs-comment"># defer to the error handler. Also defer to the error handler if the</span><br>        <span class="hljs-comment"># request method isn&#x27;t on the approved list.</span><br>        <span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.http_method_names:<br>            handler = <span class="hljs-built_in">getattr</span>(<span class="hljs-variable language_">self</span>, request.method.lower(), <span class="hljs-variable language_">self</span>.http_method_not_allowed)<br>        <span class="hljs-keyword">else</span>:<br>            handler = <span class="hljs-variable language_">self</span>.http_method_not_allowed<br>        <span class="hljs-keyword">return</span> handler(request, *args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">http_method_not_allowed</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        logger.warning(<br>            <span class="hljs-string">&#x27;Method Not Allowed (%s): %s&#x27;</span>, request.method, request.path,<br>            extra=&#123;<span class="hljs-string">&#x27;status_code&#x27;</span>: <span class="hljs-number">405</span>, <span class="hljs-string">&#x27;request&#x27;</span>: request&#125;<br>        )<br>        <span class="hljs-keyword">return</span> http.HttpResponseNotAllowed(<span class="hljs-variable language_">self</span>._allowed_methods())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">options</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Handles responding to requests for the OPTIONS HTTP verb.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        response = http.HttpResponse()<br>        response[<span class="hljs-string">&#x27;Allow&#x27;</span>] = <span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-variable language_">self</span>._allowed_methods())<br>        response[<span class="hljs-string">&#x27;Content-Length&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_allowed_methods</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [m.upper() <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.http_method_names <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(<span class="hljs-variable language_">self</span>, m)]<br></code></pre></td></tr></table></figure><p><strong>第二步：</strong></p><p>我们能在父类中找到 as_view() 方法，发现该方法最后返回的是一个  view()  函数，我们再详细看一下 view 中做了什么事情。 view  函数中先实例化了一个当前自己定义的类的对象 self &#x3D; cls(**initkwargs)，再将所有接收到的参数以及请求相关的内容request都传给了 dispatch() 函数。</p><p><strong>第三步：</strong></p><p>我们继续来到 dispatch() 函数中，首先将请求方式（post、get等）小写话处理，再去 http_method_names 中匹配是否有该种请求方式，如果有，就根据映射去执行对应的函数，如果没有就返回错误信息，这就是为什么我们在类中编写了get和post同名的函数后，不同的请求会执行不同的函数的原因了，当然我们也可以在类中定义自己的 dispatch() 方法，根据自己的需求做出相关的处理。</p><p><strong>第四步：</strong> </p><p>dispatch() 函数处理完第三步的逻辑后，最终会返回一个 handler，handler 是 http_method_not_allowed() 函数的一个返回值，是一个 HttpResponse 格式的值。</p><p>所以，根据上述源码的分析，我们简单总结以下CBV的执行流程：</p><ol><li><p>收到请求以后，根据urls.py去找对应的视图，即 类名.as_view()</p></li><li><p>来到视图层，找到对应的类，如果没有找到 as_view() 方法，就去执行继承的父类的 as_view() 方法，进一步执行 as_view() 中的 view()</p></li><li><p>执行view函数</p><ul><li><p>实例化自己写的类   self &#x3D; cls(**initkwargs)</p></li><li><p>将接收到的请求相关的内容传给实例化对象      self.request &#x3D; request</p></li><li><p>执行 self.dispatch(request, *args, **kwargs)</p><ul><li>执行父类中的 dispatch 方法，判断请求是否被允许，最后返回 handler(request, *args, **kwargs)，如果允许：handler &#x3D; 通过反射获取 get  post 等方法 ；如果不允许：handler &#x3D; 不允许的方法</li><li>返回HttpResponse对象</li></ul></li><li><p>返回HttpResponse对象 给django</p></li></ul></li></ol><p>我们可以在类中定义自己的 dispatch 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之前可以做一些处理&quot;</span>)<br>        ret = <span class="hljs-built_in">super</span>().dispatch(request, *args, **kwargs)  <span class="hljs-comment"># 必须接收并返回这个HttpResponse给django</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之后可以做一些处理&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># 将dispatch处理完的HttpResponse返回给django</span><br><br>    <span class="hljs-comment"># 如果是get请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到get请求了&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    <span class="hljs-comment"># 如果是post请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到post请求了&quot;</span>)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># 启动项目进行测试，分别发送一个get请求和post请求xiang<br>请求来之前可以做一些处理<br>接收到get请求了<br>请求来之后可以做一些处理<br><span class="hljs-string">[12/Mar/2020 16:13:36]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /login/ HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">624</span><br><span class="hljs-string">[12/Mar/2020 16:13:55]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span> /login/ HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">187</span><br>请求来之前可以做一些处理<br>接收到post请求了<br>请求来之后可以做一些处理<br></code></pre></td></tr></table></figure><p>可以观察到，dispatch 是在最先被执行的，换而言之，来到视图层找到对应的类后，先执行 dispatch  方法，后根据请求执行对应的视图，其实 dispatch 可以充当装饰器的功能。</p><p>了解CBV的实际处理机制后，我们还可根据实际的需要做更多的自定制，如我们自定义允许处理的请求方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span>(<span class="hljs-title class_ inherited__">View</span>):<br>    <span class="hljs-comment"># 父类中的请求方式</span><br>    <span class="hljs-comment"># http_method_names = [&#x27;get&#x27;, &#x27;post&#x27;, &#x27;put&#x27;, &#x27;patch&#x27;, &#x27;delete&#x27;, &#x27;head&#x27;, &#x27;options&#x27;, &#x27;trace&#x27;]</span><br>    <span class="hljs-comment"># 自定义请求方式，只能处理get请求</span><br>    http_method_names = [<span class="hljs-string">&#x27;get&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之前可以做一些处理&quot;</span>)<br>        ret = <span class="hljs-built_in">super</span>().dispatch(request, *args, **kwargs)  <span class="hljs-comment"># 必须接收并返回这个HttpResponse给django</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之后可以做一些处理&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># 将dispatch处理完的HttpResponse返回给django</span><br><br>    <span class="hljs-comment"># 如果是get请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到get请求了&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    <span class="hljs-comment"># 如果是post请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到post请求了&quot;</span>)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># 启动项目进行测试，分别发送一个get请求和post请求，get可以正常执行，post报错，该请求方式不允许<br>请求来之前可以做一些处理<br>接收到get请求了<br>请求来之后可以做一些处理<br><span class="hljs-string">[12/Mar/2020 16:23:23]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /login/ HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">624</span><br>Method Not Allowed (POST): /login/<br><span class="hljs-string">[12/Mar/2020 16:23:30]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span> /login/ HTTP/1.1&quot;</span> <span class="hljs-number">405</span> <span class="hljs-number">0</span><br>请求来之前可以做一些处理<br>请求来之后可以做一些处理<br></code></pre></td></tr></table></figure><h3 id="2-4-视图层添加装饰器"><a href="#2-4-视图层添加装饰器" class="headerlink" title="2.4 视图层添加装饰器"></a><strong>2.4 视图层添加装饰器</strong></h3><h4 id="2-4-1-对于FBV"><a href="#2-4-1-对于FBV" class="headerlink" title="2.4.1 对于FBV"></a><strong>2.4.1 对于FBV</strong></h4><p>FBV使用装饰器和正常的函数使用装饰器没有任何区别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-comment"># 用于计算执行视图函数花费的时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)  <span class="hljs-comment"># 执行的函数必须返会一个HttpResponse对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行花费了<span class="hljs-subst">&#123;time.time() - start&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># HttpResponse对象必须返回给django</span><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 1.判断浏览器发送的请求是 get 还是 post</span><br>    <span class="hljs-comment">#       如果是get：是用户第一次访问，直接返回登录的页面</span><br>    <span class="hljs-comment">#       如果是post：是用户发数据过来了，接收用户名和密码</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-comment"># 2.判断用户名密码是否正确，正确返回首页，错误返回提示页面</span><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^login/&quot;</span>, views.login)<br>]<br></code></pre></td></tr></table></figure><h4 id="2-4-2-对于CBV"><a href="#2-4-2-对于CBV" class="headerlink" title="2.4.2 对于CBV"></a><strong>2.4.2 对于CBV</strong></h4><p>给CBV添加装饰器需要用到django自带的方法，有以下三种方式添加装饰器</p><ul><li>直接对定义的类添加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">from</span> django.utils.decorators <span class="hljs-keyword">import</span> method_decorator<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 用于计算执行视图函数花费的时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)  <span class="hljs-comment"># 执行的函数必须返会一个HttpResponse对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行花费了<span class="hljs-subst">&#123;time.time() - start&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># HttpResponse对象必须返回给django</span><br><br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@method_decorator(<span class="hljs-params">timer, name=<span class="hljs-string">&quot;get&quot;</span></span>)  </span><span class="hljs-comment"># 给get方法添加装饰器</span><br><span class="hljs-meta">@method_decorator(<span class="hljs-params">timer, name=<span class="hljs-string">&quot;post&quot;</span></span>)  </span><span class="hljs-comment"># 给post方法添加装饰器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之前可以做一些处理&quot;</span>)<br>        ret = <span class="hljs-built_in">super</span>().dispatch(request, *args, **kwargs)  <span class="hljs-comment"># 必须接收并返回这个HttpResponse给django</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之后可以做一些处理&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># 将dispatch处理完的HttpResponse返回给django</span><br><br>    <span class="hljs-comment"># 如果是get请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到get请求了&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    <span class="hljs-comment"># 如果是post请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到post请求了&quot;</span>)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^login/&quot;</span>, views.Login.as_view()),  <span class="hljs-comment"># 固定写法</span><br>]<br></code></pre></td></tr></table></figure><ul><li>直接对函数添加装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">from</span> django.utils.decorators <span class="hljs-keyword">import</span> method_decorator<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 用于计算执行视图函数花费的时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)  <span class="hljs-comment"># 执行的函数必须返会一个HttpResponse对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行花费了<span class="hljs-subst">&#123;time.time() - start&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># HttpResponse对象必须返回给django</span><br><br>    <span class="hljs-keyword">return</span> inner<br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之前可以做一些处理&quot;</span>)<br>        ret = <span class="hljs-built_in">super</span>().dispatch(request, *args, **kwargs)  <span class="hljs-comment"># 必须接收并返回这个HttpResponse给django</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之后可以做一些处理&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># 将dispatch处理完的HttpResponse返回给django</span><br><br>    <span class="hljs-comment"># 如果是get请求，就执行这个函数</span><br><span class="hljs-meta">    @method_decorator(<span class="hljs-params">timer</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到get请求了&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    <span class="hljs-comment"># 如果是post请求，就执行这个函数</span><br><span class="hljs-meta">    @method_decorator(<span class="hljs-params">timer</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到post请求了&quot;</span>)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>无论是对函数还是对类，有多少个方法就要添加多少个装饰器。换个思路来思考，根据对CBV源码的分析，我们可以知道对于后面的逻辑操作函数，都是从dispatch中映射执行的，也就是说我们可以对dispatch添加装饰器，这样后面能够通过映射执行到的逻辑处理函数就都可以被装饰器作用到了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">from</span> django.utils.decorators <span class="hljs-keyword">import</span> method_decorator<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 用于计算执行视图函数花费的时间</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time.time()<br>        ret = fn(*args, **kwargs)  <span class="hljs-comment"># 执行的函数必须返会一个HttpResponse对象</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;执行花费了<span class="hljs-subst">&#123;time.time() - start&#125;</span>秒&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># HttpResponse对象必须返回给django</span><br><br>    <span class="hljs-keyword">return</span> inner<br>    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span>(<span class="hljs-title class_ inherited__">View</span>):<br><br><span class="hljs-meta">@method_decorator(<span class="hljs-params">timer</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之前可以做一些处理&quot;</span>)<br>        ret = <span class="hljs-built_in">super</span>().dispatch(request, *args, **kwargs)  <span class="hljs-comment"># 必须接收并返回这个HttpResponse给django</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求来之后可以做一些处理&quot;</span>)<br>        <span class="hljs-keyword">return</span> ret  <span class="hljs-comment"># 将dispatch处理完的HttpResponse返回给django</span><br><br>    <span class="hljs-comment"># 如果是get请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到get请求了&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    <span class="hljs-comment"># 如果是post请求，就执行这个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;接收到post请求了&quot;</span>)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="三、请求对象（HttpRequest）"><a href="#三、请求对象（HttpRequest）" class="headerlink" title="三、请求对象（HttpRequest）"></a>三、请求对象（HttpRequest）</h2><p>​Django将http协议请求报文中的请求行、首部信息、内容抓提封装到了HttpRequest对象中，django会将HttpRequest对象当做参数传给视图函数的第一个参数request，在视图函数中，通过访问该对象的属性便可以提取http协议的请求数据。由于HttpRequest的方法和属性较多，为了方便记忆，我们可以进行简单分组。</p><h3 id="3-1、method"><a href="#3-1、method" class="headerlink" title="3.1、method"></a><strong>3.1、method</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">一<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.method</span><br>　　获取请求使用的方法（值为纯大写的字符串格式）。例如：<span class="hljs-string">&quot;GET&quot;</span>、<span class="hljs-string">&quot;POST&quot;</span><br>   应该通过该属性的值来判断请求方法<br><br>二<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.GET</span><br>　　值为一个类似于字典的QueryDict对象，封装了GET请求的所有参数，可通过HttpRequest<span class="hljs-selector-class">.GET</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;键&#x27;</span>)获取相对应的值<br>  <br>三<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.POST</span><br>   值为一个类似于字典的QueryDict对象，封装了POST请求所包含的表单数据，可通过HttpRequest<span class="hljs-selector-class">.POST</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;键&#x27;</span>)获取相对应的值<br>   <br>   针对表单中checkbox类型的input标签、select标签提交的数据，键对应的值为多个，需要用：HttpRequest<span class="hljs-selector-class">.POST</span><span class="hljs-selector-class">.getlist</span>(<span class="hljs-string">&quot;hobbies&quot;</span>)获取存有多个值的列表,同理也有HttpRequest<span class="hljs-selector-class">.GET</span><span class="hljs-selector-class">.getlist</span>(<span class="hljs-string">&quot;键&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们以一个用户注册的例子来研究一下具体的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(request.method)  <span class="hljs-comment"># 查看浏览器请求的方法</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 如果用户发的是get请求，返回注册页面给用户注册</span><br><br>        <span class="hljs-built_in">print</span>(request.GET)  <span class="hljs-comment"># &lt;QueryDict: &#123;&#125;&gt;</span><br><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;register.html&quot;</span>)<br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-comment"># 如果是post请求，证明用户已经填写好了，接收用户提交的数据</span><br>        <span class="hljs-comment"># 表单内用户填写的数据会封装在 request.POST中</span><br><br>        <span class="hljs-built_in">print</span>(request.POST)  <span class="hljs-comment"># &lt;QueryDict: &#123;&#x27;name&#x27;: [&#x27;cdc&#x27;], &#x27;pwd&#x27;: [&#x27;123456&#x27;], &#x27;hobby&#x27;: [&#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;rap&#x27;]&#125;&gt;</span><br>        <br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        hobby = request.POST.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br>        <span class="hljs-built_in">print</span>(name)  <span class="hljs-comment"># cdc</span><br>        <span class="hljs-built_in">print</span>(pwd)  <span class="hljs-comment"># 123456</span><br>        <span class="hljs-built_in">print</span>(hobby)  <span class="hljs-comment"># [&#x27;sing&#x27;, &#x27;dance&#x27;, &#x27;rap&#x27;]</span><br>        <br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;提交成功&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^register/&quot;</span>, views.register), <br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/register.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入昵称&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sing&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dance&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dance&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rap&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rap&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basketball&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>补充：我们知道如果前端想要给后端发送数据，可以通过 form表单以post的形式实现，或者使用ajax实现，其实还可以直接将数据添加到请求的 url 中，但是这样就会把数据在页面上暴露，是十分不安全的，但是对于一些不敏感的信息，可以很方便的通过 url 使用 get 请求发送给后端，后端可以直接从url中取值。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># url 使用 ? 和 &amp; 来添加参数，例如 http:<span class="hljs-comment">//127.0.0.1:8000/test_get?a=1&amp;b=2&amp;c=3&amp;c=4&amp;c=5</span></span><br><span class="hljs-meta"># 路由部分是 http:<span class="hljs-comment">//127.0.0.1:8000/test_get，路由层只识别 ? 号前面的部分，对后面的参数全部忽略</span></span><br><span class="hljs-meta"># 所以在路由层还是可以找到对应的视图函数的</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_demo</span>(<span class="hljs-params">request</span>):<br><br>    <span class="hljs-built_in">print</span>(request.method)<br>    <span class="hljs-built_in">print</span>(request.path)  <span class="hljs-comment"># 获取访问的url  结果为 /test/get/ 可见将url中的参数都忽略了</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.GET)  <span class="hljs-comment"># &lt;QueryDict: &#123;&#x27;a&#x27;: [&#x27;1&#x27;], &#x27;b&#x27;: [&#x27;2&#x27;], &#x27;c&#x27;: [&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]&#125;&gt;</span><br><br>        <span class="hljs-comment"># 通过GET来取值</span><br>        a = request.GET.get(<span class="hljs-string">&quot;a&quot;</span>)<br>        b = request.GET.get(<span class="hljs-string">&quot;b&quot;</span>)<br>        c = request.GET.getlist(<span class="hljs-string">&quot;c&quot;</span>)<br>        <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br>        <span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 2</span><br>        <span class="hljs-built_in">print</span>(c)  <span class="hljs-comment"># [&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span><br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;OK&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^test/get/&quot;</span>, views.get_demo),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas"># 测试<br># 启动项目，浏览器输入 http://127.0.0.1:8000/test/get/?a=1<span class="hljs-variable">&amp;b</span>=2<span class="hljs-variable">&amp;c</span>=3<span class="hljs-variable">&amp;c</span>=4<span class="hljs-variable">&amp;c</span>=5 进行访问<br></code></pre></td></tr></table></figure><h3 id="3-2、body"><a href="#3-2、body" class="headerlink" title="3.2、body"></a><strong>3.2、body</strong></h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stata">一.HttpRequest.body<br>   当浏览器基于http协议的<span class="hljs-keyword">POST</span>方法提交数据时，数据会被放到请求体中发送给django，django会将接收到的请求体数据存放于HttpRequest.body属性中，因为该属性的值为Bytes类型，所以通常情况下直接处理Bytes、并从中提取有用数据的操作是复杂而繁琐的，好在django会对它做进一步的处理与封装以便我们更为方便地提取数据，比如<br>   对于<span class="hljs-keyword">form</span>表单来说，提交数据的常用方法为GET与<span class="hljs-keyword">POST</span><br>   1：如果表单属性method=&#x27;GET&#x27;,那么在提交表单时，表单内数据不会存放于请求体中，而是会将表单数据按照k1=v1&amp;k2=v2&amp;k3=v3的格式放到url中，然后发送给django，django会将这些数据封装到request.GET中，注意此时的request.body为空、无用<br>   2：如果表单属性method=&#x27;<span class="hljs-keyword">POST</span>&#x27;，那么在提交表单时，表单内的所有数据都会存放于请求体中，在发送给django后会封装到request.body里，此时django为了方便我们提取数据，会request.body的数据进行进一步的处理，具体如何处理呢，需要从<span class="hljs-keyword">form</span>表单提交数据的编码格式说起：<br>    <span class="hljs-keyword">form</span>表单对提交的表单数据有两种常用的编码格式，可以通过属性enctype进行设置，如下<br>    编码格式1(默认的编码格式):enctype=<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span> <br>    编码格式2(使用<span class="hljs-keyword">form</span>表单上传文件时只能用该编码):enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <br>    如果<span class="hljs-keyword">form</span>表单提交数据是按照编码格式1,那么request.body中数据的格式类似于GET方法的数据格式，如上述用户注册示例中，用户填完信息提交数据后，后端输入request.body的结果为b&#x27;name=cdc&amp;<span class="hljs-keyword">pwd</span>=123456&amp;hobby=sing&amp;hobby=dance&amp;hobby=rap&#x27;，此时django会将request.body中的数据提取出来封装到request.<span class="hljs-keyword">POST</span>中方便我们提取<br>    如果<span class="hljs-keyword">form</span>表单提交数据是按照编码格式2,那么request.body中数据的格式为b&#x27;------WebKitFormBoundaryKtcwuksQltpNprep\r\nContent-Disposition: <span class="hljs-keyword">form</span>-data;......&#x27;,，此时django会将request.body中的数据提取出来封装到request.<span class="hljs-keyword">POST</span>中，将上传的文件数据专门提取出来封装到request.FILES属性中<br>    强调：毫无疑问，编码格式2的数据量要大于编码格式1，如果无需上传文件，还是推荐使用更为精简的编码格式1<br>    <br>    我们除了可以采用<span class="hljs-keyword">form</span>表单向django提交数据外，还可以采用ajax技术，ajax可以提交的数据格式有：1、编码格式1 2、编码格式2 3、json，当ajax采用<span class="hljs-keyword">POST</span>方法提交前两种格式的数据时，django的处理方案同上，但是当ajax采用<span class="hljs-keyword">POST</span>方法提交json格式的数据时，django会将接收到的数据存放于HttpRequest.body，此时需要我们自己对HttpRequest.body属性值做反序列化操作，<br>具体的，我们在讲解ajax时再做具体介绍<br>    <br>二.HttpRequest.FILES<br>   如果使用<span class="hljs-keyword">form</span>表单<span class="hljs-keyword">POST</span>上传文件的话，文件数据将包含在HttpRequest.FILES属性中。<br><br>　　该属性值为一个类似于字典的对象，可以包含多组key:value（对应多个上传的文件），其中每个key为&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;&quot;</span> /&gt; 中name属性的值，而value则为对应的文件数据<br>　　强调：HttpRequest.FILES 只有在请求的方法为<span class="hljs-keyword">POST</span> 且提交的&lt;<span class="hljs-keyword">form</span>&gt; 带有enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象。<br></code></pre></td></tr></table></figure><p>form表单上传文件示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># viwes.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><span class="hljs-keyword">from</span> Django视图层.settings <span class="hljs-keyword">import</span> BASE_DIR<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.body)<br><br>        <span class="hljs-comment"># 从request.POST中获取用户名</span><br>        name = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        <span class="hljs-built_in">print</span>(name)<br><br>        <span class="hljs-comment"># 从request.FILES中获取文件内容</span><br>        file_obj = request.FILES.get(<span class="hljs-string">&quot;avator&quot;</span>)<br>        f_name = file_obj.name  <span class="hljs-comment"># 获取文件名</span><br><br>        file_name = os.path.join(BASE_DIR, f_name)  <span class="hljs-comment"># 文件的存储位置</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> file_obj.chunks():  <span class="hljs-comment"># 从文件中一点一点取</span><br>                f.write(chunk)<br><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;upload.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^upload/&quot;</span>, views.upload),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/upload.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;avator&quot;</span>&gt;</span>头像：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;avator&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;avator&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3、path"><a href="#3-3、path" class="headerlink" title="3.3、path"></a><strong>3.3、path</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">一<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.path</span><br>　　获取url地址的路径部分，只包含路径部分<br><br>二<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.get_full_path</span>()<br>　　获取url地址的完整path，既包含路径又包含参数部分<br><br>如果请求地址是http:<span class="hljs-comment">//127.0.0.1:8001/order/?name=egon&amp;age=10#_label3，</span><br>HttpRequest.path的值为<span class="hljs-string">&quot;/order/&quot;</span><br>HttpRequest<span class="hljs-selector-class">.get_full_path</span>()的值为<span class="hljs-string">&quot;/order/?name=egon&amp;age=10&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">path</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(request.path)  <span class="hljs-comment"># /test/path</span><br>    <span class="hljs-built_in">print</span>(request.get_full_path())  <span class="hljs-comment"># /test/path?a=1&amp;b=2&amp;c=3</span><br><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^test/path&quot;</span>, views.path),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 测试</span><br>浏览器访问 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/test/</span>path?a=<span class="hljs-number">1</span>&amp;b=<span class="hljs-number">2</span>&amp;c=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="3-4、其他常用属性及方法"><a href="#3-4、其他常用属性及方法" class="headerlink" title="3.4、其他常用属性及方法"></a><strong>3.4、其他常用属性及方法</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus">一<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.META</span><br> 　 值为包含了HTTP协议的请求头数据的Python字典，字典中的key及对应值的解释如下<br>    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。<br>    CONTENT_TYPE —— 请求的正文的MIME类型。<br>    HTTP_ACCEPT —— 响应可接收的Content-Type。<br>    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。<br>    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。<br>    HTTP_HOST —— 客服端发送数据的目标主机与端口<br>    HTTP_REFERER —— Referring 页面。<br>    HTTP_USER_AGENT —— 客户端使用的软件版本信息<br>    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。<br>    REMOTE_ADDR —— 客户端的IP地址。<br>    REMOTE_HOST —— 客户端的主机名。<br>    REMOTE_USER —— 服务器认证后的用户。<br>    REQUEST_METHOD —— 一个字符串，例如<span class="hljs-string">&quot;GET&quot;</span> 或<span class="hljs-string">&quot;POST&quot;</span>。<br>    SERVER_NAME —— 服务器的主机名。<br>    SERVER_PORT —— 服务器的端口（是一个字符串）。<br>    <br> 　 从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，HTTP协议的请求头数据转换为 META 的键时，都会<br>    <span class="hljs-number">1</span>、将所有字母大写<br>    <span class="hljs-number">2</span>、将单词的连接符替换为下划线<br>    <span class="hljs-number">3</span>、加上前缀HTTP_。<br>    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。<br>   <br>注意：下述常用属性暂且了解即可，待我们讲到专门的知识点时再专门详细讲解<br>二<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.COOKIES</span><br>　　一个标准的Python 字典，包含所有的cookie。键和值都为字符串。<br><br>三<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.session</span><br> 　一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。<br><br>四<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.user</span>(用户认证组件下使用)<br><br>　　一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。<br><br>五<span class="hljs-selector-class">.HttpRequest</span><span class="hljs-selector-class">.is_ajax</span>()<br><br>　　如果请求是通过XMLHttpRequest 发起的，则返回True，方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串<span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>。<br><br>　　大部分现代的 JavaScript 库都会发送这个头部。如果你编写自己的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 <span class="hljs-built_in">is_ajax</span>() 可以工作。<br><br>　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware，<br>   你应该使用 <span class="hljs-built_in">vary_on_headers</span>(<span class="hljs-string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>) 装饰你的视图以让响应能够正确地缓存。<br></code></pre></td></tr></table></figure><h2 id="四、响应对象（HttpResponse）"><a href="#四、响应对象（HttpResponse）" class="headerlink" title="四、响应对象（HttpResponse）"></a>四、响应对象（HttpResponse）</h2><p>​响应对象可以是任何形式的内容，比如一个HTML文件的内容，一个重定向，一个404错误，一个XML文档或者一张图片等等。总之无论视图本身包含什么逻辑，都要返回响应。django中主要的响应方式有三种，俗称响应三件套。</p><h3 id="4-1、HttpResponse"><a href="#4-1、HttpResponse" class="headerlink" title="4.1、HttpResponse"></a><strong>4.1、HttpResponse</strong></h3><p>括号内直接跟一个字符串作为响应内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># return HttpResponse(&quot;OK&quot;)  # 直接返回一个字符串</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;&lt;h1&gt;OK&lt;/h1&gt;&quot;</span>)  <span class="hljs-comment"># 也可以返回html格式代码的字符串，浏览器会自动转换并渲染</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index&quot;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><h3 id="4-2、render"><a href="#4-2、render" class="headerlink" title="4.2、render"></a><strong>4.2、render</strong></h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">render</span>(request, template_name[, context]）<br>参数：<br>    <span class="hljs-number">1</span>、request：用于生成响应的请求对象，固定必须传入的第一个参数<br><br>    <span class="hljs-number">2</span>、template_name：要使用的模板的完整名称，必须传入，<span class="hljs-keyword">render</span>默认会去templates目录下查找模板文件<br><br>    <span class="hljs-number">3</span>、context：可选参数，可以传入一个字典用来替换模块文件中的变量，模板中的变量名要和传入的字典的键保持一致<br><br>综上，<span class="hljs-keyword">render</span>的功能可以总结为：根据给定字典渲染模板文件，并返回一个渲染后的 HttpResponse对象。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># return render(request, &quot;index.html&quot;)  # 直接返回模板</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>, &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cdc&quot;</span>&#125;)  <span class="hljs-comment"># 返回模板并替换模板中的变量</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index&quot;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- templates/index.html --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;color: red&quot;</span>&gt;</span>欢迎登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        &#123;&#123; name &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3、redirect"><a href="#4-3、redirect" class="headerlink" title="4.3、redirect"></a><strong>4.3、redirect</strong></h3><p>返回重定向信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 返回重定向信息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    ...<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/some/url/&#x27;</span>)<br><br><span class="hljs-comment"># 重定向的地址也可以是一个完整的URL：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    ...<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span>)　<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> redirect<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)  <span class="hljs-comment"># 直接返回模板</span><br>   <br>   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/index/&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> Django视图层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index&quot;</span>, views.index),<br>    url(<span class="hljs-string">r&quot;^login&quot;</span>, views.login),<br>]<br></code></pre></td></tr></table></figure><p><strong>重定向的实质</strong></p><img src="/img/blog/about_django/重定向实质.png" style="zoom:67%;" />  <p>首先浏览器访问的是 <a href="http://127.0.0.1:8000/login/%EF%BC%8C%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BE%BE%E7%9B%B8%E5%85%B3%E7%9A%84%E8%A7%86%E5%9B%BE%E5%90%8E%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0">http://127.0.0.1:8000/login/，请求到达相关的视图后，跳转到</a> “&#x2F;index&#x2F;“，而对于浏览器而言，实际上的做的事情是再访问一下<a href="http://127.0.0.1:8000/index/">http://127.0.0.1:8000/index/</a></p><p><strong>重定向状态码</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">一、<span class="hljs-number">301</span>和<span class="hljs-number">302</span>的异同。<br>   <span class="hljs-number">1</span>、相同之处：<br>   <span class="hljs-number">301</span>和<span class="hljs-number">302</span>状态码都表示重定向，具体点说就是浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址（浏览器会从响应头Location中获取新地址），用户看到的效果都是输入地址<span class="hljs-selector-tag">A</span>后瞬间跳转到了另一个地址<span class="hljs-selector-tag">B</span><br>   <br>   <span class="hljs-number">2</span>、不同之处：<br>　　<span class="hljs-number">301</span>表示旧地址<span class="hljs-selector-tag">A</span>的资源已经被永久地移除了，即这个资源不可访问了。搜索引擎在抓取新内容的同时也将旧的网址转换为重定向之后的地址；<br>　　<span class="hljs-number">302</span>表示旧地址<span class="hljs-selector-tag">A</span>的资源还在，即这个资源仍然可以访问，这个重定向只是临时地从旧地址<span class="hljs-selector-tag">A</span>跳转到地址<span class="hljs-selector-tag">B</span>，搜索引擎会抓取新的内容、并且会保存旧的网址。 从SEO层面考虑，<span class="hljs-number">302</span>要好于<span class="hljs-number">301</span><br><br>二、重定向原因：<br>   <span class="hljs-number">1</span>、网站调整（如改变网页目录结构）；<br>   <span class="hljs-number">2</span>、网页被移到一个新地址；<br>   <span class="hljs-number">3</span>、网页扩展名改变(如应用需要把<span class="hljs-selector-class">.php</span>改成<span class="hljs-selector-class">.Html</span>或<span class="hljs-selector-class">.shtml</span>)。<br>      这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个<span class="hljs-number">404</span>页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。<br></code></pre></td></tr></table></figure><h2 id="五、JsonResponse"><a href="#五、JsonResponse" class="headerlink" title="五、JsonResponse"></a>五、JsonResponse</h2><p>用于后端向前端返回 json 格式的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 普通方法返回</span><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    data=[<span class="hljs-string">&#x27;egon&#x27;</span>,<span class="hljs-string">&#x27;kevin&#x27;</span>]<br>    <span class="hljs-keyword">return</span> HttpResponse(json.dumps(data) )<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># JsonResponse 方式返回</span><br><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_view</span>(<span class="hljs-params">request</span>):<br>    data=[<span class="hljs-string">&#x27;egon&#x27;</span>,<span class="hljs-string">&#x27;kevin&#x27;</span>]<br>    <span class="hljs-keyword">return</span> JsonResponse(data,safe=<span class="hljs-literal">False</span>)<br>    <span class="hljs-comment">#默认safe=True代表只能序列化字典对象，safe=False代表可以序列化字典以外的对象</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django之路由层</title>
    <link href="/2020/03/16/0503-Django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/"/>
    <url>/2020/03/16/0503-Django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="一、路由层简介"><a href="#一、路由层简介" class="headerlink" title="一、路由层简介"></a>一、路由层简介</h2><h3 id="1-1-路由介绍"><a href="#1-1-路由介绍" class="headerlink" title="1.1 路由介绍"></a><strong>1.1 路由介绍</strong></h3><p>​在上一章介绍的 Django 生命周期中，我们知道了浏览器发出一个请求，在经过 wsgiref 和中间件后，就到达了路由层。那路由层的作用是啥呢？如果我们把一个 django 项目当作一本书，那么路由层相当于就是书的目录，我们可以根据目录查找到相关的章节位置，同样在 django 中，也是根据路由层来找到对应的视图函数。路由，就是请求地址和视图函数的映射关系。</p><h3 id="1-2-简单的路由配置"><a href="#1-2-简单的路由配置" class="headerlink" title="1.2 简单的路由配置"></a><strong>1.2 简单的路由配置</strong></h3><p>Django 中路由层的默认配置在 <code>urls.py</code> 文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py </span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-comment"># 由一条条映射关系组成的urlpatterns这个列表称之为路由表</span><br>urlpatterns = [<br>     url(regex, view, kwargs=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>), <span class="hljs-comment"># url本质就是一个函数</span><br>]<br></code></pre></td></tr></table></figure><p>参数介绍：</p><ul><li><code>regex</code>：正则表达式,用来匹配 url 地址的路径部分，例如地址为：<a href="http://127.0.0.1:8001/index/%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A6%81%E5%8C%B9%E9%85%8D%E7%9A%84%E9%83%A8%E5%88%86%E6%98%AFindex/">http://127.0.0.1:8001/index/，正则表达式要匹配的部分是index/</a></li><li><code>view</code>：通常为一个视图函数，用来处理业务逻辑</li><li><code>kwargs</code>：用于在路由中传递参数</li><li><code>name</code>：用于路由反向解析</li></ul><p>简单使用案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;index/&#x27;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是index&quot;</span>)<br></code></pre></td></tr></table></figure><p>启动项目，在浏览器访问 <a href="http://127.0.0.1:8000/index/%EF%BC%8C%E4%BC%9A%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA">http://127.0.0.1:8000/index/，会看到页面显示</a>  “这是index”。</p><p> 在使用路由时，有以下几点要注意：</p><h4 id="1-2-1-路由匹配"><a href="#1-2-1-路由匹配" class="headerlink" title="1.2.1 路由匹配"></a><strong>1.2.1 路由匹配</strong></h4><p>​当我们在浏览器中输入 <a href="http://127.0.0.1:8000/index%EF%BC%8Cdjango">http://127.0.0.1:8000/index，django</a> 会拿着路径部分 “index” 去路由表中自上而下匹配，一旦匹配到了就不会继续往下匹配了，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;index/&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;index/2&#x27;</span>, views.index2),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是index&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index2</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是index2&quot;</span>)<br></code></pre></td></tr></table></figure><p>启动项目，在浏览器访问 <a href="http://127.0.0.1:8000/index/2%EF%BC%8C%E8%BF%98%E6%98%AF%E4%BC%9A%E7%9C%8B%E5%88%B0">http://127.0.0.1:8000/index/2，还是会看到</a>  “这是index”，这是因为 django 匹配到 “index&#x2F;“ 时，就已经可以找到对应的路由了，所以不会继续去匹配了后面的 “2” 了，可以通过如下方式解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># 路由调换位置，将有包含关系且比较长的放在前面（不推荐）</span><br>    <span class="hljs-comment"># url(r&#x27;^index/2&#x27;, views.index2),</span><br>    <span class="hljs-comment"># url(r&#x27;^index/&#x27;, views.index),</span><br>    <br>    <span class="hljs-comment"># 使用正则表达式匹配时，匹配开头和结尾</span><br>    url(<span class="hljs-string">r&#x27;^index/$&#x27;</span>, views.index),<br>    url(<span class="hljs-string">r&#x27;^index/2$&#x27;</span>, views.index2), <br>]<br></code></pre></td></tr></table></figure><h4 id="1-2-2-路由重定向"><a href="#1-2-2-路由重定向" class="headerlink" title="1.2.2 路由重定向"></a><strong>1.2.2 路由重定向</strong></h4><p>​当我们在浏览器中输入 <a href="http://127.0.0.1:8000/index%EF%BC%8Cdjango">http://127.0.0.1:8000/index，django</a> 会拿着路径部分 “index” 去路由表中自上而下匹配，按理来说应该找不到对应的路由，因为路由表中的路由都是以 “&#x2F;“ 结尾的，但是我们还是可以顺利的匹配上，这是因为在配置文件 settings.py 中有一个参数 <code>APPEND_SLASH</code>，该参数有两个值True或False（如果配置文件中没有该配置，APPEND_SLASH的默认值为True），对应的作用如下：</p><ul><li>当 <code>APPEND_SLASH=True</code>，并且用户请求的 url 地址的路径部分不是以 “&#x2F;“ 结尾，例如请求的 url 地址是  <a href="http://127.0.0.1:8001/index%EF%BC%8CDjango%E4%BC%9A%E6%8B%BF%E7%9D%80%E8%B7%AF%E5%BE%84%E9%83%A8%E5%88%86%EF%BC%88%E5%8D%B3index%EF%BC%89%E5%8E%BB%E8%B7%AF%E7%94%B1%E8%A1%A8%E4%B8%AD%E5%8C%B9%E9%85%8D%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%8C%B9%E9%85%8D%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%82%A3%E4%B9%88Django%E4%BC%9A%E5%9C%A8%E8%B7%AF%E5%BE%84%E5%90%8E%E5%8A%A0">http://127.0.0.1:8001/index，Django会拿着路径部分（即index）去路由表中匹配正则表达式，发现匹配不成功，那么Django会在路径后加</a> “&#x2F;“（即index&#x2F;）再去路由表中匹配，如果匹配失败则会返回路径未找到，如果匹配成功，则会返回重定向信息给浏览器，要求浏览器重新向 <a href="http://127.0.0.1:8001/index/">http://127.0.0.1:8001/index/</a> 地址发送请求。</li><li>当 <code>APPEND_SLASH=False</code> 时，则不会执行上述过程，即一旦 url 地址的路径部分匹配失败就立即返回路径未找到，不会做任何的附加操作。</li><li>注意，在末尾加 “&#x2F;“ 然后重新发起请求，这是浏览器的功能。</li></ul><h2 id="二、路由分组"><a href="#二、路由分组" class="headerlink" title="二、路由分组"></a>二、路由分组</h2><p>有时候，我们需要的一些信息或者数据可以直接从请求的 url 中获得，例如：<a href="http://127.0.0.1:8080/birthday/1999/11/03%EF%BC%8C%E5%85%B6%E4%B8%AD%E5%87%BA%E7%94%9F%E6%97%A5%E6%9C%9F%E9%83%BD%E5%8C%85%E5%90%AB%E5%9C%A8">http://127.0.0.1:8080/birthday/1999/11/03，其中出生日期都包含在</a> url 中了，此时我们就可以使用正则表达式的分组来进行操作取出信息。</p><h3 id="2-1-无名分组"><a href="#2-1-无名分组" class="headerlink" title="2.1 无名分组"></a><strong>2.1 无名分组</strong></h3><p>下述正则表达式会匹配 url 地址的路径部分为: article&#x2F;数字&#x2F;数字&#x2F;数字，匹配成功的分组部分会以位置参数的形式传给视图函数，有几个分组就传几个位置参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [  <br>    url(<span class="hljs-string">r&quot;^birthday/(\d+)/(\d+)/(\d+)$&quot;</span>, views.get_birthday),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_birthday</span>(<span class="hljs-params">request, year, month, day</span>):<br>    year = year<br>    month = month<br>    day = day<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">f&quot;我的生日是 <span class="hljs-subst">&#123;year&#125;</span>-<span class="hljs-subst">&#123;month&#125;</span>-<span class="hljs-subst">&#123;day&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>测试：启动项目，浏览器输入 <a href="http://127.0.0.1:8000/birthday/1999/11/03%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%BB%93%E6%9E%9C">http://127.0.0.1:8000/birthday/1999/11/03，可以看到结果</a> “我的生日是 1999-11-03”</p><h3 id="2-2-有名分组"><a href="#2-2-有名分组" class="headerlink" title="2.2 有名分组"></a><strong>2.2 有名分组</strong></h3><p>下述正则会匹配 url 地址的路径部分为: article&#x2F;数字&#x2F;数字&#x2F;数字，匹配成功的分组部分会以关键字参数（birth_year&#x3D;匹配成功的数字）的形式传给视图函数，有几个有名分组就会传几个关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^birthday/(?P&lt;birth_year&gt;\d+)/(?P&lt;birth_month&gt;\d+)/(?P&lt;birth_day&gt;\d+)$&quot;</span>, views.get_birthday),<br>]<br></code></pre></td></tr></table></figure><p>使用有名分组时，视图函数的位置参数的名字必须和传入的关键字参数相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-comment"># def get_birthday(request, year, month, day):</span><br><span class="hljs-comment">#     year = year</span><br><span class="hljs-comment">#     month = month</span><br><span class="hljs-comment">#     day = day</span><br><span class="hljs-comment">#     return HttpResponse(f&quot;我的生日是 &#123;year&#125;-&#123;month&#125;-&#123;day&#125;&quot;)</span><br><br>    <span class="hljs-comment"># TypeError: get_birthday() got an unexpected keyword argument &#x27;brith_year&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_birthday</span>(<span class="hljs-params">request, birth_year, birth_month, birth_day</span>):<br>    year = birth_year<br>    month = birth_month<br>    day = birth_day<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">f&quot;我的生日是 <span class="hljs-subst">&#123;year&#125;</span>-<span class="hljs-subst">&#123;month&#125;</span>-<span class="hljs-subst">&#123;day&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>注意：有名分组和无名分组都是为了获取路径中的参数，并传递给视图函数，区别在于无名分组是以位置参数的形式传递，有名分组是以关键字参数的形式传递。有名分组和无名分组不能混合使用。</p><h2 id="三、路由分发"><a href="#三、路由分发" class="headerlink" title="三、路由分发"></a>三、路由分发</h2><p>随着项目功能的增加，<code>app</code> 会越来越多，路由也越来越多，每个 <code>app</code> 都会有属于自己的路由，如果再将所有的路由都放到一张路由表中，会导致结构不清晰，不便于管理，所以我们应该将 <code>app</code> 自己的路由交由自己管理，然后在总路由表中做分发。</p><ol><li>创建多个 <code>app</code>，并注册</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 终端创建 app01<br>F:\学习代码\<span class="hljs-keyword">python</span>\框架篇\Django之路由层&gt;<span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp app01<br><br># 终端创建 app02<br>F:\学习代码\<span class="hljs-keyword">python</span>\框架篇\Django之路由层&gt;<span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp app02<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;app01.apps.App01Config&#x27;</span>,<span class="hljs-comment"># 注册app01</span><br>    <span class="hljs-string">&#x27;app02.apps.App02Config&#x27;</span><span class="hljs-comment"># 注册app02</span><br>]<br></code></pre></td></tr></table></figure><ol start="2"><li>在每个 <code>app</code> 下创建 <code>ursl.py</code>  存放自己模块的路由，在自己模块下的 <code>views.py</code> 编写自己的接口</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01 下的 urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><span class="hljs-comment"># 导入app01的Views</span><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index/$&quot;</span>, views.index)<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app01 下的 views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是app01的index&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app02 下的 urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app02 <span class="hljs-keyword">import</span> views<br><span class="hljs-comment"># 导入app02的Views</span><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index/$&quot;</span>, views.index)<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app02 下的 views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是app02的index&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>在总的 urls.py 文件中分发路由</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^app01/&quot;</span>, include(<span class="hljs-string">&quot;app01.urls&quot;</span>)),<br>    url(<span class="hljs-string">r&quot;^app02/&quot;</span>, include(<span class="hljs-string">&quot;app02.urls&quot;</span>)),<br>]<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在浏览器输入：http://127.0.0.1:8000/app01/index/ 会看到&quot;我是app01的index&quot;</span><br><span class="hljs-comment"># 在浏览器输入：http://127.0.0.1:8000/app02/index/ 会看到&quot;我是app02的index页面&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>在总的路由配置 urls.py 中，对于分发的路由正则匹配一定不能加 <code>$</code></li><li>include 函数就是做分发操作的，当在浏览器输入 <a href="http://127.0.0.1:8001/app01/index/%E6%97%B6%EF%BC%8C%E4%BC%9A%E5%85%88%E8%BF%9B%E5%85%A5%E5%88%B0%E6%80%BB%E8%B7%AF%E7%94%B1%E8%A1%A8%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">http://127.0.0.1:8001/app01/index/时，会先进入到总路由表中进行匹配，正则表达式</a> r’^app01&#x2F;‘ 会先匹配成功路径 app01&#x2F;，然后include功能会去app01下的urls.py中继续匹配剩余的路径部分，这也就是上一条中所说的正则匹配规则一定不能加 $ 的原因。</li></ul><h2 id="四、别名和反向解析"><a href="#四、别名和反向解析" class="headerlink" title="四、别名和反向解析"></a>四、别名和反向解析</h2><h3 id="4-1-别名"><a href="#4-1-别名" class="headerlink" title="4.1 别名"></a><strong>4.1 别名</strong></h3><p>​在软件开发初期，url地址的路径设计可能并不完美，后期需要进行调整，如果项目中很多地方使用了该路径，一旦该路径发生变化，就意味着所有使用该路径的地方都需要进行修改，这是一个非常繁琐的操作。解决方案就是在编写一条 url(regex, view, kwargs&#x3D;None, name&#x3D;None) 时，可以通过参数 name 为 url 地址的路径部分起一个别名，项目中就可以通过别名来获取这个路径。以后无论路径如何变化，别名与路径始终保持一致。这样的好处就是无论 url 后期怎么修改，只要通过它的别名使用它，就能找到它。</p><h3 id="4-2-反向解析"><a href="#4-2-反向解析" class="headerlink" title="4.2 反向解析"></a><strong>4.2 反向解析</strong></h3><p>将别名解析成对应的 url 的过程叫做反向解析</p><p>案例：判断用户登录名密码是否正确，正确就跳到首页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index/&quot;</span>, views.index, name=<span class="hljs-string">&quot;index_page&quot;</span>),  <span class="hljs-comment"># 路径 index/ 别名为 index_page</span><br>    url(<span class="hljs-string">r&quot;^login/&quot;</span>, views.login, name=<span class="hljs-string">&quot;login_page&quot;</span>),  <span class="hljs-comment"># 路径 login/ 别名为 login_page</span><br>]<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> HttpResponse, render, reverse, redirect<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>)<br><br>    name = request.POST.get(<span class="hljs-string">&quot;username&quot;</span>)<br>    <span class="hljs-built_in">print</span>(name)<br>    pwd = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>    <span class="hljs-built_in">print</span>(pwd)<br><br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> pwd == <span class="hljs-string">&quot;123456&quot;</span>:<br>        url = reverse(<span class="hljs-string">&quot;index_page&quot;</span>)  <span class="hljs-comment"># 视图函数中反向解析别名，会将别名解析成 /index/</span><br>        <span class="hljs-built_in">print</span>(url)  <span class="hljs-comment"># /index/</span><br>        <span class="hljs-keyword">return</span> redirect(url)  <span class="hljs-comment"># 等价于 redirect(&quot;/index/&quot;)</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;index.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"># templates/index.html<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎登录。。。。这是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"># templates/login.html<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;#    在模板中反向解析别名#&#125;<br>&#123;#    别名必须用引号包住#&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;% url &#x27;login_page&#x27; %&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        &#123;% csrf_token %&#125;<br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在 views.py 中，反向解析的使用：    url = reverse(&#x27;index_page&#x27;) </span><br><span class="hljs-comment"># 在模版 login.html 文件中，反向解析的使用  &#123;% url &#x27;login_page&#x27; %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-分组中反向解析"><a href="#4-3-分组中反向解析" class="headerlink" title="4.3 分组中反向解析"></a><strong>4.3 分组中反向解析</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>   url(<span class="hljs-string">r&quot;^birthday/(\d+)/(\d+)/(\d+)$&quot;</span>, views.get_birthday, name=<span class="hljs-string">&quot;birth_page&quot;</span>), <span class="hljs-comment">#　无名分组</span><br>    url(<span class="hljs-string">r&quot;^birthday/(?P&lt;birth_year&gt;\d+)/(?P&lt;birth_month&gt;\d+)/(?P&lt;birth_day&gt;\d+)$&quot;</span>, views.get_birthday, name=<span class="hljs-string">&quot;birth_page&quot;</span>), <span class="hljs-comment"># 有名分组</span><br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 针对无名分组，比如我们要反向解析出：/birthday/1999/11/03 这种路径，写法如下</span><br><span class="hljs-comment">## 在views.py中，反向解析的使用：</span><br>    url = reverse(<span class="hljs-string">&#x27;birth_page&#x27;</span>,args=(year, month, day))  <span class="hljs-comment"># 接收三个位置参数 </span><br>    <br><span class="hljs-comment">## 在模版文件中，反向解析的使用</span><br>    &#123;% url <span class="hljs-string">&#x27;birth_page&#x27;</span> <span class="hljs-number">1999</span> <span class="hljs-number">11</span> 03 %&#125;<br><br>    <br><span class="hljs-comment"># 2 针对有名分组，比如我们要反向解析出：/birthday/1999/11/03 这种路径，写法如下</span><br><span class="hljs-comment">## 在views.py中，反向解析的使用：</span><br>    url = reverse(<span class="hljs-string">&#x27;birth_page&#x27;</span>,kwargs=&#123;<span class="hljs-string">&#x27;birth_year&#x27;</span>:<span class="hljs-number">1999</span>, <span class="hljs-string">&#x27;birth_month&#x27;</span>:<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;birth_day&#x27;</span>:03&#125;) <br>    <br><span class="hljs-comment">## 在模版文件中，反向解析的使用</span><br>    &#123;% url <span class="hljs-string">&#x27;birth_page&#x27;</span> birth_year=<span class="hljs-number">1999</span> birth_month=<span class="hljs-number">11</span> birth_day=03 %&#125;<br></code></pre></td></tr></table></figure><h2 id="五、名称空间"><a href="#五、名称空间" class="headerlink" title="五、名称空间"></a>五、名称空间</h2><p>当我们的项目下创建了多个 app，并且每个 app 下都针对匹配的路径起了别名，如果别名存在重复，那么在反向解析时则会出现覆盖。</p><p>案例：</p><p>创建两个 app，app03，app04，并注册</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">F:\学习代码\<span class="hljs-keyword">python</span>\框架篇\Django之路由层&gt;<span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp app03<br><br>F:\学习代码\<span class="hljs-keyword">python</span>\框架篇\Django之路由层&gt;<span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp app04<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;app01.apps.App01Config&#x27;</span>,<br>    <span class="hljs-string">&#x27;app02.apps.App02Config&#x27;</span>,<br>    <span class="hljs-string">&#x27;app03.apps.App03Config&#x27;</span>,<br>    <span class="hljs-string">&#x27;app04.apps.App04Config&#x27;</span><br>]<br></code></pre></td></tr></table></figure><p>编写各自的路由和视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app03 urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app03 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index/$&quot;</span>, views.index, name=<span class="hljs-string">&quot;index_page&quot;</span>)<br>]<br><br><br><span class="hljs-comment"># app03 views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, reverse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">req</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是app03的index页面，反向解析的结果为 %s&quot;</span> % reverse(<span class="hljs-string">&quot;index_page&quot;</span>))<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app04 urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> app04 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^index/$&quot;</span>, views.index, name=<span class="hljs-string">&quot;index_page&quot;</span>)<br>]<br><br><br><span class="hljs-comment"># app04 views.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, reverse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">req</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是app04的index页面，反向解析的结果为 %s&quot;</span> % reverse(<span class="hljs-string">&quot;index_page&quot;</span>))<br></code></pre></td></tr></table></figure><p>在总路由配置模块进行路由分发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> Django之路由层 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&quot;^app03/&quot;</span>, include(<span class="hljs-string">&quot;app03.urls&quot;</span>)),<br>    url(<span class="hljs-string">r&quot;^app04/&quot;</span>, include(<span class="hljs-string">&quot;app04.urls&quot;</span>)),<br><br>]<br></code></pre></td></tr></table></figure><p>启动项目进行测试，发现 app04 的别名解析将 app03 的覆盖了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">在浏览器输入 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/app03/i</span>ndex<span class="hljs-regexp">/  看到结果 这是app03的index页面，反向解析的结果为 /</span>app04<span class="hljs-regexp">/index/</span><br><br>在浏览器输入 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/app04/i</span>ndex<span class="hljs-regexp">/  看到结果 这是app04的index页面，反向解析的结果为 /</span>app04<span class="hljs-regexp">/index/</span><br></code></pre></td></tr></table></figure><p>解决方法：</p><ul><li>避免使用相同的别名</li><li>如果就想使用相同的别名，那就需要用到django中名称空间的概念，将别名放到不同的名称空间中，这样即便是出现重复，彼此也不会冲突，具体做法如下</li></ul><ol><li>总的 urls.py 在分发路由时，指定名称空间</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br><span class="hljs-comment"># 传给 include 一个元组，元组的第一个值是路由分发的地址，第二个值是我们为名称空间取的名字</span><br>    url(<span class="hljs-string">r&quot;^app03/&quot;</span>, include(<span class="hljs-string">&quot;app03.urls&quot;</span>, <span class="hljs-string">&quot;app03&quot;</span>)),<br>    url(<span class="hljs-string">r&quot;^app04/&quot;</span>, include(<span class="hljs-string">&quot;app04.urls&quot;</span>, <span class="hljs-string">&quot;app04&quot;</span>)),<br>]<br></code></pre></td></tr></table></figure><ol start="2"><li>修改每个 app 中 views.py 中的函数，针对不同名称空间中的别名 index_page 进行反向解析</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app03 views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, reverse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">req</span>):<br>    url = reverse(<span class="hljs-string">&quot;app03:index_page&quot;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是app03的index页面，反向解析的结果为 %s&quot;</span> % url)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app04 views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse, reverse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">req</span>):<br>    url = reverse(<span class="hljs-string">&quot;app04:index_page&quot;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;这是app04的index页面，反向解析的结果为 %s&quot;</span> % url)<br></code></pre></td></tr></table></figure><p>启动项目进行测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">在浏览器输入 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/app03/i</span>ndex<span class="hljs-regexp">/  看到结果 这是app03的index页面，反向解析的结果为 /</span>app03<span class="hljs-regexp">/index/</span><br><br>在浏览器输入 http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/app04/i</span>ndex<span class="hljs-regexp">/  看到结果 这是app04的index页面，反向解析的结果为 /</span>app04<span class="hljs-regexp">/index/</span><br></code></pre></td></tr></table></figure><p>补充：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-number">1</span>、在视图函数中基于名称空间的反向解析，用法如下<br><span class="hljs-built_in">url</span>=reverse(<span class="hljs-string">&#x27;名称空间的名字:待解析的别名&#x27;</span>)<br><br><span class="hljs-number">2</span>、在模版里基于名称空间的反向解析，用法如下<br>&#123;% <span class="hljs-built_in">url</span> <span class="hljs-string">&#x27;名称空间的名字:待解析的别名&#x27;</span>%&#125;<br></code></pre></td></tr></table></figure><h2 id="六、path-和-re-path"><a href="#六、path-和-re-path" class="headerlink" title="六、path 和 re_path"></a>六、path 和 re_path</h2><h3 id="6-1-re-path"><a href="#6-1-re-path" class="headerlink" title="6.1 re_path"></a><strong>6.1 re_path</strong></h3><p>Django2.0 中的 re_path 与 Django1.0 的url 用法是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path <span class="hljs-comment"># django2.0中的re_path</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url <span class="hljs-comment"># 在django2.0中同样可以导入1.0中的url</span><br><br>urlpatterns = [<br>    <span class="hljs-comment"># 用法完全一致</span><br>    url(<span class="hljs-string">r&#x27;^app01/&#x27;</span>, include((<span class="hljs-string">&#x27;app01.urls&#x27;</span>,<span class="hljs-string">&#x27;app01&#x27;</span>))),<br>    re_path(<span class="hljs-string">r&#x27;^app02/&#x27;</span>, include((<span class="hljs-string">&#x27;app02.urls&#x27;</span>,<span class="hljs-string">&#x27;app02&#x27;</span>))),<br>]<br></code></pre></td></tr></table></figure><h3 id="6-2-path"><a href="#6-2-path" class="headerlink" title="6.2 path"></a><strong>6.2 path</strong></h3><p>在 Django2.0 中新增了一个 path 功能，用来解决：数据类型转换问题与正则表达式冗余问题，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path<br><br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># 问题一：数据类型转换</span><br>    <span class="hljs-comment"># 正则表达式会将请求路径中的年份匹配成功然后以str类型传递函数year_archive，在函数year_archive中如果想以int类型的格式处理年份，则必须进行数据类型转换</span><br>    re_path(<span class="hljs-string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),<br><br>    <span class="hljs-comment"># 问题二：正则表达式冗余</span><br>    <span class="hljs-comment"># 下述三个路由中匹配article_id采用了同样的正则表达式，重复编写了三遍，存在冗余问题，并且极不容易管理，因为一旦article_id规则需要改变，则必须同时修改三处代码</span><br>    <br>    re_path(<span class="hljs-string">r&#x27;^article/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/detail/$&#x27;</span>, views.detail_view),<br>    re_path(<span class="hljs-string">r&#x27;^articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/edit/$&#x27;</span>, views.edit_view),<br>    re_path(<span class="hljs-string">r&#x27;^articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/delete/$&#x27;</span>, views.delete_view),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">year_archive</span>(<span class="hljs-params">request,year</span>):<br>    <span class="hljs-built_in">print</span>(year,<span class="hljs-built_in">type</span>(year))<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;year_archive page&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">detail_view</span>(<span class="hljs-params">request,article_id</span>):<br>    <span class="hljs-built_in">print</span>(article_id, <span class="hljs-built_in">type</span>(article_id))<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;detail_view page&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_view</span>(<span class="hljs-params">request,article_id</span>):<br>    <span class="hljs-built_in">print</span>(article_id, <span class="hljs-built_in">type</span>(article_id))<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;edit_view page&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_view</span>(<span class="hljs-params">request,article_id</span>):<br>    <span class="hljs-built_in">print</span>(article_id, <span class="hljs-built_in">type</span>(article_id))<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;delete_view page&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用 path 解决以上问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,re_path<br><br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># 问题一的解决方案：</span><br>    path(<span class="hljs-string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive), <span class="hljs-comment"># &lt;int:year&gt;相当于一个有名分组，其中int是django提供的转换器，相当于正则表达式，专门用于匹配数字类型，而year则是我们为有名分组命的名，并且int会将匹配成功的结果转换成整型后按照格式（year=整型值）传给函数year_archive</span><br><br><br>    <span class="hljs-comment"># 问题二解决方法：用一个int转换器可以替代多处正则表达式</span><br>    path(<span class="hljs-string">&#x27;articles/&lt;int:article_id&gt;/detail/&#x27;</span>, views.detail_view), <br>    path(<span class="hljs-string">&#x27;articles/&lt;int:article_id&gt;/edit/&#x27;</span>, views.edit_view),<br>    path(<span class="hljs-string">&#x27;articles/&lt;int:article_id&gt;/delete/&#x27;</span>, views.delete_view),<br>]<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>path 与 re_path 或者1.0中的 url 的不同之处是，传给 path 的第一个参数不再是正则表达式，而是一个完全匹配的路径，相同之处是第一个参数中的匹配字符均无需加前导斜杠</li><li>使用尖括号(&lt;&gt;)从 url 中捕获值，相当于有名分组</li><li>&lt;&gt;中可以包含一个转化器类型（converter type），比如使用  &lt;int:name&gt;  使用了转换器 int。若果没有转化器，将匹配任何字符串，当然也包括了 &#x2F; 字符</li></ul><p>django 默认支持以下5种转换器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">str</span>,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式<br><span class="hljs-attribute">int</span>,匹配正整数，包含<span class="hljs-number">0</span>。<br><span class="hljs-attribute">slug</span>,匹配字母、数字以及横杠、下划线组成的字符串。<br><span class="hljs-attribute">uuid</span>,匹配格式化的uuid，如 <span class="hljs-number">075194</span>d3-<span class="hljs-number">6885</span>-<span class="hljs-number">417</span>e-a8a8-<span class="hljs-number">6</span>c931e272f00。<br><span class="hljs-attribute">path</span>,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）<br></code></pre></td></tr></table></figure><p>当然，使用转换器也有一些自身的缺陷</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">path(&#x27;articles/&lt;int<span class="hljs-symbol">:year&gt;/&lt;int</span><span class="hljs-symbol">:month&gt;/&lt;slug</span><span class="hljs-symbol">:other&gt;/</span>&#x27;, views.article_detail) <br></code></pre></td></tr></table></figure><p>针对路径 <a href="http://127.0.0.1:8000/articles/2009/123/hello/%EF%BC%8Cpath%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%87%BA%E5%8F%82%E6%95%B0year=2009,month=123,other='hello'%E4%BC%A0%E9%80%92%E7%BB%99%E5%87%BD%E6%95%B0article_detail%EF%BC%8C%E6%98%BE%E7%84%B6%E8%BF%99%E6%98%AF%E4%B8%8D%E5%90%88%E7%90%86%E7%9A%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9C%88%E4%BB%BD%E4%B8%8D%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E4%B8%89%E4%BD%8D%E6%95%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BD%AC%E6%8D%A2%E5%99%A8%E6%98%AF%E6%97%A0%E6%B3%95%E5%81%9A%E5%88%B0%E7%B2%BE%E5%87%86%E5%8C%B9%E9%85%8D%E7%9A%84%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E8%87%AA%E8%BA%AB%E4%B8%9A%E5%8A%A1%E7%9A%84%E9%9C%80%E6%B1%82%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E5%99%A8%E3%80%82%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%AE%9E%E9%99%85%E4%B8%8A%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E7%B1%BB%E6%88%96%E8%80%85%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%AE%83%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%82%B9%E8%A6%81%E6%B1%82%EF%BC%9A">http://127.0.0.1:8000/articles/2009/123/hello/，path会匹配出参数year=2009,month=123,other=&#39;hello&#39;传递给函数article_detail，显然这是不合理的，因为月份不可能出现三位数，所以转换器是无法做到精准匹配的，我们可以根据自身业务的需求自定义转换器。转换器实际上就是一个类或者接口，它有以下几点要求：</a></p><ul><li>regex类属性，字符串类型</li><li>to_python(self, value)方法，value是由类属性 regex所匹配到的字符串，返回具体的Python变量值，以供Django传递到对应的视图函数中</li><li>to_url(self, value)方法，和to_python相反，value是一个具体的Python变量值，返回其字符串，通常用于url反向引用</li></ul><p>具体步骤如下：</p><ol><li>在app01下新建文件path_ converters.py,文件名可以随意命名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MonthConverter</span>:<br>    regex=<span class="hljs-string">&#x27;\d&#123;2&#125;&#x27;</span> <span class="hljs-comment"># 属性名必须为regex</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_python</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">return</span> value <span class="hljs-comment"># 匹配的regex是两个数字，返回的结果也必须是两个数字</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在urls.py中，使用register_converter将其注册到URL配置中：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,register_converter<br><span class="hljs-keyword">from</span> app01.path_converts <span class="hljs-keyword">import</span> MonthConverter<br><br>register_converter(MonthConverter,<span class="hljs-string">&#x27;mon&#x27;</span>)<br><br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;</span>, views.article_detail, name=<span class="hljs-string">&#x27;aaa&#x27;</span>),<br><br>]<br></code></pre></td></tr></table></figure><ol start="3"><li>views.py中的视图函数article_detail</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse,reverse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">article_detail</span>(<span class="hljs-params">request,year,month,other</span>):<br>    <span class="hljs-built_in">print</span>(year,<span class="hljs-built_in">type</span>(year))<br>    <span class="hljs-built_in">print</span>(month,<span class="hljs-built_in">type</span>(month))<br>    <span class="hljs-built_in">print</span>(other,<span class="hljs-built_in">type</span>(other))<br>    <span class="hljs-built_in">print</span>(reverse(<span class="hljs-string">&#x27;aaa&#x27;</span>,args=(<span class="hljs-number">1988</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;hello&#x27;</span>))) <span class="hljs-comment"># 反向解析结果/articles/1988/12/hello/</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;ok&#x27;</span>)<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">在浏览器输入http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/articles/</span><span class="hljs-number">2009</span><span class="hljs-regexp">/12/</span>hello/，path会成功匹配出参数year=<span class="hljs-number">2009</span>,month=<span class="hljs-number">12</span>,other=<span class="hljs-string">&#x27;hello&#x27;</span>传递给函数article_detail<br><br>在浏览器输入http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/articles/</span><span class="hljs-number">2009</span><span class="hljs-regexp">/123/</span>hello/，path会匹配失败，因为我们自定义的转换器mon只匹配两位数字，而对应位置的<span class="hljs-number">123</span>超过了<span class="hljs-number">2</span>位<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django 初识</title>
    <link href="/2020/03/15/0502-Django%E5%88%9D%E8%AF%86/"/>
    <url>/2020/03/15/0502-Django%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、MVC框架和MTV框架"><a href="#一、MVC框架和MTV框架" class="headerlink" title="一、MVC框架和MTV框架"></a>一、MVC框架和MTV框架</h2><p>​MVC（Model View Controller）是软件工程中的一种软件架构模式，它把软件系统分为三个基本部分：模型(Model)、视图(View)、控制器(Controller)。MVC具有耦合性低、重用性高、生命周期成本低等优点。其中，模型负责业务对象与数据库的对象(ORM)，视图负责与用户的交互(页面)，控制器(C)接受用户的输入调用模型和视图完成用户的请求。</p><p>​                                                    <img src="/img/blog/about_django/MVC框架.png" style="zoom:50%;" /> </p><h2 id="二、Django的MTV框架"><a href="#二、Django的MTV框架" class="headerlink" title="二、Django的MTV框架"></a>二、Django的MTV框架</h2><p>Django的MTV模式本质上与MVC模式没有什么差别，也是各组件之间为了保持松耦合关系，只是定义上有些许不同，Django的MTV分别代表：</p><ul><li><p>Model(模型)：负责业务对象与数据库的对象(ORM) ——– 相当于MVC中的M</p></li><li><p>Template(模版)：负责如何把页面展示给用户 ——– 相当于MVC中的V</p></li><li><p>View(视图)：负责业务逻辑，并在适当的时候调用Model和Template ——– 相当于MVC中的C</p></li></ul><p>此外，Django还有一个url分发器，它的作用是将一个个URL的页面请求分发给不同的view处理，view再调用相应的Model和Template</p><img src="/img/blog/about_django/MTV模式.png" style="zoom: 67%;" /> <p><strong>MTV模式和MVC模式的比对</strong></p><p>​                                          <img src="/img/blog/about_django/MTV模式和MVC模式的比对.png" style="zoom:67%;" />   </p><h2 id="三、Django的使用"><a href="#三、Django的使用" class="headerlink" title="三、Django的使用"></a>三、Django的使用</h2><h3 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a><strong>3.1 创建项目</strong></h3><p>创建一个名为 <code>mysit</code> 的 Django 项目：</p><ul><li>进入 cmd 终端，切换到想要存放项目的目录</li><li>输入创建项目命令：django-admin startproject mysite</li></ul><h3 id="3-2-项目的目录结构"><a href="#3-2-项目的目录结构" class="headerlink" title="3.2 项目的目录结构"></a><strong>3.2 项目的目录结构</strong></h3><img src="/img/blog/about_django/django项目目录.png" style="zoom:67%;" /> <h3 id="3-3-创建APP"><a href="#3-3-创建APP" class="headerlink" title="3.3 创建APP"></a><strong>3.3 创建APP</strong></h3><p>​对于一个项目而言，我们不可能把所有的功能函数都写在一个文件里面，我们需要根据不同的功能进行app的划分（相当于多分几个模块），比如对于一个学生管理的系统，我们可以把用户登录注册的功能放到一起写，把老师的相关操作的功能划分到一起，把学生的相关功能划分到一起等等，这就需要创建多个app了</p><h4 id="3-3-1-创建app的命令"><a href="#3-3-1-创建app的命令" class="headerlink" title="3.3.1 创建app的命令"></a><strong>3.3.1 创建app的命令</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py startapp app的名字<br></code></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 创建用户相关的app<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp user<br><br># 创建学生相关的app<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp student<br><br># 创建老师相关的app<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp teacher<br></code></pre></td></tr></table></figure><p>此时我们可以发现项目目录变成了</p><img src="/img/blog/about_django/app创建.png" style="zoom:80%;" /> <h4 id="3-3-2-app注册"><a href="#3-3-2-app注册" class="headerlink" title="3.3.2 app注册"></a><strong>3.3.2 app注册</strong></h4><p>我们再创建完app后，必须要让django知道我们添加了新的app，所以要在 settings.py中对新创建的app进行注册</p><img src="/img/blog/about_django/app注册.png" style="zoom: 67%;" /> <h3 id="3-4-运行项目"><a href="#3-4-运行项目" class="headerlink" title="3.4 运行项目"></a><strong>3.4 运行项目</strong></h3><p><strong>运行项目的命令：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py runserver  ip:端口号<br><br><span class="hljs-comment"># 例如：python manage.py runserver  127.0.0.1:8080</span><br></code></pre></td></tr></table></figure><h3 id="3-5-Django项目的配置文件"><a href="#3-5-Django项目的配置文件" class="headerlink" title="3.5 Django项目的配置文件"></a><strong>3.5 Django项目的配置文件</strong></h3><p>创建的django项目中的 settings.py 中存放着项目相关的一些配置信息，我们可以根据实际的需求进行修改</p><ul><li><strong>ALLOWED_HOSTS</strong>允许访问该项目的IP信息的相关设置（即设置可以访问的白名单）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ALLOWED_HOSTS = []  # 初识设置</span><br><span class="hljs-comment"># ALLOWED_HOSTS = [&quot;127.0.0.1&quot;, &quot;192.168.1.2&quot;]  # 只允许这些IP访问项目</span><br>ALLOWED_HOSTS = [<span class="hljs-string">&quot;*&quot;</span>]  <span class="hljs-comment"># 允许所有IP访问项目</span><br></code></pre></td></tr></table></figure><ul><li><strong>INSTALLED_APPS</strong>用于注册创建的app</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&quot;user.apps.UserConfig&quot;</span>,        <span class="hljs-comment"># 注册用户app</span><br>    <span class="hljs-string">&quot;student.apps.StudentConfig&quot;</span>,  <span class="hljs-comment"># 注册学生app</span><br>    <span class="hljs-string">&quot;teacher.apps.TeacherConfig&quot;</span>   <span class="hljs-comment"># 注册教师app</span><br>]<br></code></pre></td></tr></table></figure><ul><li><strong>MIDDLEWARE</strong>用于管理django的中间件，如果我们自己编写了新的中间件，也需要在这边注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,  <span class="hljs-comment"># 如果发生跨域问题，将此行注释掉即可</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><ul><li><strong>ROOT_URLCONF</strong>规定寻找路由和视图映射的入口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ROOT_URLCONF = <span class="hljs-string">&#x27;Django初识.urls&#x27;</span><br><span class="hljs-comment"># ROOT_URLCONF = &#x27;student.urls&#x27;  # 此时接收到浏览器请求后将会去student.urls寻找路由和视图的映射关系</span><br></code></pre></td></tr></table></figure><ul><li><strong>TEMPLATES</strong>存放模板相关的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)]<br>        ,<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><ul><li><strong>DATABASES</strong>数据库相关操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.sqlite3&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="hljs-string">&#x27;db.sqlite3&#x27;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>STATIC_URL</strong>用于设置项目静态文件相关存储，它会给静态文件的存储路径起一个别名，当使用到静态文件时，引用的路径必须以别名开头。别名只是告知要开始查找应用静态文件，而并非是静态文件的实际存储位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><strong>STATICFILES_DIR</strong>静态文件实际的存储位置，需要手动建立该变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">STATICFILES_DIR = [<br>    os.path.join(BASE_DIR, <span class="hljs-string">&quot;static&quot;</span>)<br>]<br></code></pre></td></tr></table></figure><h2 id="四、Django的生命周期"><a href="#四、Django的生命周期" class="headerlink" title="四、Django的生命周期"></a>四、Django的生命周期</h2><img src="/img/blog/about_django/django的生命周期.png" style="zoom: 67%;" />  <p>浏览器发送请求，django接收请求并进行相应的处理，最后将结果返回给浏览的这个过程如上图所示。</p><ol><li>由wsgiref模块接收到浏览器的请求</li><li>在请求到达路由层（urls.py）之前会经过中间件，中间件会先对请求进行一个预处理</li><li>请求到达路由层，通过路由层找到对应的视图函数</li><li>视图函数根据请求进行处理，如果请求涉及到模板和数据库，视图函数会将对应的模板和数据库中的数据进行组合渲染，最后将结果返回</li><li>再最后的结果返回给wsgiref模块之前还是会先经过中间件，中间件会对返回结果进行进一步的处理</li><li>返回结果处理完后，返回给wsgiref模块</li><li>wsgiref模块将最后的结果返回给浏览器，浏览器对结果进行解析和展示</li></ol>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义一个Web框架</title>
    <link href="/2020/03/11/0501-Django%E5%89%8D%E6%88%8F/"/>
    <url>/2020/03/11/0501-Django%E5%89%8D%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Web服务的本质"><a href="#一、Web服务的本质" class="headerlink" title="一、Web服务的本质"></a>一、Web服务的本质</h2><h3 id="1-1-软件开发架构"><a href="#1-1-软件开发架构" class="headerlink" title="1.1 软件开发架构"></a><strong>1.1 软件开发架构</strong></h3><ul><li><code>C/S架构</code>，即客户端和服务器</li><li><code>B/S架构</code>，即浏览器和服务器</li></ul><p>从本质上来说，<code>B/S架构</code> 也是 <code>C/S架构</code> ，只是使用浏览器作为了客户端。</p><h3 id="1-2-浏览器的工作流程"><a href="#1-2-浏览器的工作流程" class="headerlink" title="1.2 浏览器的工作流程"></a><strong>1.2 浏览器的工作流程</strong></h3><p>​当我们在浏览器窗口输入一些小网址并进行搜索的时候，中间到底发生了哪些事情呢？站在宏观的角度去研究，从输入网址到看到我们访问的内容，整个过程中浏览器的工作流程大致可以分为这么几步：</p><ol><li>浏览器朝服务端发送请求</li><li>服务端接收请求（例如：访问百度首页）</li><li>服务端返回对应的响应（例如：返回百度首页的内容）</li><li>浏览器接收响应并根据特定的规则渲染页面展示给用户</li></ol><h3 id="1-3-模拟一个服务端"><a href="#1-3-模拟一个服务端" class="headerlink" title="1.3 模拟一个服务端"></a><strong>1.3 模拟一个服务端</strong></h3><p>​以上介绍的流程，其实就是大多数web服务的基本操作流程。我们可以通过套接字编程来编写一个服务端模拟上述过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server.py</span><br><span class="hljs-keyword">import</span> socket<br><br>server = socket.socket()<br>server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br>server.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    conn, addr = server.accept()<br>    data = conn.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(data)  <span class="hljs-comment"># 基于网络传输的数据，所以是二进制的数据 bytes</span><br>    conn.send(<span class="hljs-string">b&quot;hello, old baby ~&quot;</span>)<br>    conn.close()<br></code></pre></td></tr></table></figure><p>​我们不需要再去写一个客户端，可以直接通过浏览器访问服务端的地址和端口来实现通信，因为浏览器本质上就是一个客户端。我们启动服务器，在浏览器输入 <code>127.0.0.1:8080</code> 进行访问：</p><p>​                            <img src="/img/blog/about_django/web_01.png" style="zoom:50%;" />  </p><p>操作了一把可以看到，实际的结果并没有和我们预期的一样。那么可能有的金针菇就要开始怀疑了，是不是之前介绍的那些理论是有问题的？其实并非如此，我们先来看一下服务端的情况：</p><img src="/img/blog/about_django/web_02.png" style="zoom:50%;" /> <p>很显然，服务端已经接收到客户端（即浏览器）发出的请求了。我们再回过头来观察一下浏览器的报错，<code>127.0.0.1 发送的响应无效</code>，这就表明我们的请求确确实实发送给了服务端，服务端也给了客户端响应，只不过在浏览器这边渲染不出来而已。</p><h3 id="1-4-HTTP协议的引入"><a href="#1-4-HTTP协议的引入" class="headerlink" title="1.4 HTTP协议的引入"></a><strong>1.4 HTTP协议的引入</strong></h3><p>​既然知道了交互失败的原因，那么我们简单来推导一下问题的根源。和我们手写的客户端不同，浏览器可以充当很多服务器的客户端（如百度、腾讯视频、优酷视频……都可以通过浏览器来访问），每个服务端的写法都不相同，浏览器要是想兼容所有的服务端，必须做到以下两点之一：</p><ul><li>浏览器非常牛掰，能够自动识别不用的服务端做不同的处理</li><li>制定一个统一的标准，如果你想让你写的服务端能够和客户端之间做正常的数据交互，就必须遵循一些规则</li></ul><p>显然相比第一点，第二点实现起来就容易的多。而需要遵循的规则，就是我们常说的 <code>HTTP协议</code></p><h2 id="二、HTTP协议介绍"><a href="#二、HTTP协议介绍" class="headerlink" title="二、HTTP协议介绍"></a>二、HTTP协议介绍</h2><h3 id="2-1-什么是-HTTP-协议"><a href="#2-1-什么是-HTTP-协议" class="headerlink" title="2.1 什么是 HTTP 协议"></a><strong>2.1 什么是 HTTP 协议</strong></h3><p>​HTTP 协议（超文本传输协议）是用来规定服务器和浏览器之间数据交互的格式的一种规则协议，该协议你可以不遵循，但是相对的你写的服务端就不能被浏览器正常访问。（当然也可以自己编写客户端，让用户下载 App 进行安装使用）</p><h3 id="2-2-HTTP-协议的特性"><a href="#2-2-HTTP-协议的特性" class="headerlink" title="2.2 HTTP 协议的特性"></a><strong>2.2 HTTP 协议的特性</strong></h3><h4 id="2-2-1-基于请求响应"><a href="#2-2-1-基于请求响应" class="headerlink" title="2.2.1  基于请求响应"></a><strong>2.2.1  基于请求响应</strong></h4><p>​服务端只用在接收到客户端的请求后才会去和客户端响应交互，不会主动向客户端交互。</p><h4 id="2-2-2-基于-TCP-IP"><a href="#2-2-2-基于-TCP-IP" class="headerlink" title="2.2.2 基于 TCP&#x2F;IP"></a><strong>2.2.2 基于 TCP&#x2F;IP</strong></h4><p>​HTTP 协议是基于底层的 TCP&#x2F;IP 协议，作用于应用层之上的协议。</p><h4 id="2-2-3-无状态"><a href="#2-2-3-无状态" class="headerlink" title="2.2.3 无状态"></a><strong>2.2.3 无状态</strong></h4><p>​不保存用户信息，即不会记录用户是否来访问过，即使同一个用户来访问了多次，每次都会把该用户当成新用户。正是由于该特性，所以后续出现了一些专门用来记录用户状态的技术，如 <code>cookie</code>、<code>session</code>、<code>token</code> 等等。</p><h4 id="2-2-4-无-短链接"><a href="#2-2-4-无-短链接" class="headerlink" title="2.2.4 无&#x2F;短链接"></a><strong>2.2.4 无&#x2F;短链接</strong></h4><p>​客户端请求一次，服务器就响应一次，之后两者就断开链接，没有任何联系。</p><p>​<strong>补充</strong>：使用 websocket 协议可实现长链接，即双方建立链接后默认不断开。</p><h3 id="2-3-请求数据格式"><a href="#2-3-请求数据格式" class="headerlink" title="2.3 请求数据格式"></a><strong>2.3 请求数据格式</strong></h3><p>基于 HTTP 协议通信时，客户端请求数据的格式主要由下面四个部分构成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请求首行（标识HTTP协议版本，当前请求方式）</span><br><span class="hljs-comment"># 请求头（一大堆k,v键值对）</span><br><span class="hljs-comment"># \r\n</span><br><span class="hljs-comment"># 请求体（并不是所有的请求方式都有，get方式没有，post方式有，存放的是post请求提交的敏感数据）</span><br></code></pre></td></tr></table></figure><ul><li>请求头示例：</li></ul><img src="/img/blog/about_django/web_03.png" style="zoom:50%;" /> <ul><li>请求体示例：</li></ul><img src="/img/blog/about_django/web_04.png" style="zoom:50%;" /> <h3 id="2-4-响应数据格式"><a href="#2-4-响应数据格式" class="headerlink" title="2.4 响应数据格式"></a><strong>2.4 响应数据格式</strong></h3><p>基于 HTTP 协议通信时，服务端响应数据的格式主要由下面四个部分构成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请求首行（标识HTTP协议版本，响应状态码）</span><br><span class="hljs-comment"># 请求头（一大堆k,v键值对）</span><br><span class="hljs-comment"># \r\n</span><br><span class="hljs-comment"># 请求体（返回给浏览器展示给用户看的数据）</span><br></code></pre></td></tr></table></figure><p>**补充：**响应状态码是指用一串简单的数字来表示一些复杂的状态或者描述信息，例如：404：请求资源不存在。常见的状态码主要有以下几种：</p><ul><li><code>1XX</code>：服务端已经成功接收到数据正在处理，客户端可以继续提交额外的数据</li><li><code>2XX</code>：服务端成功响应了客户端想要的数据（例如：200 OK请求成功）</li><li><code>3XX</code>：重定向（浏览器跳转访问其他非目标页面）</li><li><code>4XX</code>：请求错误（例如：403 当前请求不合法或者不符合访问资源的条件）</li><li><code>5XX</code>：服务器内部错误</li></ul><h3 id="2-5-根据HTTP协议优化自定义框架"><a href="#2-5-根据HTTP协议优化自定义框架" class="headerlink" title="2.5 根据HTTP协议优化自定义框架"></a><strong>2.5 根据HTTP协议优化自定义框架</strong></h3><p>在简单了解了 HTTP 协议之后，我们也能很容易的分析出之所以我们自己写的服务端无法和浏览器交互，就是因为我们返回的响应数据格式不符合要求，所以我们只需要做以下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server.py</span><br><span class="hljs-keyword">import</span> socket<br><br>server = socket.socket()<br>server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br>server.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    conn, addr = server.accept()<br>    data = conn.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(data)  <span class="hljs-comment"># 基于网络传输的数据，所以是二进制的数据 bytes</span><br>    <span class="hljs-comment"># 构造符合HTTP协议格式的数据</span><br>    conn.send(<span class="hljs-string">b&quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span>)<br>    conn.send(<span class="hljs-string">b&quot;hello, old baby ~&quot;</span>)<br>    conn.close()<br></code></pre></td></tr></table></figure><p>启动服务端代码，再次通过浏览器访问  <code>127.0.0.1:8080</code> </p><img src="/img/blog/about_django/web_05.png" style="zoom:50%;" /> <p>我们再来详细看一下服务端收到的请求数据是否符合HTTP协议的请求数据格式：</p><img src="/img/blog/about_django/web_06.png" style="zoom:50%;" /> <h2 id="三、识别路由"><a href="#三、识别路由" class="headerlink" title="三、识别路由"></a>三、识别路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">https://www.cnblogs.com/TheGCC/p/<span class="hljs-number">14610191.</span>html<br>https://www.cnblogs.com/XiaoYang-sir/p/<span class="hljs-number">14644542.</span>html<br>https://www.cnblogs.com/teach/p/<span class="hljs-number">14624524.</span>html<br><br><span class="hljs-comment"># URL后缀部分</span><br>TheGCC/p/<span class="hljs-number">14610191.</span>html<br>XiaoYang-sir/p/<span class="hljs-number">14644542.</span>html<br>teach/p/<span class="hljs-number">14624524.</span>html<br></code></pre></td></tr></table></figure><p>我们访问上述网址时，其实都是在访问同一个服务器，即 <code>https://www.cnblogs.com</code>，但是我们却能看到不同的内容，这是由于每个网址（路由&#x2F;URL）都有着自己独特的后缀，服务端会根据后缀进行分析，做出不同的响应，我们也可以给我们的框架添加此功能。</p><p>首先我们要分析一下，URL 的后缀名是放在请求数据的什么位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 浏览器访问 127.0.0.1:8080/index 的请求数据</span><br><span class="hljs-string">&#x27;GET /index HTTP/1.1\r\n&#x27;</span>  <span class="hljs-comment"># 请求首行</span><br><span class="hljs-string">&#x27;Host: 127.0.0.1:8080\r\n</span><br><span class="hljs-string">Connection: keep-alive\r\n</span><br><span class="hljs-string">sec-ch-ua: &quot;Chromium&quot;;v=&quot;88&quot;, &quot;Google Chrome&quot;;v=&quot;88&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;\r\n</span><br><span class="hljs-string">sec-ch-ua-mobile: ?0\r\n</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1\r\n</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36\r\n</span><br><span class="hljs-string">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br><span class="hljs-string">Sec-Fetch-Site: none\r\n</span><br><span class="hljs-string">Sec-Fetch-Mode: navigate\r\n</span><br><span class="hljs-string">Sec-Fetch-User: ?1\r\n</span><br><span class="hljs-string">Sec-Fetch-Dest: document\r\n</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate, br\r\n</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9\r\n</span><br><span class="hljs-string">Cookie: csrftoken=jILnM9mXCyaHkgW5vdNqAJTWkz1jbzZJWgHtbxyX6f1T23UgN4QcclmCJrn1XGOn\r\n</span><br><span class="hljs-string">\r\n&#x27;</span><br><br><span class="hljs-comment"># 浏览器访问 127.0.0.1:8080/login 的请求数据</span><br><span class="hljs-string">&#x27;GET /login HTTP/1.1\r\n&#x27;</span> <span class="hljs-comment"># 请求首行</span><br><span class="hljs-string">&#x27;Host: 127.0.0.1:8080\r\n</span><br><span class="hljs-string">Connection: keep-alive\r\n</span><br><span class="hljs-string">sec-ch-ua: &quot;Chromium&quot;;v=&quot;88&quot;, &quot;Google Chrome&quot;;v=&quot;88&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;\r\n</span><br><span class="hljs-string">sec-ch-ua-mobile: ?0\r\n</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1\r\n</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36\r\n</span><br><span class="hljs-string">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br><span class="hljs-string">Sec-Fetch-Site: none\r\n</span><br><span class="hljs-string">Sec-Fetch-Mode: navigate\r\n</span><br><span class="hljs-string">Sec-Fetch-User: ?1\r\n</span><br><span class="hljs-string">Sec-Fetch-Dest: document\r\n</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate, br\r\n</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9\r\n</span><br><span class="hljs-string">Cookie: csrftoken=jILnM9mXCyaHkgW5vdNqAJTWkz1jbzZJWgHtbxyX6f1T23UgN4QcclmCJrn1XGOn\r\n</span><br><span class="hljs-string">\r\n&#x27;</span><br></code></pre></td></tr></table></figure><p>通过分析我们可以发现，其实 URL 的后缀就存放在请求数据的请求首行中，我们只需要解析请求数据就可以拿到后缀：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server.py</span><br><span class="hljs-keyword">import</span> socket<br><br>server = socket.socket()<br>server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br>server.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    conn, addr = server.accept()<br><br>    <span class="hljs-comment"># 将接收到的bytes类型数据转换成字符串格式</span><br>    data = conn.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-comment"># 解析出路由后缀名</span><br>    current_path = data.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>]<br><br>    conn.send(<span class="hljs-string">b&quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span>)<br><br>    <span class="hljs-comment"># 根据不同的路由后缀名返回不同的内容</span><br>    <span class="hljs-keyword">if</span> current_path == <span class="hljs-string">&quot;/index&quot;</span>:<br>        conn.send(<span class="hljs-string">b&quot;hello, old baby ~ Index&quot;</span>)<br>    <span class="hljs-keyword">elif</span> current_path == <span class="hljs-string">&quot;/login&quot;</span>:<br>        conn.send(<span class="hljs-string">b&quot;hello, old baby ~ Login&quot;</span>)<br>    <span class="hljs-keyword">elif</span> current_path == <span class="hljs-string">&quot;/register&quot;</span>:<br>        <span class="hljs-comment"># 还可以直接返回一个文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            conn.send(f.read())<br>    <span class="hljs-keyword">else</span>:<br>        conn.send(<span class="hljs-string">b&quot;hello, old baby ~&quot;</span>)<br><br>    conn.close()<br></code></pre></td></tr></table></figure><p>我们来测试一下：</p><ul><li>访问 <code>http://127.0.0.1:8080/index</code></li></ul><img src="/img/blog/about_django/web_07.png" style="zoom:50%;" /> <ul><li>访问 <code>http://127.0.0.1:8080/login</code></li></ul><img src="/img/blog/about_django/web_08.png" style="zoom:50%;" /> <ul><li>新建一个<code>aaa.txt</code>，随便写点什么内容，访问 <code>http://127.0.0.1:8080/register</code></li></ul><img src="/img/blog/about_django/web_09.png" style="zoom:50%;" /> <h2 id="四、优化框架"><a href="#四、优化框架" class="headerlink" title="四、优化框架"></a>四、优化框架</h2><p>为框架添加了路由识别的功能后，我们重新检视一下服务端的代码，发现还是有很多不足之处：</p><ul><li>**代码重复：**建立服务端部分的套接字代码每次都需要编写；</li><li>**路由分析简单：**只能拿到路由的后缀，如果想拿到请求数据中的其他信息，还需要重复编写相关的数据解析代码；</li><li>**不支持并发：**服务端一次只能接收和处理一个请求。</li></ul><p>当然，我们可以继续完善我们的逻辑，但是我们可以直接借助 <code>wsgiref</code> 内置模块来弥补上述不足。</p><ul><li>基于 <code>wsgiref</code> 搭建简单的服务端示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">env, response</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param env: 请求所有相关的数据，wsgiref会自动处理好请求数据，封装成一个大字典</span><br><span class="hljs-string">    :param response: 响应相关的所有数据</span><br><span class="hljs-string">    :return: 返回给浏览器的数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-comment"># 固定写法，构建符合HTTP协议的响应行</span><br>    response(<span class="hljs-string">&quot;200 OK&quot;</span>, [])<br><span class="hljs-comment"># 返回给浏览器的数据</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;hello~~&quot;</span>]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    会实时监听127.0.0.1:8080，只要客户端有请求过来，都会交给 run 函数去处理</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    server = make_server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>, run)<br>    server.serve_forever()  <span class="hljs-comment"># 启动服务端</span><br></code></pre></td></tr></table></figure><ul><li><code>wsgiref</code> 和自定义框架结合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">env, response</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param env: 请求所有相关的数据，wsgiref会自动处理好请求数据，封装成一个大字典</span><br><span class="hljs-string">    :param response: 响应相关的所有数据</span><br><span class="hljs-string">    :return: 返回给浏览器的数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    response(<span class="hljs-string">&quot;200 OK&quot;</span>, [])<br><br>    current_path = env.get(<span class="hljs-string">&quot;PATH_INFO&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> current_path == <span class="hljs-string">&quot;/index&quot;</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;hello, old baby ~ Index&quot;</span>]<br>    <span class="hljs-keyword">elif</span> current_path == <span class="hljs-string">&quot;/login&quot;</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;hello, old baby ~ Login&quot;</span>]<br>    <span class="hljs-keyword">elif</span> current_path == <span class="hljs-string">&quot;/register&quot;</span>:<br>        <span class="hljs-comment"># 还可以直接返回一个文件</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-keyword">return</span> [f.read()]<br><br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;404 error&quot;</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    会实时监听127.0.0.1:8080，只要客户端有请求过来，都会交给 run 函数去处理</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    server = make_server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>, run)<br>    server.serve_forever()  <span class="hljs-comment"># 启动服务端</span><br></code></pre></td></tr></table></figure><h2 id="五、框架进一步封装"><a href="#五、框架进一步封装" class="headerlink" title="五、框架进一步封装"></a>五、框架进一步封装</h2><h3 id="5-1-封装视图函数"><a href="#5-1-封装视图函数" class="headerlink" title="5.1 封装视图函数"></a><strong>5.1 封装视图函数</strong></h3><p>​在实际的开发中，服务端处理的业务逻辑是十分复杂的，所以判断完对应的路由后缀后进行的逻辑操作，最好能封装成对应的函数，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">env</span>): <br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;hello, old baby ~ Index&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;hello, old baby ~ Login&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> [f.read()]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b&quot;404 error&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">env, response</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param env: 请求所有相关的数据，wsgiref会自动处理好请求数据，封装成一个大字典</span><br><span class="hljs-string">    :param response: 响应相关的所有数据</span><br><span class="hljs-string">    :return: 返回给浏览器的数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    response(<span class="hljs-string">&quot;200 OK&quot;</span>, [])<br><br>    current_path = env.get(<span class="hljs-string">&quot;PATH_INFO&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> current_path == <span class="hljs-string">&quot;/index&quot;</span>:<br>        <span class="hljs-comment"># 可以将封装了请求数据的参数env也传给对应的函数，方便后续使用请求数据</span><br>        index(env)<br>    <span class="hljs-keyword">elif</span> current_path == <span class="hljs-string">&quot;/login&quot;</span>:<br>        login(env)<br>    <span class="hljs-keyword">elif</span> current_path == <span class="hljs-string">&quot;/register&quot;</span>:<br>        register(env)<br><br>    error(env)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    会实时监听127.0.0.1:8080，只要客户端有请求过来，都会交给 run 函数去处理</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    server = make_server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>, run)<br>    server.serve_forever()  <span class="hljs-comment"># 启动服务端</span><br></code></pre></td></tr></table></figure><h3 id="5-2-路由映射封装"><a href="#5-2-路由映射封装" class="headerlink" title="5.2 路由映射封装"></a><strong>5.2 路由映射封装</strong></h3><p>如果服务端对应的路由，那么再通过 <code>if-elif-else</code> 的方式去判断路由后缀，会导致代码特别冗长。因此最好能有一个路由和其对应方法的映射表，直接通过映射关系找到对应的方法去执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello, old baby ~ Index&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello, old baby ~ Login&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;404 error&quot;</span><br><br>urls = [<br>    (<span class="hljs-string">&quot;/index&quot;</span>, index),<br>    (<span class="hljs-string">&quot;/login&quot;</span>, login),<br>    (<span class="hljs-string">&quot;/register&quot;</span>, register),<br>    (<span class="hljs-string">&quot;/error&quot;</span>, error),<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">env, response</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param env: 请求所有相关的数据，wsgiref会自动处理好请求数据，封装成一个大字典</span><br><span class="hljs-string">    :param response: 响应相关的所有数据</span><br><span class="hljs-string">    :return: 返回给浏览器的数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    response(<span class="hljs-string">&quot;200 OK&quot;</span>, [])<br><br>    current_path = env.get(<span class="hljs-string">&quot;PATH_INFO&quot;</span>)<br><br>    <span class="hljs-comment"># 判断后缀名是否在映射表中</span><br>    <span class="hljs-comment"># 如果在就执行路由对应的方法</span><br>    <span class="hljs-comment"># 如果不在，就执行默认的报错方法</span><br>    func = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        <span class="hljs-keyword">if</span> current_path == url[<span class="hljs-number">0</span>]:<br>            func = url[<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># 如果找到了就不继续往下执行了</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> func:<br>        res = func(env)<br>    <span class="hljs-keyword">else</span>:<br>        res = error(env)<br><br>    <span class="hljs-comment"># 最后再统一处理数据格式</span><br>    <span class="hljs-keyword">return</span> [res.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    会实时监听127.0.0.1:8080，只要客户端有请求过来，都会交给 run 函数去处理</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    server = make_server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>, run)<br>    server.serve_forever()  <span class="hljs-comment"># 启动服务端</span><br></code></pre></td></tr></table></figure><h3 id="5-3-框架拆分"><a href="#5-3-框架拆分" class="headerlink" title="5.3 框架拆分"></a><strong>5.3 框架拆分</strong></h3><p>我们进一步将框架拆分，将逻辑函数（也可以称为视图函数）全部放到新建的 <code>views.py</code> 中，将路由映射关系放到新建的 <code>urls.py</code> 中，最后的框架结构如下：</p><img src="/img/blog/about_django/web_10.png" style="zoom:80%;" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server.py</span><br><span class="hljs-keyword">from</span> wsgiref.simple_server <span class="hljs-keyword">import</span> make_server<br><span class="hljs-keyword">from</span> .urls <span class="hljs-keyword">import</span> urls<br><span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">env, response</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param env: 请求所有相关的数据，wsgiref会自动处理好请求数据，封装成一个大字典</span><br><span class="hljs-string">    :param response: 响应相关的所有数据</span><br><span class="hljs-string">    :return: 返回给浏览器的数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    response(<span class="hljs-string">&quot;200 OK&quot;</span>, [])<br><br>    current_path = env.get(<span class="hljs-string">&quot;PATH_INFO&quot;</span>)<br><br>    <span class="hljs-comment"># 判断后缀名是否在映射表中</span><br>    <span class="hljs-comment"># 如果在就执行路由对应的方法</span><br>    <span class="hljs-comment"># 如果不在，就执行默认的报错方法</span><br>    func = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        <span class="hljs-keyword">if</span> current_path == url[<span class="hljs-number">0</span>]:<br>            func = url[<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># 如果找到了就不继续往下执行了</span><br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> func:<br>        res = func(env)<br>    <span class="hljs-keyword">else</span>:<br>        res = error(env)<br><br>    <span class="hljs-comment"># 最后再统一处理数据格式</span><br>    <span class="hljs-keyword">return</span> [res.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    会实时监听127.0.0.1:8080，只要客户端有请求过来，都会交给 run 函数去处理</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    server = make_server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>, run)<br>    server.serve_forever()  <span class="hljs-comment"># 启动服务端</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello, old baby ~ Index&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello, old baby ~ Login&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;404 error&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> *<br><br>urls = [<br>    (<span class="hljs-string">&quot;/index&quot;</span>, index),<br>    (<span class="hljs-string">&quot;/login&quot;</span>, login),<br>    (<span class="hljs-string">&quot;/register&quot;</span>, register),<br>    (<span class="hljs-string">&quot;/error&quot;</span>, error),<br>]<br></code></pre></td></tr></table></figure><p>拆分之后的好处就是后期再添加新的接口需求，不需要再去修改 <code>server.py</code> 中的代码了，只需要在 <code>urls.py</code> 中新增路由和视图函数的映射关系，在 <code>views.py</code> 中编写对应的视图函数即可。例如，新增一个接口，返回一个 <code>HTML</code> 文件，就可以这么写：</p><ul><li>新建一个 <code>templates</code> 文件夹，专门用于存放 <code>.html</code> 文件</li></ul><img src="/img/blog/about_django/web_11.png" style="zoom:80%;" /> <ul><li>编写代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> *<br><br>urls = [<br>    (<span class="hljs-string">&quot;/index&quot;</span>, index),<br>    (<span class="hljs-string">&quot;/login&quot;</span>, login),<br>    (<span class="hljs-string">&quot;/register&quot;</span>, register),<br>    (<span class="hljs-string">&quot;/error&quot;</span>, error),<br>    (<span class="hljs-string">&quot;/html&quot;</span>, html),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello, old baby ~ Index&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello, old baby ~ Login&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;aaa.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;404 error&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">html</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;templates/hello.html&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br></code></pre></td></tr></table></figure><h2 id="六、模板语言初识"><a href="#六、模板语言初识" class="headerlink" title="六、模板语言初识"></a>六、模板语言初识</h2><h3 id="6-1-动静态网页的区别"><a href="#6-1-动静态网页的区别" class="headerlink" title="6.1 动静态网页的区别"></a><strong>6.1 动静态网页的区别</strong></h3><p>动静态网页本质上都是前端页面，两者的区别为：</p><ul><li>静态页面上的数据是写死的不会发生变化的</li><li>动态页面上的数据是实时变化的，数据是由服务端构造（从数据库中获取）返回的</li></ul><h3 id="6-2-构造一个动态网页"><a href="#6-2-构造一个动态网页" class="headerlink" title="6.2 构造一个动态网页"></a><strong>6.2 构造一个动态网页</strong></h3><p>我们来写一个接口，用于实时返回当前时间，模拟一个最简单的动态网页效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> views <span class="hljs-keyword">import</span> *<br><br>urls = [<br>    (<span class="hljs-string">&quot;/time&quot;</span>, get_time)<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_time</span>(<span class="hljs-params">env</span>):<br>    <span class="hljs-keyword">return</span> datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/img/blog/about_django/web_01.gif" style="zoom:80%;" /> <h3 id="6-3-动态返回文件内容"><a href="#6-3-动态返回文件内容" class="headerlink" title="6.3 动态返回文件内容"></a><strong>6.3 动态返回文件内容</strong></h3><p>想要实现动态的修改服务端中返回的文件的内容也是十分容易做到的，只是过程比较繁琐，如在框架的 <code>templates</code> 文件夹中有一个 <code>index.html</code>，现在想要根据访问路由后缀的不同返回不同的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>wait_to_replace<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> views <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 多个路由可以访问同一个视图函数</span><br>urls = [<br>    (<span class="hljs-string">&quot;/index&quot;</span>, func),<br>    (<span class="hljs-string">&quot;/login&quot;</span>, func),<br>    (<span class="hljs-string">&quot;/register&quot;</span>, func),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">env</span>):<br>    current_path = env.get(<span class="hljs-string">&quot;PATH_INFO&quot;</span>)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;templates/index.html&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        content = f.read()<br>        <span class="hljs-comment"># 通过字符串替换的方法修改页面中的内容</span><br>        data = content.replace(<span class="hljs-string">&quot;wait_to_replace&quot;</span>, <span class="hljs-string">f&quot;hello, this is <span class="hljs-subst">&#123;current_path&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>**难度提升：**如果服务端有一个字典类型的数据，如何才能在前端页面中便捷的使用呢？</p><h3 id="6-4-Jinja2-的使用"><a href="#6-4-Jinja2-的使用" class="headerlink" title="6.4 Jinja2 的使用"></a><strong>6.4 Jinja2 的使用</strong></h3><p>​<code>Jinja2</code> 模块中封装了大量的模板操作语法，极大的方便了我们开发过程中在前端操作渲染后端的数据，这边我们只是简单使用，后面会专门去窥探模板语言的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">env</span>):<br>    user_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;hobby&quot;</span>: <span class="hljs-string">&quot;sleep&quot;</span>&#125;<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;templates/index.html&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        content = f.read()<br>        data = Template(content)<br>        <span class="hljs-comment"># 给 html 传递一个值，在前端页面上直接通过变量名 user 就可以操作数据</span><br>        res = data.render(user=user_dict)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; user &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; user[&quot;name&quot;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; user.get(&quot;name&quot;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、自定义框架生命周期"><a href="#七、自定义框架生命周期" class="headerlink" title="七、自定义框架生命周期"></a>七、自定义框架生命周期</h2><p>回顾一下我们自己手撸的框架，它的请求生命周期大致如下：</p><img src="/img/blog/about_django/web_12.png" style="zoom:100%;" /> <p>从我们自定义的框架中已经可以看到 <code>Django</code> 框架的影子了</p>]]></content>
    
    
    <categories>
      
      <category>django学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python IO多路复用</title>
    <link href="/2019/06/10/0019-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <url>/2019/06/10/0019-IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h2><ul><li>blocking IO              阻塞IO</li><li>nonblocking IO        非阻塞IO</li><li>IO multiplexing        IO多路复用</li><li>signal driven IO       信号驱动IO（在实际中并不常用）</li><li>asynchronous IO       异步IO（python实现不了，但是有tornado框架天生自带异步）</li></ul><p>IO发生时涉及的对象和步骤举例：</p><p>对于一个network IO (这里我们以read举例)，它会涉及到两个系统对象，一个是调用这个IO的process (or thread)，另一个就是系统内核(kernel)。当一个read操作发生时，该操作会经历两个阶段：</p><ol><li>等待数据准备</li><li>将数据从内核拷贝到进程中</li></ol><p>以上提及的 IO 模型的区别就是在这两个阶段上各有不同的情况。</p><h2 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h2><p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样:</p><p><img src="/img/blog/about_python/%E9%98%BB%E5%A1%9EIO.png"></p><p>​当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。对于network io来说，很多时候数据在一开始还没有到达（比如，还没有收到一个完整的UDP包），这个时候kernel就要等待足够的数据到来。</p><p>​ 而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。<strong>所以，blocking IO的特点就是在IO执行的两个阶段（等待数据和拷贝数据两个阶段）都被block了。</strong></p><p>​几乎所有的程序员第一次接触到的网络编程都是从listen()、send()、recv() 等接口开始的，使用这些接口可以很方便的构建服务器&#x2F;客户机的模型。然而大部分的socket接口都是阻塞型的。实际上，除非特别指定，几乎所有的IO接口 ( 包括socket接口 ) 都是阻塞型的。这给网络编程带来了一个很大的问题，如在调用recv(1024)的同时，线程将被阻塞，在此期间，线程将无法执行任何运算或响应任何的网络请求。</p><p>我们可以使用以下方式解决阻塞IO问题，但是都有缺陷：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在服务器端使用多线程（或多进程）。多线程（或多进程）的目的是让每个连接都拥有独立的线程（或进程），这样任何一个连接的阻塞都不会影响其他的连接。</span><br></code></pre></td></tr></table></figure><p> 该方案的问题是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 开启多进程或都线程的方式，在遇到要同时响应成百上千路的连接请求，则无论多线程还是多进程都会严重占据系统资源，降低系统对外界响应效率，而且线程与进程本身也更容易进入假死状态。</span><br></code></pre></td></tr></table></figure><p> 改进方案：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 很多程序员可能会考虑使用“线程池”或“连接池”。“线程池”旨在减少创建和销毁线程的频率，其维持一定合理数量的线程，并让空闲的线程重新承担新的执行任务。“连接池”维持连接的缓存池，尽量重用已有的连接、减少创建和关闭连接的频率。这两种技术都可以很好的降低系统开销，都被广泛应用很多大型系统，如websphere、tomcat和各种数据库等。</span><br></code></pre></td></tr></table></figure><p> 改进后方案其实也存在着问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># “线程池”和“连接池”技术也只是在一定程度上缓解了频繁调用IO接口带来的资源占用。而且，所谓“池”始终有其上限，当请求大大超过上限时，“池”构成的系统对外界的响应并不比没有池的时候效果好多少。所以使用“池”必须考虑其面临的响应规模，并根据响应规模调整“池”的大小。</span><br></code></pre></td></tr></table></figure><p> <strong>对应上例中的所面临的可能同时出现的上千甚至上万次的客户端请求，“线程池”或“连接池”或许可以缓解部分压力，但是不能解决所有问题。总之，多线程模型可以方便高效的解决小规模的服务请求，但面对大规模的服务请求，多线程模型也会遇到瓶颈，可以用非阻塞接口来尝试解决这个问题。</strong></p><h2 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h2><p>可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：</p><img src="/img/blog/about_python/非阻塞IO.png" style="zoom:80%;" /><p>​当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是用户就可以在本次到下次再发起read询问的时间间隔内做其他事情，或者直接再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存（这一阶段仍然是阻塞的），然后返回。</p><pre><code class="hljs">也就是说非阻塞的recvform系统调用调用之后，进程并没有被阻塞，内核马上返回给进程，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvform系统调用。重复上面的过程，循环往复的进行recvform系统调用。这个过程通常被称之为轮询。轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 非阻塞IO版套接字server端示例第一版</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()<br>sk.setblocking(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 设置为非阻塞，但是没有客户端连接的情况下会报错</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br>sk.listen()<br><br>l = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用于保存连接的客户端</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 如果是阻塞IO模型，没有客户端连接在这里程序会一直等待。</span><br>        <span class="hljs-comment"># 如果是非阻塞IO模型，没有客户端连接会报错，所以要做异常处理</span><br>        conn, addr = sk.accept()<br>        l.append(conn)  <span class="hljs-comment"># 为了方便对多个客户端进行操作，可以将连接上的客户端先统一保存</span><br>    <span class="hljs-keyword">except</span> BlockingIOError:<br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>这样就不会因为某一个客户端导致阻塞，而无法去和其他客户端进行交互了，下面我们继续对连接上的客户端进行操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 非阻塞IO版套接字示例第二版</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()<br>sk.setblocking(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 设置为非阻塞，但是没有客户端连接的情况下会报错</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br>sk.listen()<br><br>l = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用于保存连接的客户端</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 如果是阻塞IO模型，没有客户端连接在这里程序会一直等待。</span><br>        <span class="hljs-comment"># 如果是非阻塞IO模型，没有客户端连接会报错，所以要做异常处理</span><br>        conn, addr = sk.accept()<br>        l.append(conn)  <span class="hljs-comment"># 为了方便对多个客户端进行操作，可以将连接上的客户端先统一保存</span><br>    <span class="hljs-keyword">except</span> BlockingIOError:<br>       <span class="hljs-keyword">for</span> conn <span class="hljs-keyword">in</span> l:  <span class="hljs-comment"># 遍历每一个连接上的客户端，看看有没有数据过来</span><br>           <span class="hljs-keyword">try</span>:<br>               <span class="hljs-comment"># 尝试接收，看看客户端有没有数据过来</span><br>               <span class="hljs-comment"># 如果客户端没有发送数据，还是会报阻塞错误，需要做异常处理</span><br>               <span class="hljs-comment"># 如果客户端强制退出，也会报错，需要进行异常处理</span><br>               info = conn.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>           <span class="hljs-keyword">except</span> BlockingIOError:  <span class="hljs-comment"># 处理客户端没有数据发送过来</span><br>               <span class="hljs-keyword">continue</span><br>           <span class="hljs-keyword">except</span> ConnectionResetError:  <span class="hljs-comment"># 处理客户端强制关闭</span><br>               <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>对于正常退出的客户端以及正常发送数据的客户端进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 非阻塞IO版套接字示例第三版</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()<br>sk.setblocking(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 设置为非阻塞，但是没有客户端连接的情况下会报错</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br>sk.listen()<br><br>l = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用于保存连接的客户端</span><br>del_l = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用于保存没有发送信息要关闭掉的客户端</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 如果是阻塞IO模型，没有客户端连接在这里程序会一直等待。</span><br>        <span class="hljs-comment"># 如果是非阻塞IO模型，没有客户端连接会报错，所以要做异常处理</span><br>        conn, addr = sk.accept()<br>        l.append(conn)  <span class="hljs-comment"># 为了方便对多个客户端进行操作，可以将连接上的客户端先统一保存</span><br>    <span class="hljs-keyword">except</span> BlockingIOError:<br>       <span class="hljs-keyword">for</span> conn <span class="hljs-keyword">in</span> l:  <span class="hljs-comment"># 遍历每一个连接上的客户端，看看有没有数据过来</span><br>           <span class="hljs-keyword">try</span>:<br>               <span class="hljs-comment"># 尝试接收，看看客户端有没有数据过来</span><br>               <span class="hljs-comment"># 如果客户端没有发送数据，还是会报阻塞错误，需要做异常处理</span><br>               <span class="hljs-comment"># 如果客户端强制退出，也会报错，需要进行异常处理</span><br>               info = conn.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>               <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> info:  <span class="hljs-comment"># 如果客户端正常执行了close，服务器会接收到一个空</span><br>                   del_l.append(conn)  <span class="hljs-comment"># 将已经结束的客户端的conn，添加到要删除的列表中</span><br>                   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;客户端正常退出了!&#x27;</span>)<br>                   conn.close()  <span class="hljs-comment"># 因为客户端已经主动close，所以服务器端的conn也要close</span><br>               <span class="hljs-keyword">else</span>:<br>                   <span class="hljs-built_in">print</span>(info)<br>                   conn.send(info.upper().encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 给客户端返回数据</span><br>           <span class="hljs-keyword">except</span> BlockingIOError:  <span class="hljs-comment"># 处理客户端没有数据发送过来</span><br>               <span class="hljs-keyword">continue</span><br>           <span class="hljs-keyword">except</span> ConnectionResetError:  <span class="hljs-comment"># 处理客户端强制关闭</span><br>               <span class="hljs-keyword">continue</span><br>       <span class="hljs-keyword">if</span> del_l:<br>           <span class="hljs-keyword">for</span> conn <span class="hljs-keyword">in</span> del_l:<br>               l.remove(conn)<br>           del_l = []  <span class="hljs-comment"># 在删除完主动关闭的客户端的连接之后，应该把此列表清空，否则报错</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># client端</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><br><br>sk = socket.socket()<br><br>sk.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8080</span>))<br>time.sleep(<span class="hljs-number">3</span>)<br>sk.send(<span class="hljs-string">b&#x27;he&#x27;</span>)<br><span class="hljs-built_in">print</span>(sk.recv(<span class="hljs-number">10</span>))<br>sk.close()<br></code></pre></td></tr></table></figure><p>非阻塞IO的优点：能够在等待任务完成的时间里干其他活了（包括提交其他任务，也就是 “后台” 可以有多个任务在“”同时“”执行）。</p><p>非阻塞IO的缺点：</p><ol><li><p>循环调用recv()将大幅度推高CPU占用率；这也是我们在代码中留一句time.sleep(2)的原因,否则在低配主机下极容易出现卡机情况</p></li><li><p>任务完成的响应延迟增大了，因为每过一段时间才去轮询一次read操作，而任务可能在两次轮询之间的任意时间完成。这会导致整体数据吞吐量的降低。</p></li></ol><p>所以非阻塞IO是非常不推荐的。</p><h2 id="多路复用IO"><a href="#多路复用IO" class="headerlink" title="多路复用IO"></a>多路复用IO</h2><p>​也称这种IO方式为<strong>事件驱动IO</strong>(event driven IO)。它的基本原理就是委托select&#x2F;epoll这个代理function不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。select&#x2F;epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的流程如图：</p><p><img src="/img/blog/about_python/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8IO.png"></p><p>​形象的来理解的话，各种recv或者accept相当于是一个个的小区住户，select代理是门卫老大爷，kernel相当于快递站点，住户自己平时有其他事情要做，就委托老大爷帮忙看看快递啥时候到（委托代理去轮询），老大爷也不可能每隔一段时间就跟住户说一下快递的情况，只有等住户的快递到了（内核层接收到外来的数据），老大爷才会根据不同的快递去通知不同的住户来签收快递（代理只是负责轮询和通知，不负责接收数据）。</p><p>​官方一点来说，当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>​和阻塞IO模型相比，多路复用IO模型在整个机制上可能还要更差一点，因为它需要使用两个系统调用(select和recvfrom)，而阻塞IO只调用了一个系统调用(recvfrom)。但是，用select的优势在于它可以同时处理多个连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># select 模块</span><br>r,w,x = select.select([],[],[])<br><br><span class="hljs-comment"># 使用说明：</span><br><span class="hljs-comment">#1.传入三个列表参数，存放的都是委托select要监听的对象</span><br><span class="hljs-comment">#2.传入的参数分别为 &quot;读&quot;相关的对象（对于客户端来说就是是否有连接请求或者外来数据），&quot;写&quot;相关的对象，&quot;修改&quot;相关的对象</span><br><span class="hljs-comment">#3.返回值也为三个列表类型的值，select监听的某一类对象有动静了，就会把该对象所在的列表返回</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基于select的网络IO模型 server端</span><br><span class="hljs-keyword">import</span> select<br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()<br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br>sk.listen()<br>rlist = [sk]<br>del_l = <span class="hljs-built_in">list</span>()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r, w, x = select.select(rlist, [], [])  <span class="hljs-comment"># 将sk委托给select，让其帮忙监听是否会有连接请求</span><br>    <span class="hljs-keyword">if</span> r:  <span class="hljs-comment"># 如果有连接请求或者外来数据发送请求，r就会有返回值</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r:<br>            <span class="hljs-keyword">if</span> i == sk:  <span class="hljs-comment"># 如果有反应的对象是sk，那么就连接请求的客户端</span><br>                conn, addr = sk.accept()<br>                rlist.append(conn)  <span class="hljs-comment"># 将连接的客户端继续交给select去监听，监听是否会有数据过来</span><br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 如果不是sk有反应，那就是已经连接的客户端有反应了</span><br>                <span class="hljs-keyword">try</span>:<br>                    info = i.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> info:  <span class="hljs-comment"># 接收的数据为空，表示客户端正常断开</span><br>                        del_l.append(i)<br>                        i.close()<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(info)<br>                        i.send((info.upper().encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br>                <span class="hljs-keyword">except</span> ConnectionResetError:  <span class="hljs-comment"># 处理客户端异常断开的情况</span><br>                    <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> del_l:  <span class="hljs-comment"># 删除那些主动断开连接的客户端的conn</span><br>            <span class="hljs-keyword">for</span> conn <span class="hljs-keyword">in</span> del_l:<br>                rlist.remove(conn)<br>            del_l.clear()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># client端</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    res = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>    sk.send(res.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    time.sleep(<span class="hljs-number">1</span>)<br>    info = sk.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-built_in">print</span>(info)<br></code></pre></td></tr></table></figure><p> <strong>注意：</strong></p><ol><li><p>如果处理的连接数不是很高的话，使用select&#x2F;epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select&#x2F;epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</p></li><li><p>在多路复用模型中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p></li></ol><p>所以，select的优势在于可以处理多个连接，不适用于单个连接</p><p>多路复用IO的<strong>优点</strong>：</p><p>​相比其他模型，使用select() 的事件驱动模型只用单线程（进程）执行，占用资源少，不消耗太多 CPU，同时能够为多客户端提供服务。如果试图建立一个简单的事件驱动的服务器程序，这个模型有一定的参考价值。</p><p>多路复用IO的<strong>缺点</strong>：</p><ul><li>首先select()接口并不是实现“事件驱动”的最好选择。因为当需要探测的句柄值较大时，select()接口本身需要消耗大量时间去轮询各个句柄。很多操作系统提供了更为高效的接口，如linux提供了epoll，BSD提供了kqueue，Solaris提供了&#x2F;dev&#x2F;poll，…。如果需要实现更高效的服务器程序，类似epoll这样的接口更被推荐。遗憾的是不同的操作系统特供的epoll接口有很大差异，所以使用类似于epoll的接口实现具有较好跨平台能力的服务器会比较困难。</li><li>其次，该模型将事件探测和事件响应夹杂在一起，一旦事件响应的执行体庞大，则对整个模型是灾难性的。</li></ul><p>select    poll    epoll的区别：</p><ul><li>select 和 poll 有一个共同的机制，都是采用轮训的方式去询问内核，有没有数据准备好了。</li><li>select有一个最大监听事件的限制，32位机限制1024，6位机限制2048；poll没有，理论上poll可以开启无限大，1G内存大概够你开10W个事件去监听。</li><li>epoll是最好的，采用的是回调机制，解决了select和poll共同存在的问题，而且epoll理论上也可以开启无限多个监听事件。</li></ul><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>​异步IO模型在几种模型中是最好的，用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><p><img src="/img/blog/about_python/%E5%BC%82%E6%AD%A5IO.png"></p><p>形象的来说，在异步IO中，没有门卫大爷的角色，只有住户（用户进程）和快递员（数据）。住户先打电话给快递员问一下快递有没有到，没有到的话住户就先去做自己的事情了，等快递到了以后，快递员会主动给住户打电话通知取快递。</p>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 网络编程</title>
    <link href="/2019/06/03/0018-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    <url>/2019/06/03/0018-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="网络基础简介"><a href="#网络基础简介" class="headerlink" title="网络基础简介"></a>网络基础简介</h2><h3 id="一、软件开发架构"><a href="#一、软件开发架构" class="headerlink" title="一、软件开发架构"></a><strong>一、软件开发架构</strong></h3><p>​在日常生活中，我们会使用软件进行聊天，视频，收发文件，搜索浏览等等，其本质都是应用程序间进行通信。我们平时涉及到的两个程序之间通讯的应用大致可以分为两种：</p><p>第一是应用类：qq、微信、网盘、优酷这一类是属于需要安装的桌面应用；</p><p>第二是web类：比如百度、知乎、博客园等使用浏览器访问就可以直接使用的应用；</p><p>这两个分类分别对应了两个软件开发的架构：</p><h4 id="1-1、C-S-架构"><a href="#1-1、C-S-架构" class="headerlink" title="1.1、C&#x2F;S 架构"></a><strong>1.1、C&#x2F;S 架构</strong></h4><p>​C&#x2F;S 即：Client与Server ，中文意思：客户端与服务器端架构，这种架构是从用户层面（也可以是物理层面）来划分的。这里的客户端一般泛指客户端应用程序EXE，程序需要先安装后，才能运行在用户的电脑上，对用户的电脑操作系统环境依赖较大。</p><p>​C&#x2F;S架构的软件可以充分发挥PC机的性能，但是如果软件需要更新或者维护，需要用户重新下载安装相关的补丁，随着功能的叠加，软件本身也会越来越大。</p><h4 id="1-2、B-S-架构"><a href="#1-2、B-S-架构" class="headerlink" title="1.2、B&#x2F;S 架构"></a><strong>1.2、B&#x2F;S 架构</strong></h4><p>​B&#x2F;S即：Browser与Server,中文意思：浏览器端与服务器端架构，这种架构也是从用户层面来划分的。Browser浏览器，其实也是一种Client客户端，只是这个客户端不需要大家去安装什么应用程序，只需在浏览器上通过HTTP请求服务器端相关的资源（网页资源），客户端Browser浏览器就能进行增删改查。严格意义上来说，B&#x2F;S架构也是隶属于C&#x2F;S架构的。</p><p>​B&#x2F;S架构的软件的好处就是统一了应用的接口。服务端进行功能的更新或者维护，是不需要用户后期去参与的。用户始终只需要通过浏览器去使用相关的功能即可。</p><h3 id="二、网络通信"><a href="#二、网络通信" class="headerlink" title="二、网络通信"></a><strong>二、网络通信</strong></h3><h4 id="2-1、相关知识简介"><a href="#2-1、相关知识简介" class="headerlink" title="2.1、相关知识简介"></a><strong>2.1、相关知识简介</strong></h4><p><strong>2.1.1、mac地址</strong></p><p>​mac地址是一个物理地址，ethernet（以太网）规定接入internet的设备都必须具备网卡，发送端和接收端的地址便是指网卡的地址，即mac地址。每块网卡出厂时都被烧制上一个世界唯一的mac地址（和身份证号一样），长度为48位2进制，通常由12位16进制数表示（前六位是厂商编号，后六位是流水线号），在 windows 系统中，在控制台输入 “ipconfig -all” 命令可以查看本机的mac地址。</p><img src="/img/blog/about_python/mac地址.png" style="zoom:67%;" /> <p><strong>2.1.2、ip地址与ip协议</strong></p><p>​虽然有了mac地址，计算机之间可以互相识别，但是计算机之间的通信并不是基于mac地址来的，因为只有mac地址是无法确定计算机的实际位置的，需要ip地址的协助。打个比方，mac地址好比是身份证号码，ip地址好比就是你当前住的地方的地址。你网购买了一件商品，商家需要知道你的当前的住址才能快递给你。如果只有一个身份证号，只能查出你的籍贯地址，但是可能与你当前在的位置不相符（比如你是江苏人，现在在上海工作），这样快递就没法准确的寄给你了。</p><p>ip地址和ip协议有以下特点：</p><ul><li>规定网络地址的协议叫ip协议，它定义的地址称之为ip地址，广泛采用的v4版本即ipv4，它规定网络地址由32位2进制表示</li><li>ip协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</li><li>ip地址是一个逻辑地址</li><li>范围0.0.0.0-255.255.255.255</li><li>一个ip地址通常写成四段十进制数，例：172.16.10.1</li></ul><p><strong>2.1.3、端口</strong></p><p>​我们知道，一台拥有IP地址的主机可以提供许多服务，比如Web服务、FTP服务、SMTP服务等，这些服务完全可以通过1个IP地址来实现。那么问题来了，主机是怎样区分不同的网络服务呢？举个例子，当你和你的朋友聊QQ的时候，你把一条信息发送给对方，为什么那条消息能显示到对方电脑上的QQ对话框，而不是显示到微信的对话框？？显然不只有一个ip地址是不行的，因为IP 地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区分不同的服务的。ip找到对应主机，端口找到主机中某一个服务。</p><p><strong>2.1.4、arp协议</strong></p><p>​地址解析协议，即ARP（Address Resolution Protocol），是<strong>根据目标IP地址获取目标物理地址的一个TCP&#x2F;IP协议</strong>。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址。收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间（一般是十分钟，十分钟后会清除所有记录），下次请求时直接查询ARP缓存以节约资源。</p><p>​地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。相关协议有RARP、代理ARP。NDP用于在IPv6中代替地址解析协议。 </p><p><strong>2.1.5、局域网</strong></p><p>​局域网（Local Area Network，LAN）是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</p><p><strong>2.1.6、网段</strong></p><p>​一个局域网内的ip地址范围。可以通过子网掩码和ip地址计算得出。</p><p><strong>2.1.7、子网掩码</strong></p><p>​所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.10.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>　　知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络（网段）。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。 </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dns">比如，已知IP地址<span class="hljs-number">172.16.10.1</span>和<span class="hljs-number">172.16.10.2</span>的子网掩码都是<span class="hljs-number">255.255.255.0</span>，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，<br><br><span class="hljs-number">172.16.10.1</span>：<span class="hljs-number">10101100</span>.<span class="hljs-number">00010000</span>.<span class="hljs-number">00001010</span>.<span class="hljs-number">000000001</span><br><span class="hljs-number">255255.255.255</span>.<span class="hljs-number">0:11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">00000000</span><br>AND运算得网络地址结果：<span class="hljs-number">10101100</span>.<span class="hljs-number">00010000</span>.<span class="hljs-number">00001010</span>.<span class="hljs-number">000000001</span>-&gt;<span class="hljs-number">172.16.10.0</span><br><br><br><span class="hljs-number">172.16.10.2</span>：<span class="hljs-number">10101100</span>.<span class="hljs-number">00010000</span>.<span class="hljs-number">00001010</span>.<span class="hljs-number">000000010</span><br><span class="hljs-number">255255.255.255</span>.<span class="hljs-number">0:11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">11111111</span>.<span class="hljs-number">00000000</span><br>AND运算得网络地址结果：<span class="hljs-number">10101100</span>.<span class="hljs-number">00010000</span>.<span class="hljs-number">00001010</span>.<span class="hljs-number">000000001</span>-&gt;<span class="hljs-number">172.16.10.0</span><br>结果都是<span class="hljs-number">172.16.10.0</span>，因此它们在同一个子网络。<br></code></pre></td></tr></table></figure><p><strong>2.1.8、交换机</strong></p><p>​交换机（Switch）意为“开关”是一种用于电（光）信号转发的网络设备。它可以为接入交换机的任意两个网络节点提供独享的电信号通路。最常见的交换机是以太网交换机。其他常见的还有电话语音交换机、光纤交换机等。</p><p>​交换是按照通信两端传输信息的需要，用人工或设备自动完成的方法，把要传输的信息送到符合要求的相应路由上的技术的统称。交换机根据工作位置的不同，可以分为广域网交换机和局域网交换机。广域的交换机就是一种在通信系统中完成信息交换功能的设备，它应用在数据链路层。交换机有多个端口，每个端口都具有桥接功能，可以连接一个局域网或一台高性能服务器或工作站。实际上，交换机有时被称为多端口网桥。</p><p><strong>2.1.9、网关</strong></p><p>​大家都知道，从一个房间走到另一个房间，必然要经过一扇门。同样，从一个网络向另一个网络发送信息，也必须经过一道“关口”，这道关口就是网关。网关（Gateway）就是一个网络连接到另一个网络的“关口”。也就是网络关卡。</p><p>​网关(Gateway)又称网间连接器、协议转换器。默认网关在网络层上以实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。网关的结构也和路由器类似，不同的是互连层。网关既可以用于广域网互连，也可以用于局域网互连  。</p><p>​网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的<a href="https://baike.baidu.com/item/IP">IP</a>地址范围为“192.168.1.1<del>192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1</del>192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP&#x2F;IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP&#x2F;IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机（如附图所示）。网络A向网络B转发数据包的过程。</p><p><strong>2.1.10、路由器</strong></p><p>​路由器（Router），是连接因特网中各局域网、广域网的设备，它会根据信道的情况自动选择和设定路由，以最佳路径，按前后顺序发送信号。 路由器是互联网络的枢纽，”交通警察”。目前路由器已经广泛应用于各行各业，各种不同档次的产品已成为实现各种骨干网内部连接、骨干网间互联和骨干网与互联网互联互通业务的主力军。路由和交换机之间的主要区别就是交换机发生在OSI参考模型第二层（数据链路层），而路由发生在第三层，即网络层。这一区别决定了路由和交换机在移动信息的过程中需使用不同的控制信息，所以说两者实现各自功能的方式是不同的。</p><p>　　路由器（Router）又称网关设备（Gateway）是用于连接多个逻辑上分开的网络，所谓逻辑网络是代表一个单独的网络或者一个子网。当数据从一个子网传输到另一个子网时，可通过路由器的路由功能来完成。因此，路由器具有判断网络地址和选择IP路径的功能，它能在多网络互联环境中，建立灵活的连接，可用完全不同的数据分组和介质访问方法连接各种子网，路由器只接受源站或其他路由器的信息，属网络层的一种互联设备。</p><p><strong>路由器和交换机的区别：</strong></p><ul><li><p>交换机的主要功能是组织局域网，经过交换机内部处理解析信息之后，将信息以点对点、点多对的形式，发送给固定端</p></li><li><p>路由器的主要功能: 进行跨网段进行数据传输，路由选择最佳路径。</p></li><li><p>如果你需要将多台电脑连接到一根网线，用交换机即可；如果你只有一个外网ip，但是你有好多台电脑需要上网，用路由器即可。</p></li></ul><h4 id="2-2、通信方式"><a href="#2-2、通信方式" class="headerlink" title="2.2、通信方式"></a><strong>2.2、通信方式</strong></h4><ul><li><strong>点对点通信</strong>：使用一根网线就够了</li></ul><img src="/img/blog/about_python/点对点通信.png" style="zoom:80%;" /> <ul><li>**多个计算机通信：**使用交换机</li></ul><img src="/img/blog/about_python/点对多.png" style="zoom: 67%;" /> <ul><li>**更多计算机之间的通信：**使用路由器和交换机</li></ul><img src="/img/blog/about_python/更多点的通信.png" style="zoom:67%;" /> <p><strong>补充：</strong></p><p>​交换机的通讯方式主要有广播、单播和组播的方式，单播（固定的一对一）和组播（固定的一对多）比较容易理解，下面就广播的通讯方式来举例介绍一下：</p><p>​电脑1(源)要找电脑2(目标)，电脑1首先发送一个请求帧，期中包含(我的ip是192.168.1.1,我的mac地址是xxxxxxxx,我要找ip地址为192.168.1.2的主机)，将此请求发送给交换机。 交换机要广播这条消息给其他所有的主机。目标主机接收到消息后，对比发现自己就是被找的主机，回复给交换机信息(我的ip地址是192.168.1.2,我的mac地址是yyyyyyyyy，请回复给ip地址为192.168.1.1，mac地址为xxxxxxx的主机)，最后交换机以单播形式返回给源主机。</p> <img src="/img/blog/about_python/广播通信.png" style="zoom:67%;" /><h4 id="2-3、应用程序之间的通信协议"><a href="#2-3、应用程序之间的通信协议" class="headerlink" title="2.3、应用程序之间的通信协议"></a><strong>2.3、应用程序之间的通信协议</strong></h4><p>如果说ip地址和mac地址帮我们确定唯一的一台机器，那么应用程序就可以通过应用程序之间的通信协议来确定对应的目标计算机上的目标程序。</p><p><strong>2.3.1、TCP&#x2F;IP 协议</strong></p><p>​当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。全双工表示客户端和服务器均可自由的收发消息，不用在意先后顺序。这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p><ul><li>TCP协议是一种可靠的，面向连接的，面向字节流形式的传输方式。</li><li>TCP协议有三次握手（建立连接时）和四次挥手机制（断开连接时）</li></ul><img src="/img/blog/about_python/三次握手四次挥手.png" style="zoom:80%;" /> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 三次握手</span><br>TCP是因特网中的传输层协议，使用三次握手协议建立连接。当主动方发出SYN连接请求后，等待对方回答SYN+ACK[1]，并最终对对方的 SYN 执行 ACK 确认。这种建立连接的方法可以防止产生错误的连接。[1]<br>TCP三次握手的过程如下：<br>客户端发送SYN（<span class="hljs-attribute">SEQ</span>=x）报文给服务器端，进入SYN_SEND状态。<br>服务器端收到SYN报文，回应一个SYN （<span class="hljs-attribute">SEQ</span>=y）ACK(ACK=x+1）报文，进入SYN_RECV状态。<br>客户端收到服务器端的SYN报文，回应一个ACK(<span class="hljs-attribute">ACK</span>=y+1）报文，进入Established状态。<br>三次握手完成，TCP客户端和服务器端成功地建立连接，可以开始传输数据了。<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 四次挥手</span><br>建立一个连接需要三次握手，而终止一个连接要经过四次握手，这是由TCP的半关闭（half-close）造成的。<br>(<span class="hljs-number">1</span>) 某个应用进程首先调用close，称该端执行“主动关闭”（active close）。该端的TCP于是发送一个FIN分节，表示数据发送完毕。<br>(<span class="hljs-number">2</span>) 接收到这个FIN的对端执行 “被动关闭”（passive close），这个FIN由TCP确认。<br>注意：FIN的接收也作为一个文件结束符（end-of-file）传递给接收端应用进程，放在已排队等候该应用进程接收的任何其他数据之后，因为，FIN的接收意味着接收端应用进程在相应连接上再无额外数据可接收。<br>(<span class="hljs-number">3</span>) 一段时间后，接收到这个文件结束符的应用进程将调用close关闭它的套接字。这导致它的TCP也发送一个FIN。<br>(<span class="hljs-number">4</span>) 接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。<br>既然每个方向都需要一个FIN和一个ACK，因此通常需要<span class="hljs-number">4</span>个分节。<br>注意：<br>(<span class="hljs-number">1</span>) “通常”是指，某些情况下，步骤<span class="hljs-number">1</span>的FIN随数据一起发送，另外，步骤<span class="hljs-number">2</span>和步骤<span class="hljs-number">3</span>发送的分节都出自执行被动关闭那一端，有可能被合并成一个分节。<br>(<span class="hljs-number">2</span>) 在步骤<span class="hljs-number">2</span>与步骤<span class="hljs-number">3</span>之间，从执行被动关闭一端到执行主动关闭一端流动数据是可能的，这称为“半关闭”（half-close）。<br>(<span class="hljs-number">3</span>) 当一个Unix进程无论自愿地（调用<span class="hljs-keyword">exit</span>或从main函数返回）还是非自愿地（收到一个终止本进程的信号）终止时，所有打开的描述符都被关闭，这也导致仍然打开的任何TCP连接上也发出一个FIN。<br>无论是客户还是服务器，任何一端都可以执行主动关闭。通常情况是，客户执行主动关闭，但是某些协议，例如，HTTP/<span class="hljs-number">1.0</span>却由服务器执行主动关闭。<br></code></pre></td></tr></table></figure><p><strong>2.3.2、UDP协议</strong></p><p>当应用程序希望通过UDP与一个应用程序通信时，传输数据之前源端和终端不建立连接。当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。</p><ul><li>UDP协议时不可靠的，不面向连接的，面向数据报的传输方式，但是它速度快。</li></ul><p><strong>2.3.3、TCP和UDP比较</strong></p><p>​TCP（Transmission Control Protocol）传输控制协议，提供的是面向连接、传输效率低、全双工通信（发送缓存&amp;接收缓存）、可靠的字节流服务。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。使用TCP的应用：Web浏览器；电子邮件、文件传输程序。<br>​UDP（User Datagram Protocol）用户数据报协议，是一个简单的面向数据报、无连接的服务，它传输效率高（发送前时延小），是可以一对一、一对多、多对一、多对多的面向报文、尽最大努力服务、无拥塞控制的运输层协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。使用UDP的应用：域名系统 (DNS)；视频流；IP语音。</p><h4 id="2-4、互联网协议和IOS模型"><a href="#2-4、互联网协议和IOS模型" class="headerlink" title="2.4、互联网协议和IOS模型"></a><strong>2.4、互联网协议和IOS模型</strong></h4><p>​一个完整的计算机系统是由硬件、操作系统、应用软件三者组成,具备了这三个条件，一台计算机系统就可以自己跟自己玩了（打个单机游戏，玩个扫雷啥的），如果你要跟别人一起玩，那你就需要上网了。互联网的核心就是由一堆协议组成，协议就是标准，比如全世界人通信的标准是英语，如果把计算机比作人，互联网协议就是计算机界的英语。所有的计算机都学会了互联网协议，那所有的计算机都就可以按照统一的标准去收发信息从而完成通信了。</p><p>人们按照分工不同把互联网协议从逻辑上划分了层级：</p><img src="/img/blog/about_python/IOS模型.png" style="zoom:67%;" /> <p>我们在计算机A上通过QQ，给计算机B发了一个消息，B接收到消息并在自己的屏幕上显示的整个过程，究竟经历了哪些环节呢？</p><img src="/img/blog/about_python/数据通信.png" style="zoom: 67%;" /> <ul><li>首先，用户在计算机A上输入的QQ消息，是在应用层的，先按照文本或文件传输协议（http&#x2F;https&#x2F;ftp）对要发送的数据进行第一层的封装（加上请求头和请求方式之类），将封装好的数据传入传输层；</li><li>数据到达传输层后，再在应用层封装完的数据的基础上按照TCP&#x2F;UDP协议格式再次进行封装（添加报文头之类的），将封装好的数据传入网络层；</li><li>数据到达网络层后，再在传输层封装完的数据的基础上按照IP协议格式再次进行封装，将封装好的数据传入数据链路层；</li><li>数据到达数据链路层后，再在网络层封装完的数据的基础上按照ARP协议格式再次进行封装，将封装好的数据传入物理层；</li><li>数据到达物理层后，会转换成电信号，通过网线、光纤等设备传给计算机B;</li><li>电信号到达计算机B后，会分别经过 物理层 —&gt;   数据链路层 —&gt; 网络层 —&gt; 传输层 —&gt; 应用层 并按照每一层对应的协议进行反解，恢复成最开始的消息。</li></ul><h2 id="socket套接字"><a href="#socket套接字" class="headerlink" title="socket套接字"></a>socket套接字</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><strong>一、简介</strong></h3><p>​Socket是应用层与TCP&#x2F;IP协议族通信（运输层）的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP&#x2F;IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><p>​其实站在我们的角度上看，socket就是一个模块。我们通过调用模块中已经实现的方法建立两个进程之间的连接和通信。也有人将socket说成ip+port，因为ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序。所以我们只要确立了ip和port就能找到一个应用程序，并且使用socket模块来与之通信。</p><h3 id="二、socket中tcp-udp通信流程"><a href="#二、socket中tcp-udp通信流程" class="headerlink" title="二、socket中tcp&#x2F;udp通信流程"></a><strong>二、socket中tcp&#x2F;udp通信流程</strong></h3><img src="/img/blog/about_python/socket_tcp_udp.png" style="zoom: 67%;" /> <h3 id="三、python中的socket模块"><a href="#三、python中的socket模块" class="headerlink" title="三、python中的socket模块"></a><strong>三、python中的socket模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sk = socket.socket(family = AF_INET, <span class="hljs-built_in">type</span>=SOCK_STREAM)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">参数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">1. family :</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">AF_UNIX  基于文件类型的套接字(早期socket是源自于unix系统而研发的一个功能,主要是为了同一台电脑上,多个程序直接通信)  unix系统的中心思想是 : 一切皆文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">AF_INET   基于网络类型的套接字</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.<span class="hljs-built_in">type</span>:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">       基于TCP协议   SOCK_STREAM</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">       基于UDP协议   SOCK_DGRAM</span><br><br></code></pre></td></tr></table></figure><h3 id="四、基于TCP的套接字编程"><a href="#四、基于TCP的套接字编程" class="headerlink" title="四、基于TCP的套接字编程"></a><strong>四、基于TCP的套接字编程</strong></h3><h4 id="4-1-客户端和服务端的连接"><a href="#4-1-客户端和服务端的连接" class="headerlink" title="4.1 客户端和服务端的连接"></a><strong>4.1 客户端和服务端的连接</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试连接  server端</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()  <span class="hljs-comment"># 不传参数,默认使用基于网络类型的套接字, 协议 : TCP</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))  <span class="hljs-comment"># 端口的范围是0-65535   但是 0-1023 这些最好别用</span><br>sk.listen(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 表示最多可以监听5个客户端的连接</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>conn, addr = sk.accept()  <span class="hljs-comment"># 等待接受客户端的连接  没有客户端来连接，代码就阻塞在这里</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br><span class="hljs-built_in">print</span>(conn)  <span class="hljs-comment"># &lt;socket.socket fd=440, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=(&#x27;127.0.0.1&#x27;, 8080), raddr=(&#x27;127.0.0.1&#x27;, 59832)&gt;</span><br><span class="hljs-built_in">print</span>(addr)  <span class="hljs-comment"># (&#x27;127.0.0.1&#x27;, 59832)</span><br><br>conn.close()  <span class="hljs-comment"># 关闭和客户端的连接</span><br>sk.close()  <span class="hljs-comment"># 关闭自己的连接端口</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试连接  client端</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br>time.sleep(<span class="hljs-number">10</span>)<br>sk.close()<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>127.0.0.1 是一个回环地址，每个计算机都有的这么一个本机地址，只能被本机识别，不会被其它机器识别。</li><li>tcp是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端。</li><li>如果遇到端口被占用的错误，可以进行如下配置。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#加入一条socket配置，重用ip和端口</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> SOL_SOCKET,SO_REUSEADDR<br>sk = socket.socket()<br>sk.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="hljs-number">1</span>) <span class="hljs-comment">#就是它，在bind前加</span><br>sk.bind((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8898</span>))<br><span class="hljs-meta">... </span>...<br></code></pre></td></tr></table></figure><h4 id="4-2-客户端和服务端通信"><a href="#4-2-客户端和服务端通信" class="headerlink" title="4.2 客户端和服务端通信"></a><strong>4.2 客户端和服务端通信</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server端</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()  <span class="hljs-comment"># 不传参数,默认使用基于网络类型的套接字, 协议 : TCP</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))  <span class="hljs-comment"># 端口的范围是0-65535   但是 0-1023 这些最好别用</span><br>sk.listen(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 表示最多可以监听5个客户端的连接</span><br><br>conn, addr = sk.accept()  <span class="hljs-comment"># 等待接受客户端的连接  没有客户端来连接，代码就阻塞在这里</span><br><br>conn.send(<span class="hljs-string">&quot;hello&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))  <span class="hljs-comment"># tcp 是基于字节流的传输，所以发送的内容要先编码</span><br>msg = conn.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment"># 每次接收1024字节大小的数据，对接收的内容进行解码</span><br><span class="hljs-built_in">print</span>(msg)<br><br>conn.close()  <span class="hljs-comment"># 关闭和客户端的连接</span><br>sk.close()  <span class="hljs-comment"># 关闭自己的连接端口</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># client 端</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br><span class="hljs-comment"># 由于服务器是先发的数据，所以客户端必须先接收数据</span><br>info = sk.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(info)<br><br>sk.send(<span class="hljs-string">&quot;你好&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>sk.close()<br></code></pre></td></tr></table></figure><p>**注：**由于TCP是基于连接的，所以无论是客户端还是服务器都可以收发数据，没有顺序先后之分（全双工），但是如果某一端是发送的数据，那么另一端必须接收数据（不能同时都是发数据或者接收数据，一定是一发一收。）</p><p><strong>客户端和服务端通信升级版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 持续通信 server</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()  <span class="hljs-comment"># 不传参数,默认使用基于网络类型的套接字, 协议 : TCP</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))  <span class="hljs-comment"># 端口的范围是0-65535   但是 0-1023 这些最好别用</span><br>sk.listen(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 表示最多可以监听5个客户端的连接</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    conn, addr = sk.accept()  <span class="hljs-comment"># 等待接受客户端的连接  没有客户端来连接，代码就阻塞在这里</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        msg_r = conn.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment"># 每次接收1024字节大小的数据，对接收的内容进行解码</span><br>        <span class="hljs-built_in">print</span>(msg_r)<br>        <span class="hljs-keyword">if</span> msg_r == <span class="hljs-string">&quot;q&quot;</span>:<br>            <span class="hljs-keyword">break</span><br><br>        msg_s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>        conn.send(msg_s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))  <span class="hljs-comment"># tcp 是基于字节流的传输，所以发送的内容要先编码</span><br>        <span class="hljs-keyword">if</span> msg_s == <span class="hljs-string">&quot;q&quot;</span>:<br>            <span class="hljs-keyword">break</span><br><br>    conn.close()  <span class="hljs-comment"># 关闭和当前客户端的连接，此时其他客户端还是可以连接的</span><br>sk.close()  <span class="hljs-comment"># 关闭自己的连接端口，这时所有客户端都无法连接了</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 持续通信 client</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br><br>    msg_s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>    sk.send(msg_s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">if</span> msg_s == <span class="hljs-string">&quot;q&quot;</span>:<br>        <span class="hljs-keyword">break</span><br><br>    msg_r = sk.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-built_in">print</span>(msg_r)<br>    <span class="hljs-keyword">if</span> msg_r == <span class="hljs-string">&quot;q&quot;</span>:<br>        <span class="hljs-keyword">break</span><br><br>sk.close()<br></code></pre></td></tr></table></figure><h4 id="4-3-客户端与多个服务器之间通信"><a href="#4-3-客户端与多个服务器之间通信" class="headerlink" title="4.3 客户端与多个服务器之间通信"></a><strong>4.3 客户端与多个服务器之间通信</strong></h4><p>​还是使用上述代码，当开启多个客户端，都给服务器发送消息时，你会发现服务器可以和所有客户端建立连接，但是永远只能和最先建立连接的客户端进行通信；对于其他客户端，只有将当前与服务器连接的客户端断开，他们才能开始和服务器进行通信。这就是TCP协议通信的弊端</p><p><strong>基于UDP的套接字编程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server 端</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket(<span class="hljs-built_in">type</span>=socket.SOCK_DGRAM)  <span class="hljs-comment"># 基于udp协议</span><br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    msg_r, addr = sk.recvfrom(<span class="hljs-number">1024</span>)  <span class="hljs-comment"># 从哪里接收消息</span><br>    <span class="hljs-built_in">print</span>(addr)<br>    <span class="hljs-built_in">print</span>(msg_r.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    msg_s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>    sk.sendto(msg_s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>), addr)  <span class="hljs-comment"># 给谁发消息</span><br><br>sk.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># client 端</span><br><span class="hljs-keyword">import</span> socket<br><br>sk = socket.socket(<span class="hljs-built_in">type</span>=socket.SOCK_DGRAM)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    msg_s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>)<br>    sk.sendto(msg_s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), (<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>))  <span class="hljs-comment"># 给这个地址发消息</span><br>    msg_r, addr = sk.recvfrom(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(msg_r.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-built_in">print</span>(addr)<br>sk.close()<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>由于udp不是面向连接通信的，启动服务之后可以直接接受消息，不需要提前建立链接，因此不必先启动客户端</li><li>udp通信必须先有客户端发出消息，否则服务器无法知道客户端的地址，就没有办法返回消息了</li></ul><p><strong>客户端与多个服务器之间通信</strong></p><p>​还是使用上述代码，当开启多个客户端，都给服务器发送消息时，服务器都可以接收到。</p><h2 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h2><h3 id="一、粘包问题简介"><a href="#一、粘包问题简介" class="headerlink" title="一、粘包问题简介"></a><strong>一、粘包问题简介</strong></h3><p>粘包问题时指，发送端发送数据，接收端不知道应该如何去接收而造成的一种数据混乱的现象。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># server 端</span><br>conn.send(<span class="hljs-string">b&quot;hello&quot;</span>)<br>conn.send(<span class="hljs-string">b&quot;world&quot;</span>)<br><br><span class="hljs-comment"># client 端</span><br><span class="hljs-built_in">print</span>(sk.recv(<span class="hljs-number">1024</span>))<br><span class="hljs-built_in">print</span>(sk.recv(<span class="hljs-number">1024</span>))<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-string">b&quot;helloworld&quot;</span><br><span class="hljs-string">b&quot;&quot;</span><br><br><span class="hljs-comment"># 显然正确的结果应该是</span><br><span class="hljs-string">b&quot;hello&quot;</span><br><span class="hljs-string">b&quot;world&quot;</span><br></code></pre></td></tr></table></figure><p>需要强调的是，udp协议通信是不会发生粘包现象的，该现象只会在tcp中发生。这是由于tcp中有合包和拆包的机制。</p><p>1、tcp的合包机制（Nagle算法）</p><img src="/img/blog/about_python/合包.png" style="zoom:50%;" /> <p>​如图所示，在服务器发送数据时，由于采用了Nagle算法来优化性能，服务器端会将多次连续发送且间隔较小的数据，进行打包成一块数据传送。当数据发送到客户端时，客户端就会一次接收所有的数据 ，从而导致数据粘包。</p><p>2、拆包机制</p><img src="/img/blog/about_python/拆包.png" style="zoom: 67%;" /> <p>​如图所示，在发送端，因为受到网卡的MTU限制，会将大的超过MTU限制的数据拆分成多个小的数据进行传输。 当传输到目标主机的操作系统层时，会重新将多个小的数据合并成原本的数据。</p><p>​比如发送端传输一个1500大小的文件，由于MTU限制，会拆分成3个500大小数据再传输。由于网络问题，小数据块的传输可能不会按照顺序，但是都会停留在接收端的缓冲区，等待所有的小数据块都到了之后再被接收端接收。</p><p>​在接收端，由于不知道目标文件的大小，每次都接收固定大小的内容（比如每次接收1000），直到所有的小数据块都被接收完。这样看似没有什么问题，但是如果和途中所示，发送端连续传了两个1500的文件，此时接收端在第二次接收1000大小的数据时，实际上分别包含了第一个文件的部分内容和第二个文件的部分内容，此时对数据进行解析的话，就会出现数据混乱的问题。</p><p>​而在udp中不会出现粘包，这是因为udp是不可靠的，它不能保证数据传输的完整性，它更注重于怎么快速的让接收端接收到数据，至于数据内容是什么，并不关心。那么针对使用udp协议发送数据，一次收发大小究竟多少才合适呢？</p><p>​udp协议本层对一次收发数据大小的限制是：65535 - ip包头(20) - udp包头(8) &#x3D; 65507；站在数据链路层，因为网卡的MTU一般被限制在了1500，所以对于数据链路层来说，一次收发数据的大小被限制在 1500 - ip包头(20) - udp包头(8) &#x3D; 1472。因此，如果使用udp传输数据，如果数据大小  num &gt; 65507 ，则会报错；如果 1472 &lt; num &lt; 65507，则数据会在数据链路层拆包，而udp本身就是不可靠协议，所以一旦拆包之后的多个小数据包在网络传输中，如果丢任何一个，那么此次数据传输失败。所以 num &lt; 1472 是比较理想的状态。</p><h3 id="二、解决粘包"><a href="#二、解决粘包" class="headerlink" title="二、解决粘包"></a><strong>二、解决粘包</strong></h3><p>我们可以先通知接收端要传输的数据的大小，这样接收端就可以提前规划接收的策略，避免粘包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解决文件传输的粘包现象  client</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8001</span>))<br>menu = &#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;upload&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;download&quot;</span>&#125;<br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> menu.items():<br>    <span class="hljs-built_in">print</span>(k, v)<br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入功能选项:&quot;</span>)<br><span class="hljs-keyword">if</span> num == <span class="hljs-string">&quot;1&quot;</span>:<br>    dic = &#123;<span class="hljs-string">&quot;opt&quot;</span>: menu.get(num), <span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;filesize&quot;</span>: <span class="hljs-literal">None</span>&#125;<br>    file_path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个绝对路径:&quot;</span>)  <span class="hljs-comment"># 文件的绝对路径</span><br>    filename = os.path.basename(file_path)  <span class="hljs-comment"># 文件名字</span><br>    filesize = os.path.getsize(file_path)  <span class="hljs-comment"># 获取用户输入的路径中文件的大小</span><br><br>    dic[<span class="hljs-string">&quot;filename&quot;</span>] = filename<br>    dic[<span class="hljs-string">&quot;filesize&quot;</span>] = filesize<br>    str_dic = json.dumps(dic)<br>    sk.send(str_dic.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))  <span class="hljs-comment"># 将被填充完成的字典先发送给服务器</span><br>    sk.recv(<span class="hljs-number">1024</span>)  <span class="hljs-comment"># 为什么要有一个recv？</span><br>    <span class="hljs-comment">#  因为上边send字典时，如果程序执行过快，可能会马上执行到下边的send(content)</span><br>    <span class="hljs-comment">#  此时有可能会发生粘包，所以在此中间加一个recv,为了避免粘包</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">while</span> filesize:<br>            content = f.read(<span class="hljs-number">1024</span>)<br>            sk.send(content)<br>            filesize -= <span class="hljs-built_in">len</span>(content)<br><br><span class="hljs-keyword">elif</span> num == <span class="hljs-string">&quot;2&quot;</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解决文件传输的粘包现象  server</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> json<br><br>sk = socket.socket()<br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8001</span>))<br>sk.listen()<br>conn, addr = sk.accept()<br>str_dic = conn.recv(<span class="hljs-number">100</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>conn.send(<span class="hljs-string">b&#x27;ok&#x27;</span>)  <span class="hljs-comment"># 防止粘包</span><br>dic = json.loads(str_dic)<br><span class="hljs-keyword">if</span> dic[<span class="hljs-string">&quot;opt&quot;</span>] == <span class="hljs-string">&quot;upload&quot;</span>:<br>    filename = <span class="hljs-string">&quot;1&quot;</span> + dic[<span class="hljs-string">&quot;filename&quot;</span>]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;ab&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">while</span> dic[<span class="hljs-string">&#x27;filesize&#x27;</span>]:<br>            content = conn.recv(<span class="hljs-number">1024</span>)<br>            f.write(content)<br>            dic[<span class="hljs-string">&#x27;filesize&#x27;</span>] -= <span class="hljs-built_in">len</span>(content)<br><br><span class="hljs-keyword">elif</span> dic[<span class="hljs-string">&quot;opt&quot;</span>] == <span class="hljs-string">&quot;download&quot;</span>:<br>    <span class="hljs-keyword">pass</span><br><br>conn.close()<br>sk.close()<br></code></pre></td></tr></table></figure><p>​上述思路是先将要传输的文件的信息封装在一个字典中，将文件信息先发给接收端，这样接收端就可以提前知道文件的大小了。但是这个思路还存在一个问题，虽然接收端可以通过字典信息来得到文件的大小，但是前提是接收端必须先接收该字典，但是字典的长度接收端在一开始是不知道的，如果接收的阈值定的太小，很有可能会导致字典信息接收的不完整从而无法反序列化。</p><p>​按照这个思路，我们可以先发送一下这个字典的长度，但是字典的长度也是不固定的，接收端到底要接收多大呢？这时候我们就可以使用 python 中的一个第三方模块 struct 来解决该问题。struct模块可以将不同长度的数字都转换成一个标准大小的4字节数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>a = <span class="hljs-number">2140000000</span><br>pack_res = struct.pack(<span class="hljs-string">&quot;i&quot;</span>, a)  <span class="hljs-comment"># 转换</span><br><span class="hljs-built_in">print</span>(pack_res)  <span class="hljs-comment"># b&#x27;\x00\xcf\x8d\x7f&#x27;</span><br>unpack_res = struct.unpack(<span class="hljs-string">&quot;i&quot;</span>, pack_res)  <span class="hljs-comment"># 反转</span><br><span class="hljs-built_in">print</span>(unpack_res)  <span class="hljs-comment"># (2140000000,)</span><br></code></pre></td></tr></table></figure><p>所以，我们可以使用struct模块对字典信息的长度进行一个转换，这样每次接收端都固定的接收前4个字节就可以知道字典的长度了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用struct优化  client</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> struct<br>sk = socket.socket()<br>sk.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8001</span>))<br>menu = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;upload&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;download&quot;</span>&#125;<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> menu.items():<br>    <span class="hljs-built_in">print</span>(k,v)<br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入功能选项:&quot;</span>)<br><span class="hljs-keyword">if</span> num == <span class="hljs-string">&quot;1&quot;</span>:<br>    dic = &#123;<span class="hljs-string">&quot;opt&quot;</span>:menu.get(num),<span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-literal">None</span>,<span class="hljs-string">&quot;filesize&quot;</span>:<span class="hljs-literal">None</span>&#125;<br>    file_path = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入一个绝对路径:&quot;</span>)<span class="hljs-comment"># 文件的绝对路径</span><br>    <span class="hljs-comment"># E:\Python S14\day32\实现大文件的传输\11.mp4</span><br>    filename = os.path.basename(file_path)<span class="hljs-comment"># 文件名字</span><br>    filesize = os.path.getsize(file_path)<span class="hljs-comment"># 获取用户输入的路径中文件的大小</span><br>    dic[<span class="hljs-string">&quot;filename&quot;</span>] = filename<br>    dic[<span class="hljs-string">&quot;filesize&quot;</span>] = filesize<br>    str_dic = json.dumps(dic)<br>    len_dic = <span class="hljs-built_in">len</span>(str_dic)<span class="hljs-comment"># 获取到字典的长度，是一个int类型的数据   46   146</span><br>    b_len_dic = struct.pack(<span class="hljs-string">&#x27;i&#x27;</span>,len_dic)<span class="hljs-comment"># 用一个4bytes的数据表示字典的长度</span><br><br>    sk.send(b_len_dic + str_dic.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<span class="hljs-comment"># 将bytes类型的字典的长度 + bytes类型的字典的内容，一起发送给服务器</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">while</span> filesize:<br>            content = f.read(<span class="hljs-number">1024</span>)<br>            sk.send(content)<br>            filesize -= <span class="hljs-built_in">len</span>(content)<br><br><span class="hljs-keyword">elif</span> num == <span class="hljs-string">&quot;2&quot;</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用struct优化  server</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> struct<br>sk = socket.socket()<br>sk.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8001</span>))<br>sk.listen()<br>conn,addr = sk.accept()<br>b_len_dic = conn.recv(<span class="hljs-number">4</span>)<br>len_dic = struct.unpack(<span class="hljs-string">&#x27;i&#x27;</span>,b_len_dic)[<span class="hljs-number">0</span>]<span class="hljs-comment"># 获取到int类型字典的长度，</span><br><span class="hljs-comment"># unpack得到的是一个元组，要取下标为0的位置</span><br>str_dic = conn.recv(len_dic).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-comment"># str_dic = &#123;&quot;opt&quot;:menu.get(num),&quot;filename&quot;:None,&quot;filesize&quot;:None&#125;</span><br>dic = json.loads(str_dic)<br><span class="hljs-keyword">if</span> dic[<span class="hljs-string">&quot;opt&quot;</span>] == <span class="hljs-string">&quot;upload&quot;</span>:<br>    filename = <span class="hljs-string">&quot;1&quot;</span>+ dic[<span class="hljs-string">&quot;filename&quot;</span>]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename,<span class="hljs-string">&quot;ab&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">while</span> dic[<span class="hljs-string">&#x27;filesize&#x27;</span>]:<br>            content = conn.recv(<span class="hljs-number">1024</span>)<br>            f.write(content)<br>            dic[<span class="hljs-string">&#x27;filesize&#x27;</span>] -= <span class="hljs-built_in">len</span>(content)<br><br><span class="hljs-keyword">elif</span> dic[<span class="hljs-string">&quot;opt&quot;</span>] == <span class="hljs-string">&quot;download&quot;</span>:<br>    <span class="hljs-comment"># 客户端发来一个字典要执行的功能，以及客户端自己的绝对路径</span><br>    <span class="hljs-comment"># 服务器要返回这个绝对路径中所有文件及文件夹</span><br>    <span class="hljs-comment"># 客户端自己选择进入到哪一层目录下</span><br>    <span class="hljs-comment"># 服务器都要返回对应目录下所有文件及文件夹</span><br>    <span class="hljs-comment"># 客户随时选择某一个目录下的某一个文件进行下载</span><br><br><br>    <span class="hljs-comment"># 客户端发送来一个字典，包含了要进行的操作，要下载的文件的绝对路径，</span><br>    <span class="hljs-comment"># 根据绝对路径去读取文件内容</span><br>    <span class="hljs-comment"># 一边读，一遍发</span><br>    <span class="hljs-keyword">pass</span><br><br>conn.close()<br>sk.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 协程开发</title>
    <link href="/2019/05/22/0017-%E5%8D%8F%E7%A8%8B/"/>
    <url>/2019/05/22/0017-%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="协程引入"><a href="#协程引入" class="headerlink" title="协程引入"></a>协程引入</h2><p>​之前我们学习了线程、进程的概念，了解了在操作系统中**进程是资源分配的最小单位,线程是CPU调度的最小单位。**按道理来说我们已经算是把 CPU 的利用率提高很多了。但是我们知道无论是创建多进程还是创建多线程来解决问题，都要消耗一定的时间来创建进程、创建线程、以及管理他们之间的切换。</p><p>　　随着我们对于效率的追求不断提高，<strong>基于单线程来实现并发</strong>又成为一个新的课题，即只用一个主线程（很明显可利用的 CPU 只有一个）情况下实现并发。这样就可以节省创建线进程所消耗的时间。</p><p>​CPU 正在运行一个任务，会在两种情况下切走去执行其他的任务（切换由操作系统强制控制），一种情况是该任务发生了阻塞（IO 请求等），另外一种情况是该任务计算的时间过长（CPU 分配的时间片用完了）。在单线程中，如果存在多个函数，有某个函数发生 IO 操作，我们想让程序马上切换到另一个函数去执行，以此来实现一个假的并发现象，提高 CPU 的利用率。</p><p>​为此我们需要先回顾下并发的本质：切换+保存状态。我们可以借助 yield 去实现假的并发现象，因为 yield 本身就可以实现保存状态的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">111</span>)<br>    num = <span class="hljs-number">100</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">222</span>)<br>    <span class="hljs-keyword">yield</span> num<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">333</span>)<br>    <span class="hljs-keyword">yield</span> num + <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">444</span>)<br>    <span class="hljs-keyword">yield</span> num + <span class="hljs-number">2</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fff</span>():<br>    g = func()  <span class="hljs-comment"># 并不会执行func函数，只是得到一个生成器对象</span><br>    <span class="hljs-built_in">print</span>(g.__next__())  <span class="hljs-comment">#  真正开始执行 func 函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(g.__next__())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bbb&quot;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(g.__next__())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ccc&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    fff()<br></code></pre></td></tr></table></figure><p>每一次使用 next 取值，都是接着上一次的 yield 的位置继续往后执行，并没有重新从头开始，所以在两个函数的切换过程中，会保留原来的执行状态。那么我们就尝试使用 yield 去实现一个单线程内的伪并发，并和普通的循环实现对比效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 普通for循环</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">l</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;吃了包子%s&quot;</span> % i)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>():<br>    l = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000000</span>):<br>        l.append(<span class="hljs-string">&quot;包子%s&quot;</span> % (i + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> l<br><br><br>start = time.time()<br>l = producer()<br>consumer(l)<br><span class="hljs-built_in">print</span>(time.time() - start)  <br><br><br><span class="hljs-comment"># 使用yield实现伪并发</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = <span class="hljs-keyword">yield</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;吃了包子%s&quot;</span> % x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">producer</span>():<br>    g = consumer()<br>    <span class="hljs-built_in">next</span>(g)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000000</span>):<br>        g.send(<span class="hljs-string">&quot;包子%s&quot;</span> % (i + <span class="hljs-number">1</span>))<br><br><br>start = time.time()<br>producer()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;yield:&#x27;</span>, time.time() - start)<br></code></pre></td></tr></table></figure><p>​测试可得当生产者的生产数量越大，yield 的好处就越明显。但是，yield 只能实现单纯的切换函数和保存函数状态的功能，不能实现当某一个函数遇到IO阻塞时，自动的切换到另一个函数去执行。如果只是拿yield去单纯的实现一个切换的现象，你会发现根本没有程序串行执行效率高。在Python中，有专门的实现此类功能的机制，我们称之未协程机制。协程的本质还是主要依靠于yield去实现的。</p><h2 id="协程介绍"><a href="#协程介绍" class="headerlink" title="协程介绍"></a>协程介绍</h2><p>​协程是一个比线程更加轻量级的单位，是组成线程的各个函数，是单线程下的并发，又称微线程，纤程，协程本身没有实体。协程的本质是在单线程下，由用户自己控制一个任务遇到IO阻塞了就切换另外一个任务去执行，以此来提升效率。所以协程必须具备以下的要求：</p><ul><li><p>可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停的位置继续执行。（切换+保存状态）</p></li><li><p>作为上述条件的补充，协程还可以检测IO操作，在遇到IO操作的情况下才发生切换。</p></li></ul><p>协程具有以下特点：</p><ol><li>必须在只有一个单线程里实现并发</li><li>修改共享数据不需加锁</li><li>用户程序里自己保存多个控制流的上下文栈</li><li>一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet 都无法实现，就用到了gevent 模块（select机制））</li></ol><h2 id="协程的使用"><a href="#协程的使用" class="headerlink" title="协程的使用"></a>协程的使用</h2><h3 id="一、greenlet"><a href="#一、greenlet" class="headerlink" title="一、greenlet"></a><strong>一、greenlet</strong></h3><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-meta"># greenlet 只是可以实现一个简单的切换功能，还是不能做到遇到IO就切换</span><br><span class="hljs-meta"># g1 = greenlet(<span class="hljs-keyword">func</span>)   实例化一个对象，<span class="hljs-keyword">func</span>为要执行的函数</span><br><span class="hljs-meta"># g1.switch()  用这种方式去调用<span class="hljs-keyword">func</span>函数，<span class="hljs-keyword">func</span>需要的参数也在这里传入，只需要在第一次调用的时候传入一次即可</span><br><br><span class="hljs-meta"># 当使用switch调用<span class="hljs-keyword">func</span>的时候，什么时候<span class="hljs-keyword">func</span>会停止运行？</span><br><span class="hljs-meta">#   <span class="hljs-number">1</span> 要么return      </span><br><span class="hljs-meta">#   <span class="hljs-number">2</span> 要么在<span class="hljs-keyword">func</span>内部又遇到 switch</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> greenlet <span class="hljs-keyword">import</span> greenlet<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s在吃炸鸡&quot;</span> % name)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    f2.switch(<span class="hljs-string">&quot;tr&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s在吃烤肉&quot;</span> % name)<br>    f2.switch()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">drink</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s喝啤酒&#x27;</span> % name)<br>    f1.switch()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s喝可乐&#x27;</span> % name)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    f1 = greenlet(eat)<br>    f2 = greenlet(drink)<br>    f1.switch(<span class="hljs-string">&quot;cdc&quot;</span>)<br></code></pre></td></tr></table></figure><p>和 yield 一样，虽然实现了函数间的切换，但是无法做到遇到IO阻塞自动切换，还是会等待IO结束再顺序执行下去。</p><h3 id="二、gevent"><a href="#二、gevent" class="headerlink" title="二、gevent"></a><strong>二、gevent</strong></h3><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-meta"># gevent 可以实现  当函数中遇到io操作时，就自动的切换到另一个函数</span><br><span class="hljs-meta"># g1 = gevent.spawn(<span class="hljs-keyword">func</span>,参数)</span><br><span class="hljs-meta"># gevent.join(g1) 等待g1指向的任务执行结束</span><br><span class="hljs-meta"># gevent.joinall([g1,g2,g3,g4])  等待g1,g2,g3,g4指向的多个任务执行结束</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">func</span>停止的原因: </span><br><span class="hljs-meta">#<span class="hljs-number">1</span> <span class="hljs-keyword">func</span>执行完了     </span><br><span class="hljs-meta">#<span class="hljs-number">2</span> 遇到IO操作了</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 2 3 4&quot;</span>)<br>    gevent.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># time.sleep(1)  # gevent只能识别特定的IO操作，time.sleep无法识别</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3 2 3 4&quot;</span>)<br>    gevent.sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2 2 3 4&quot;</span>)<br>    gevent.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再来一次&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    g1 = gevent.spawn(func1)<br>    g2 = gevent.spawn(func2)<br>    g1.join()  <span class="hljs-comment"># 等待g1指向的任务执行结束</span><br></code></pre></td></tr></table></figure><p>gevent 只能识别特定的 IO 操作，我们可以使用如下方式，让 gevent 能识别大多数的 IO 操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey<br>monkey.patch_all()  <span class="hljs-comment"># 让gevent 可以识别大多数的IO操作</span><br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 2 3 4&quot;</span>)<br>    <span class="hljs-comment"># gevent.sleep(1)</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3 2 3 4&quot;</span>)<br>    <span class="hljs-comment"># gevent.sleep(1)</span><br>    time.sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2 2 3 4&quot;</span>)<br>    <span class="hljs-comment"># gevent.sleep(1)</span><br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再来一次&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    g1 = gevent.spawn(func1)<br>    g2 = gevent.spawn(func2)<br>    g1.join()  <span class="hljs-comment"># 等待g1指向的任务执行结束</span><br></code></pre></td></tr></table></figure><h4 id="串行和并发的效率比较"><a href="#串行和并发的效率比较" class="headerlink" title="串行和并发的效率比较"></a><strong>串行和并发的效率比较</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey<br>monkey.patch_all()<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(num)<br><br><br><span class="hljs-comment"># 串行</span><br>start_1 = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    func(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;串行执行时间为：%s&quot;</span> % (time.time() - start_1))<br><br><span class="hljs-comment"># 并行</span><br>start_2 = time.time()<br>l = <span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    l.append(gevent.spawn(func, i))<br>gevent.joinall(l)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;并行执行时间为：%s&quot;</span> % (time.time() - start_2))<br></code></pre></td></tr></table></figure><p>串行花了十秒多，并行只花了一秒多，差距还是比较明显的。</p><h4 id="爬虫效率对比"><a href="#爬虫效率对比" class="headerlink" title="爬虫效率对比"></a><strong>爬虫效率对比</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gevent<br><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey<br>monkey.patch_all()<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-comment"># 任务函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_response</span>(<span class="hljs-params">url</span>):<br>    res = requests.get(url)<br>    <span class="hljs-built_in">print</span>(url, res.status_code, <span class="hljs-built_in">len</span>(res.text))<br><br><br><span class="hljs-comment"># 串行去爬取(同步调用)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sync_func</span>(<span class="hljs-params">url_l</span>):<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_l:<br>        get_response(url)<br><br><br><span class="hljs-comment"># 并行去爬取，异步调用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">async_func</span>(<span class="hljs-params">url_l</span>):<br>    tasks = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_l:<br>        <span class="hljs-comment"># 使用gevent协程去并发实现执行任务函数，当遇见请求某个网页发生比较大的网络延迟（IO），马上会切换到其他的任务函数</span><br>        tasks.append(gevent.spawn(get_response, url))<br>    gevent.joinall(tasks)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    urls = [<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;http://www.jd.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;http://www.taobao.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;http://www.qq.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;http://www.mi.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;http://www.cnblogs.com&#x27;</span>]<br><br>    start_sync = time.time()<br>    sync_func(urls)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;串行执行任务的时间：%s&quot;</span> % (time.time() - start_sync))<br><br>    start_async = time.time()<br>    async_func(urls)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;串行执行任务的时间：%s&quot;</span> % (time.time() - start_async))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 多线程开发</title>
    <link href="/2019/05/20/0016-%E7%BA%BF%E7%A8%8B/"/>
    <url>/2019/05/20/0016-%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h2><h3 id="一、进程的优缺点"><a href="#一、进程的优缺点" class="headerlink" title="一、进程的优缺点"></a><strong>一、进程的优缺点</strong></h3><p>​在操作系统中，程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程。程序和进程的区别就在于：程序是指令的集合，它是进程运行的静态描述文本；进程是程序的一次执行活动，属于动态概念。在多道编程中，我们允许多个程序同时加载到内存中，在操作系统的调度下，可以实现并发地执行。正是这样的设计，大大提高了CPU的利用率。进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的。</p><p>进程有很多优点，它提供了多道编程，让我们感觉我们每个人都拥有自己的CPU和其他资源，可以提高计算机的利用率。很多人就不理解了，既然进程这么优秀，为什么还要线程呢？其实，仔细观察就会发现进程还是有很多缺陷的，主要体现在两点上：</p><ol><li>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</li><li>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</li></ol><p>例如：如果把我们上课的过程看成一个进程的话，那么我们要做的是耳朵听老师讲课，手上还要记笔记，脑子还要思考问题，这样才能高效的完成听课的任务。而如果只提供进程这个机制的话，上面这三件事将不能同时执行，同一时间只能做一件事，听的时候就不能记笔记，也不能用脑子思考，这是其一；如果老师在黑板上写演算过程，我们开始记笔记，而老师突然有一步推不下去了，阻塞住了，他在那边思考着，而我们呢，也不能干其他事，即使你想趁此时思考一下刚才没听懂的一个问题都不行，这是其二。所以，我们完全可以让听、写、思三个独立的过程，并行起来，这样很明显可以提高听课的效率。而实际的操作系统中，也同样引入了这种类似的机制——线程。</p><h3 id="二、线程的特点"><a href="#二、线程的特点" class="headerlink" title="二、线程的特点"></a><strong>二、线程的特点</strong></h3><ul><li><p>线程被称作轻量级的进程。计算机的执行是以线程为单位的，即计算机的最小可执行单位是线程。</p></li><li><p>进程是资源分配的基本单位；线程是可执行的基本单位，是可被调度的基本单位。</p></li><li><p>线程不可以自己独立拥有资源。线程的执行，必须依赖于所属进程中的资源。</p></li><li><p>进程中必须至少应该有一个线程。</p></li><li><p>线程又分为用户级线程和内核级线程：</p><p>1）用户级线程：对于程序员来说的，这样的线程完全被程序员控制执行，调度</p><p>2）内核级下线程：对于计算机内核来说的，这样的线程完全被内核控制调度</p></li><li><p>线程由三个部分组成：</p><p>1）代码段</p><p>2）数据段</p><p>3）TCB (thread control block，类似于进程中的进程控制块)</p></li></ul><h3 id="三、线程和进程的比较"><a href="#三、线程和进程的比较" class="headerlink" title="三、线程和进程的比较"></a><strong>三、线程和进程的比较</strong></h3><ol><li><p>在 CPU 的切换上，进程要比线程慢的多；在 python 中，如果 IO 操作过多，最好使用线程。</p></li><li><p>在同一个进程内，所有线程共享这个进程的 pid，也就是说所有线程共享所属进程的所有资源和内存地址，但是线程间的资源不共享。</p></li><li><p>在同一个进程内，所有线程共享该进程中的全局变量；</p></li><li><p>关于守护进程和守护线程（注意：代码执行结束并不代表着程序结束）：</p><p>1）守护进程：要么自己正常结束，要么根据父进程的代码执行结束而结束</p><p>2）守护线程：要么自己正常结束，要么根据父线程的执行结束而结束</p></li><li><p>在 CPython 解释器中，因为 GIL锁（全局解释器锁）的存在，在Cpython中，没有真正的线程并行，但是有真正的多进程并行。</p></li><li><p>在CPython中，IO密集用多线程，计算密集用多进程。</p></li></ol><h3 id="四、全局解释器锁GIL"><a href="#四、全局解释器锁GIL" class="headerlink" title="四、全局解释器锁GIL"></a><strong>四、全局解释器锁GIL</strong></h3><p>Python代码的执行由Python虚拟机(也叫解释器主循环)来控制。Python在设计之初就考虑到要在主循环中，同时只有一个线程在执行。虽然 Python 解释器中可以“运行”多个线程，但在任意时刻只有一个线程在解释器中运行。对Python虚拟机的访问由全局解释器锁(GIL)来控制，正是这个锁能保证同一时刻只有一个线程在运行。</p><p>不管计算机时单核还是多核，在多线程运行的情况下，GIL锁限制在同一时间，只能有一个线程使用 CPU，虚拟机具体按如下方式调度线程：</p><p>​a、设置 GIL；</p><p>　　b、切换到一个线程去运行；</p><p>　　c、限制线程执行固定数量的 bytecode 或者限制每个线程的执行时间（一般为5ms）;</p><p>　　d、把线程设置为睡眠状态；</p><p>　　e、解锁 GIL；</p><p>　　d、再次重复以上所有步骤。</p><p>只有在 CPython 解释器中才存在 GIL 锁问题，JPython、PyPy 等均不存在该问题。</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>方式一：直接创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个子线程&quot;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 直接开启，线程的使用不需要有 mian 入口，但是为了编码规范，还是要统一加上</span><br><span class="hljs-comment"># t = Thread(target=func, args=())</span><br><span class="hljs-comment"># t.start()</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = Thread(target=func, args=())<br>    t.start()<br></code></pre></td></tr></table></figure><p>方式二：通过类继承方式开启</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MyThread, <span class="hljs-variable language_">self</span>).__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;启动子线程&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = MyThread()<br>    t.start()<br></code></pre></td></tr></table></figure><h2 id="线程和进程的对比"><a href="#线程和进程的对比" class="headerlink" title="线程和进程的对比"></a>线程和进程的对比</h2><ul><li>时间方面，开启多个线程的速度比进程快</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p_start = time.time()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        p = Process(target=func, args=())<br>        p.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开启1000个进程的时间：%s&quot;</span> % (time.time() - p_start))<br><br>    t_start = time.time()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        t = Thread(target=func, args=())<br>        t.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开启1000个线程的时间：%s&quot;</span> % (time.time() - t_start))<br>    <br><span class="hljs-comment"># 开启1000个进程的时间：21.92893147468567</span><br><span class="hljs-comment"># 开启1000个线程的时间：0.17453241348266602</span><br></code></pre></td></tr></table></figure><ul><li>是否共享内存空间和资源：进行间是相互独立的，多线程共享所属进程的资源和内存地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是 %s, 我的pid是 %s&quot;</span> % (args, os.getpid()))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是 mian，我的pid是 %s&quot;</span> % os.getpid())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        p = Process(target=func, args=(<span class="hljs-string">&quot;子进程&quot;</span>,))<br>        p.start()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        t = Thread(target=func, args=(<span class="hljs-string">&quot;子线程&quot;</span>,))<br>        t.start()<br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">我是 mian，我的pid是 968</span><br><span class="hljs-string">我是 子线程, 我的pid是 968</span><br><span class="hljs-string">我是 子线程, 我的pid是 968</span><br><span class="hljs-string">我是 子线程, 我的pid是 968</span><br><span class="hljs-string">我是 子进程, 我的pid是 8256</span><br><span class="hljs-string">我是 子进程, 我的pid是 4840</span><br><span class="hljs-string">我是 子进程, 我的pid是 5984</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>操作全局变量方面：进程共享全局变量需要通过 Value 或者 Manger 以及锁机制的配合使用，线程可以直接共享全局变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">global</span> num<br>    num -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = <span class="hljs-number">100</span><br>    t_l = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=func, args=())<br>        t.start()<br>        t_l.append(t)<br>    [t.join() <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> t_l]<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>共享全局变量引申：GIL 的影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">global</span> num<br>    tmp = num<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    num = tmp - <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = <span class="hljs-number">100</span><br>    t_l = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=func, args=())<br>        t.start()<br>        t_l.append(t)<br>    [t.join() <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> t_l]<br>    <span class="hljs-built_in">print</span>(num)   <span class="hljs-comment"># 99</span><br></code></pre></td></tr></table></figure><p>此时得到的结果并不是 90，这是由于 GIL 锁机制导致的。我们具体来分析一下原因：</p><p>当第一个线程创建并启动后，执行到 time.sleep() 时会阻塞睡眠等待，由于 GIL 在同一时间只允许有一个线程访问 CPU，且一般给线程执行的时间片只有5毫秒，所以在线程1睡眠阻塞的时候，会把线程1 踢出执行队列，去执行线程2；所有的线程都重复上述步骤，因此所有的线程都只执行到 sleep，后面的 num &#x3D; tmp - 1 操作都未执行到。当10个线程都阻塞睡眠结束之后，GIL再重新逐个接入所有的线程继续向下执行，此时每个线程的 tmp 都还是原来的 100，并没有进行所谓的递减操作。</p><ul><li><p>守护线程和守护进程的比较：</p><p>1）守护进程是随着<strong>主进程的代码的结束而结束</strong></p><p>2）守护线程是随着<strong>主线程执行的结束而结束</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    time.sleep(<span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈哈哈&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是守护线程&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p1 = Thread(target=func1, args=())<br>    p1.daemon = <span class="hljs-literal">True</span><br>    p1.start()<br>    p2 = Thread(target=func, args=())<br>    p2.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是主线程&quot;</span>)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">我是主进程</span><br><span class="hljs-string">我是守护线程</span><br><span class="hljs-string">哈哈哈哈哈</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 主线程输出 &quot;我是主线程&quot;后，主线程的代码已经执行结束了，但是守护线程还没有结束，因此守护线程并不是随着主线程代码执行结束而结束</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是守护线程&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p1 = Process(target=func1, args=())<br>    p1.daemon = <span class="hljs-literal">True</span><br>    p1.start()<br><br><span class="hljs-comment"># 主线程开启子线程后就执行结束了，此时守护线程立刻也跟着结束了，因此守护线程是随着主线程执行的结束而结束</span><br></code></pre></td></tr></table></figure><p>**注：**和多进程一样，线程也不是开的越多对CPU的利用率就越高，一般线程数量为 CPU 核数的五倍时，对CPU利用率比较高。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="一、互斥锁"><a href="#一、互斥锁" class="headerlink" title="一、互斥锁"></a><strong>一、互斥锁</strong></h3><p>多线程的互斥锁（又称同步锁）和多进程中的用法一样。我们可以借助互斥锁来解决上述 GIL 对多线程使用全局变量的影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">l</span>):<br>    <span class="hljs-keyword">global</span> num<br>    l.acquire()<br>    tmp = num<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    num = tmp - <span class="hljs-number">1</span><br>    l.release()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = <span class="hljs-number">100</span><br>    l = Lock()<br>    t_l = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=func, args=(l,))<br>        t_l.append(t)<br>        t.start()<br>    [t.join() <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> t_l]<br>    <span class="hljs-built_in">print</span>(num)<br>    <br><span class="hljs-comment">#  结果肯定是90，之前的代码没加锁，10个线程是异步执行。此时加了锁，10个线程想要操作变量num，必须同步的去操作</span><br></code></pre></td></tr></table></figure><h3 id="二、死锁"><a href="#二、死锁" class="headerlink" title="二、死锁"></a><strong>二、死锁</strong></h3><p>在进程和线程中都会存在死锁的问题。所谓死锁，是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。比如，要想上厕所，必须同时拿到厕纸和厕所两个资源，如果A抢到了厕所，但是没有拿到厕纸；B拿到了厕纸，但是没有抢到厕所，此时A和B都处于死锁状态，都在等待着对方释放资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_1</span>(<span class="hljs-params">l_tot, l_pap</span>):<br>    l_tot.acquire()  <span class="hljs-comment"># 第一个人拿到厕所了，把厕所门锁上</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1准备开始上厕所了&quot;</span>)<br>    time.sleep(<span class="hljs-number">3</span>)<br>    l_pap.acquire()  <span class="hljs-comment"># 第一个人上完了，准备要厕纸</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1拿到厕纸了&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    l_pap.release()  <span class="hljs-comment"># 第一个人先还厕纸</span><br>    l_tot.release()  <span class="hljs-comment"># 第一个人把厕所让出来</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_2</span>(<span class="hljs-params">l_tot, l_pap</span>):<br>    l_pap.acquire()  <span class="hljs-comment"># 第二个人拿到厕纸</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p2拿到厕纸了&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    l_tot.acquire()  <span class="hljs-comment"># 第二个人准备要厕所</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p2准备开始上厕所了&quot;</span>)<br>    time.sleep(<span class="hljs-number">3</span>)<br>    l_tot.release()  <span class="hljs-comment"># 第二个人把厕所让出来</span><br>    l_pap.release()  <span class="hljs-comment"># 第一个人还厕纸</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    l_tot = Lock()  <span class="hljs-comment"># 厕所资源</span><br>    l_pap = Lock()  <span class="hljs-comment"># 厕纸资源</span><br>    p1 = Thread(target=person_1, args=(l_tot, l_pap))<br>    p2 = Thread(target=person_2, args=(l_tot, l_pap))<br>    p1.start()<br>    p2.start()<br></code></pre></td></tr></table></figure><p>此时程序会一直阻塞等待，进入死锁状态。</p><h3 id="三、递归锁"><a href="#三、递归锁" class="headerlink" title="三、递归锁"></a><strong>三、递归锁</strong></h3><p>为了支持在同一线程中多次请求同一资源，python提供了可重入锁 RLock，即递归锁。这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Lock<br>l = Lock()<br>l.acquire()<br>l.acquire()<br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br><span class="hljs-comment"># 123 无法输出，互斥锁此时在阻塞状态</span><br><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> RLock<br>l = Lock()<br>l = RLock()<br>l.acquire()<br>l.acquire()<br><span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br><span class="hljs-comment"># 使用递归锁不会出现死锁情况</span><br></code></pre></td></tr></table></figure><p>递归锁形象的来理解，就是可以给资源上多个锁，但是如果是递归锁，就会有一把万能钥匙，可以开启所有的锁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 递归锁解决上厕所死锁问题</span><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, RLock<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_1</span>(<span class="hljs-params">l_tot, l_pap</span>):<br>    l_tot.acquire()  <span class="hljs-comment"># 第一个人拿到厕所了，把厕所门锁上</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1准备开始上厕所了&quot;</span>)<br>    time.sleep(<span class="hljs-number">3</span>)<br>    l_pap.acquire()  <span class="hljs-comment"># 第一个人上完了，准备要厕纸</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1拿到厕纸了&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    l_pap.release()  <span class="hljs-comment"># 第一个人先还厕纸</span><br>    l_tot.release()  <span class="hljs-comment"># 第一个人把厕所让出来</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">person_2</span>(<span class="hljs-params">l_tot, l_pap</span>):<br>    l_pap.acquire()  <span class="hljs-comment"># 第二个人拿到厕纸</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p2拿到厕纸了&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    l_tot.acquire()  <span class="hljs-comment"># 第二个人准备要厕所</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p2准备开始上厕所了&quot;</span>)<br>    time.sleep(<span class="hljs-number">3</span>)<br>    l_tot.release()  <span class="hljs-comment"># 第二个人把厕所让出来</span><br>    l_pap.release()  <span class="hljs-comment"># 第一个人还厕纸</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    l_tot = l_pap = RLock()<br>    p1 = Thread(target=person_1, args=(l_tot, l_pap))<br>    p2 = Thread(target=person_2, args=(l_tot, l_pap))<br>    p1.start()<br>    p2.start()<br></code></pre></td></tr></table></figure><p>使用递归锁的话，即便对方把厕所锁起来了不给进，我也可以通过万能钥匙开门进去。同样的，即使我拿到了厕纸，对方也可以从我这边再把厕纸拿走。至于谁先去上厕所，就要看谁先把两个资源都拿到手了。</p><p>补充：</p><ul><li>在同一个线程内，递归锁可以无止尽的acquire，但是互斥锁不行</li><li>在不同的线程内，递归锁是保证只能被一个线程拿到钥匙，然后无止尽的 acquire，其他线程等待</li></ul><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>多线程的信号量机制和多进程相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Semaphore, Thread<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">sem, i</span>):<br>    sem.acquire()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第%s个人进入屋子&#x27;</span> % i)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第%s个人离开屋子&#x27;</span> % i)<br>    sem.release()<br><br><br>sem = Semaphore(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 允许配5把钥匙</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    t = Thread(target=func, args=(sem, i))<br>    t.start()<br></code></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>多线程的事件机制和多进程相同。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">event</span>.isSet()：返回<span class="hljs-keyword">event</span>的状态值；<br><span class="hljs-keyword">event</span>.wait()：如果 <span class="hljs-keyword">event</span>.isSet()==<span class="hljs-literal">False</span>将阻塞线程；<br><span class="hljs-keyword">event</span>.<span class="hljs-keyword">set</span>()： 设置<span class="hljs-keyword">event</span>的状态值为<span class="hljs-literal">True</span>，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；<br><span class="hljs-keyword">event</span>.clear()：恢复<span class="hljs-keyword">event</span>的状态值为<span class="hljs-literal">False</span>。<br></code></pre></td></tr></table></figure><p>使用事件机制模拟数据库连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Event<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn_mysql</span>(<span class="hljs-params">e, i</span>):<br>    count = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> e.is_set():  <span class="hljs-comment"># 如果为True，就是可以连接上数据库</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接超时&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第%s个人正在尝试第%s次连接!&#x27;</span> % (i, count))<br>        e.wait(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 在这里阻塞等待0.5秒，模拟用户连接时的等待</span><br>        count += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第%s个人连接成功&#x27;</span> % i)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_mysql</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\033[45m 数据库正在维护 \033[0m&#x27;</span>)  <span class="hljs-comment"># 让数据库初始状态处于维护状态，默认所有用户连接不上</span><br>    time.sleep(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 随机1秒或2秒，如果随机1秒的话，用户就可以连接上，2秒就连接不上</span><br>    e.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 将e.is_set()设为True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    e = Event()<br>    t = Thread(target=check_mysql, args=(e,))<br>    t.start()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):  <span class="hljs-comment"># 产生10个线程都去尝试连接数据库</span><br>        t1 = Thread(target=conn_mysql, args=(e, i))<br>        t1.start()<br></code></pre></td></tr></table></figure><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>多线程中，条件机制是让程序员自己去调度线程的一个机制，它包含以下方法：</p><ul><li>acquire()获得条件资源</li><li>release()        释放条件资源</li><li>wait()             让线程阻塞住</li><li>notify(int)     是指给wait发一个信号，让wait变成不阻塞；int是指，你要给多少给wait发信号</li></ul><p>Python提供的Condition对象提供了对复杂线程同步问题的支持。Condition被称为条件变量，除了提供与Lock类似的acquire和release方法外，还提供了wait和notify方法。线程首先acquire一个条件变量，然后判断一些条件。如果条件不满足则wait；如果条件满足，进行一些处理改变条件后，通过notify方法通知其他线程，其他处于wait状态的线程接到通知后会重新判断条件。不断的重复这一过程，从而解决复杂的同步问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Condition, Thread<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">con, i</span>):<br>    con.acquire()<br>    con.wait()  <span class="hljs-comment"># 所有线程都阻塞在这里，因为还没制造出钥匙</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在第%s个循环里&#x27;</span> % i)<br>    con.release()  <span class="hljs-comment"># 并不是还钥匙，而是把钥匙扔掉</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    con = Condition()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=func, args=(con, i))<br>        t.start()<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>))<br>        con.acquire()<br>        con.notify(num)  <span class="hljs-comment"># 手动输入制造几把钥匙，相当于发一个信号，允许几个线程可以执行了</span><br>        con.release()<br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器，指定n秒后执行某个操作。主要包含以下几个参数：</p><ul><li>time：睡眠的时间，以秒为单位</li><li>func：睡眠时间之后，需要执行的任务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Timer<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始执行任务&#x27;</span>)<br><br><br>Timer(<span class="hljs-number">3</span>, func).start()<br></code></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>线程中的队列只能在同一个进程中使用。它的用法和进程中的队列相似，它有以下四种模式：</p><ul><li>queue.Queue()    先进先出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">q = queue.Queue()<br>q.put(<span class="hljs-number">1</span>)<br>q.put(<span class="hljs-string">&quot;a&quot;</span>)<br>q.put([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># a</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># [1,2,3]</span><br></code></pre></td></tr></table></figure><ul><li>queue.LifoQueue()   后进先出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">q = queue.LifoQueue()<br>q.put(<span class="hljs-number">1</span>)<br>q.put(<span class="hljs-string">&quot;a&quot;</span>)<br>q.put([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># [1,2,3]</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># a</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><ul><li><p>queue.PriorityQueue()    优先级队列</p><p>1）q.put()   接收的是一个元组，元组中第一个参数是表示当前数据的优先级；元组中第二个参数是需     要存放到队列中的数据</p><p>2）优先级的比较（首先保证整个队列中，所有表示优先级的东西类型必须一致）<br>  如果都是 int，比数值的大小<br>  如果都是 str，比较字符串的大小（从第一个字符的ASCII码开始比较）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">q = queue.PriorityQueue()<br>q.put((<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>))<br>q.put((<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br>q.put((<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># (1, &#x27;a&#x27;)</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># (2, 1)</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># (3, [1, 2, 3])</span><br></code></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>在python中，concurrent.futures 模块为我们提供了高度封装的异步调用接口，因此我们可以通过该模块来使用进程池和线程池。（注：该模块提供的线程池和进程池都是异步执行的）</p><h3 id="一、模块介绍"><a href="#一、模块介绍" class="headerlink" title="一、模块介绍"></a><strong>一、模块介绍</strong></h3><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span>1 介绍<br>concurrent.futures模块提供了高度封装的异步调用接口<br>ThreadPoolExecutor：线程池，提供异步调用<br>ProcessPoolExecutor: 进程池，提供异步调用<br>Both implement the same interface, which is defined by the abstract Executor class.<br><br><span class="hljs-punctuation">#</span>2 基本方法<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">submit</span><span class="hljs-params">(<span class="hljs-variable">fn</span>, <span class="hljs-operator">*</span><span class="hljs-variable">args</span>, <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-variable">kwargs</span>)</span><br>异步提交任务<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">map</span><span class="hljs-params">(<span class="hljs-variable">func</span>, <span class="hljs-operator">*</span><span class="hljs-variable">iterables</span>, <span class="hljs-variable">timeout</span><span class="hljs-operator">=</span><span class="hljs-variable">None</span>, <span class="hljs-variable">chunksize</span><span class="hljs-operator">=</span>1)</span> <br>取代for循环submit的操作<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">shutdown</span><span class="hljs-params">(<span class="hljs-variable">wait</span><span class="hljs-operator">=</span><span class="hljs-variable">True</span>)</span> <br>相当于进程池的pool.close()+pool.join()操作，是指不允许再继续向池中增加任务，然后让父进程(线程)等待池中所有进程执行完所有任务。<br>wait=True，等待池内所有任务执行完毕回收完资源后才继续<br>wait=False，立即返回，并不会等待池内的任务执行完毕<br>但不管wait参数为何值，整个程序都会等到所有任务执行完毕<br>submit和map必须在shutdown之前<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">result</span><span class="hljs-params">(<span class="hljs-variable">timeout</span><span class="hljs-operator">=</span><span class="hljs-variable">None</span>)</span><br>取得结果<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">add_done_callback</span><span class="hljs-params">(<span class="hljs-variable">fn</span>)</span><br>回调函数<br></code></pre></td></tr></table></figure><h3 id="二、线程池的使用"><a href="#二、线程池的使用" class="headerlink" title="二、线程池的使用"></a><strong>二、线程池的使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">sum</span> += i ** <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pp = ThreadPoolExecutor(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 线程池中允许有5个线程同时工作</span><br>    pp_l= <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>        s = pp.submit(func, i)<br>        pp_l.append(s)<br>    pp.shutdown()<br><br>    [<span class="hljs-built_in">print</span>(s.result()) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> pp_l]  <span class="hljs-comment"># 取出返回值</span><br><br></code></pre></td></tr></table></figure><h3 id="三、进程池的使用"><a href="#三、进程池的使用" class="headerlink" title="三、进程池的使用"></a><strong>三、进程池的使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ProcessPoolExecutor<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">sum</span> += i ** <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pp = ProcessPoolExecutor(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 线程池中允许有5个进程同时工作</span><br>    pp_l = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>        s = pp.submit(func, i)<br>        pp_l.append(s)<br>    pp.shutdown()<br><br>    [<span class="hljs-built_in">print</span>(s.result()) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> pp_l]  <span class="hljs-comment"># 取出返回值</span><br></code></pre></td></tr></table></figure><h3 id="四、使用map提交多任务"><a href="#四、使用map提交多任务" class="headerlink" title="四、使用map提交多任务"></a><strong>四、使用map提交多任务</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># time.sleep(5)</span><br>    <span class="hljs-comment"># print(num) # 异步的效果</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-built_in">sum</span> += i ** <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br>t = ThreadPoolExecutor(<span class="hljs-number">20</span>)<br><br><span class="hljs-comment"># 下列代码是用map的方式提交多个任务，对应 拿结果的方法是__next__()  返回的是一个生成器对象</span><br>res = t.<span class="hljs-built_in">map</span>(func,<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br>t.shutdown()<br><span class="hljs-built_in">print</span>(res.__next__())<br><span class="hljs-built_in">print</span>(res.__next__())<br><span class="hljs-built_in">print</span>(res.__next__())<br><span class="hljs-built_in">print</span>(res.__next__())<br><br><br><span class="hljs-comment"># 下列代码是用for + submit提交多个任务的方式，对应拿结果的方法是result</span><br><span class="hljs-comment"># res_l = []</span><br><span class="hljs-comment"># for i in range(1000):</span><br><span class="hljs-comment">#     re = t.submit(func,i)</span><br><span class="hljs-comment">#     res_l.append(re)</span><br><span class="hljs-comment"># # t.shutdown()</span><br><span class="hljs-comment"># [print(i.result()) for i in res_l]</span><br><span class="hljs-comment"># 在Pool进程池中拿结果，是用get方法。   在ThreadPoolExecutor里边拿结果是用result方法</span><br></code></pre></td></tr></table></figure><h3 id="五、回调函数"><a href="#五、回调函数" class="headerlink" title="五、回调函数"></a><strong>五、回调函数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不管是ProcessPoolExecutor的进程池  还是Pool的进程池，回调函数都是父进程调用的，和子进程没有关系。</span><br><span class="hljs-comment"># 线程池中的回调函数是子线程调用的，和父线程没有关系</span><br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ProcessPoolExecutor<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-built_in">sum</span> += i ** <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call_back_fun</span>(<span class="hljs-params">res</span>):<br>    <span class="hljs-built_in">print</span>(os.getpid())<br>    <span class="hljs-built_in">print</span>(res)<br>    <span class="hljs-built_in">print</span>(res.result())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(os.getpid())<br>    t = ProcessPoolExecutor(<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        t.submit(func, i).add_done_callback(call_back_fun)<br>    t.shutdown()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> current_thread<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">sum</span> += i<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是在子线程中&#x27;</span>,current_thread())<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call_back</span>(<span class="hljs-params"><span class="hljs-built_in">sum</span></span>):<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是在回调函数中&#x27;</span>,<span class="hljs-built_in">sum</span>.result(),current_thread())  <span class="hljs-comment"># current_thread 用于打印当前线程的信息</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = ThreadPoolExecutor(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t.submit(func,i).add_done_callback(call_back)<br>    t.shutdown()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是在主线程中&#x27;</span>,current_thread())<br></code></pre></td></tr></table></figure><p>线程池和进程池中的回调函数是谁在调用：</p><ul><li>线程池中的回调函数是子线程调用的，和父线程没有关系</li><li>进程池中的回调函数是父进程调用的，和子进程没有关系</li></ul>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 多进程开发</title>
    <link href="/2019/05/13/0015-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <url>/2019/05/13/0015-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="进程的创建以及使用"><a href="#进程的创建以及使用" class="headerlink" title="进程的创建以及使用"></a>进程的创建以及使用</h2><h3 id="一、创建进程"><a href="#一、创建进程" class="headerlink" title="一、创建进程"></a><strong>一、创建进程</strong></h3><p><strong>方式一：直接创建</strong></p><p>​process 模块是 multiprocessing库一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p><p>​Process([group [, target [, name [, args [, kwargs]]]]])，由该类实例化得到的对象，表示一个子进程中的任务（尚未启动）</p><p><strong>参数说明：</strong></p><ul><li>group     参数未使用，值始终为None</li><li>target     表示调用对象，即子进程要执行的任务</li><li>args       表示调用对象的位置参数元组，args&#x3D;(1,2,’egon’,)</li><li>kwargs   表示调用对象的字典,kwargs&#x3D;{‘name’:’egon’,’age’:18}</li><li>name      为子进程的名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 补充：os模块的 getpid 方法用于获取当前进程的进程号，getppid 方法用于获取当前进程的父进程的进程号</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是一个子进程%s，我的进程号是%s，我的父进程的进程号是%s&quot;</span> % (name, os.getpid(), os.getppid()))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是父进程，我的进程号是%s&quot;</span> % os.getpid())<br>    p = Process(target=func, args=(<span class="hljs-string">&quot;cdc&quot;</span>,))  <span class="hljs-comment"># 实例化一个进程对象</span><br>    p.start()  <span class="hljs-comment"># 开启一个子进程</span><br></code></pre></td></tr></table></figure><p><strong>方式二：通过类继承的方式来创建</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProcess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始启动子进程&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = MyProcess()<br>    p.start()<br></code></pre></td></tr></table></figure><p>Process对象除了有 start 方法外，还有一个 run 方法，两者的区别是：</p><ul><li>p.start()：是指解释器告诉操作系统去帮我开启一个进程，至于什么时候执行，由操作系统来调度，即处于就绪状态</li><li>p.run()：是指告诉操作系统，现在马上帮我执行这个子进程，即处于执行状态</li></ul><p>当通过类继承的方式来创建一个子进程的时候，执行 start 方法会自动执行类中定义的 run 方法。</p><p><strong>方式三：开启多个不同的子进程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子进程 %s，父进程 %s&quot;</span> % (os.getpid(), os.getppid()))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程 %s&quot;</span> % os.getpid())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p = Process(target=func, args=())<br>        p.start()<br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">父进程 7476</span><br><span class="hljs-string">子进程 7876，父进程 7476</span><br><span class="hljs-string">子进程 16044，父进程 7476</span><br><span class="hljs-string">子进程 13908，父进程 7476</span><br><span class="hljs-string">子进程 18332，父进程 7476</span><br><span class="hljs-string">子进程 9312，父进程 7476</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>注：在Windows操作系统中由于没有 fork (linux操作系统中创建进程的机制)，在创建子进程的时候会自动 import 启动它的这个文件，而在 import 的时候又执行了整个文件。因此如果将Process()直接写在文件中就会无限递归创建子进程报错。所以必须把创建子进程的部分使用 if __name__ &#x3D;&#x3D;’__main__‘ 判断保护起来，import 的时候  ，就不会递归运行了。</p><h3 id="二、进程常用方法"><a href="#二、进程常用方法" class="headerlink" title="二、进程常用方法"></a><strong>二、进程常用方法</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.start</span>()：启动进程，并调用该子进程中的<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.run</span>() <br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.run</span>()：进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法  <br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.terminate</span>()：强制终止进程<span class="hljs-selector-tag">p</span>，不会进行任何清理操作，如果<span class="hljs-selector-tag">p</span>创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果<span class="hljs-selector-tag">p</span>还保存了一个锁那么也将不会被释放，进而导致死锁<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.is_alive</span>()：如果<span class="hljs-selector-tag">p</span>仍然运行，返回True<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.join</span>(<span class="hljs-selector-attr">[timeout]</span>)：主线程等待<span class="hljs-selector-tag">p</span>终止（强调：是主线程处于等的状态，而<span class="hljs-selector-tag">p</span>是处于运行的状态）。timeout是可选的超时时间，需要强调的是，<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.join</span>只能join住start开启的进程，而不能join住run开启的进程 <br></code></pre></td></tr></table></figure><ul><li><strong>is_alive 和 terminate</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    time.sleep(<span class="hljs-number">200</span>)  <span class="hljs-comment"># 睡眠 200 秒</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func, args=())  <span class="hljs-comment"># 创建一个子进程</span><br>    p.start()<br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># 判断子进程是否存活 存活结果为True，死亡结果为False</span><br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(p.is_alive())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    time.sleep(<span class="hljs-number">200</span>)  <span class="hljs-comment"># 睡眠 200 秒</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func, args=())  <span class="hljs-comment"># 创建一个子进程</span><br>    p.start()<br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># True</span><br>    p.terminate()  <span class="hljs-comment"># 杀死该进程</span><br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># True</span><br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>理论上来说，杀死子进程后得到的进程存活状态应该是 False，但是实际测试得到的还是 True，这是由于操作系统在切换和调度进程时都需要时间，而我们的代码执行的速度特别快，我们无法直接捕捉该现象，可以让程序等待一定的时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    time.sleep(<span class="hljs-number">200</span>)  <span class="hljs-comment"># 睡眠 200 秒</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func, args=())  <span class="hljs-comment"># 创建一个子进程</span><br>    p.start()<br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># True</span><br>    p.terminate()  <span class="hljs-comment"># 杀死该进程</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># False</span><br>    <span class="hljs-built_in">print</span>(p.is_alive())  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li><strong>join</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>        time.sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是子进程&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func)  <span class="hljs-comment"># 创建一个子进程</span><br>    p.start()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        time.sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是父进程&quot;</span>)<br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">...</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是子进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是子进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是子进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>开启一个正常的子进程，父进程会等待子进程结束后，父进程也就是程序才结束，但是并不是先执行完子进程的方法后才会去执行父进程中的方法，父进程和子进程是异步执行的。</p><p>p.join() 方法就可以使父进程和子进程变为同步执行，父进程执行到join方法时，就会阻塞住，等待子进程执行完成后再继续执行主进程中的代码。</p><p>join必须放在start()后边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>):<br>        time.sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是子进程&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func)  <span class="hljs-comment"># 创建一个子进程</span><br>    p.start()<br>    p.join()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        time.sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是父进程&quot;</span>)<br>        <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">...</span><br><span class="hljs-string">我是子进程</span><br><span class="hljs-string">我是子进程</span><br><span class="hljs-string">我是子进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">我是父进程</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>多个子进程和主进程实现同步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-built_in">print</span>(num ** <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p_l = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用于保存所有的子进程对象</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        p = Process(target=func, args=(i,))<br>        p.start()<br>        p_l.append(p)<br><br>    [p.join() <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_l]  <span class="hljs-comment"># 对所有的子进程进行join</span><br>    time.sleep(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;计算结束&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="三、进程常用属性"><a href="#三、进程常用属性" class="headerlink" title="三、进程常用属性"></a><strong>三、进程常用属性</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.daemon</span>：默认值为False，如果设为True，代表<span class="hljs-selector-tag">p</span>为后台运行的守护进程，当<span class="hljs-selector-tag">p</span>的父进程终止时，<span class="hljs-selector-tag">p</span>也随之终止，并且设定为True后，<span class="hljs-selector-tag">p</span>不能创建自己的新进程，必须在<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.start</span>()之前设置<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>：进程的名称<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.pid</span>：进程的pid<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.exitcode</span>：进程在运行时为<span class="hljs-attribute">None</span>，如果为–N，表示被信号N结束(了解即可)<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.authkey</span>：进程的身份验证键，默认是由os<span class="hljs-selector-class">.urandom</span>()随机生成的<span class="hljs-number">32</span>个字符。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）<br></code></pre></td></tr></table></figure><ul><li><strong>name 和 pid 属性</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这里是子进程<span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        p = Process(target=func)<br>        p.name = <span class="hljs-string">f&quot;cdc<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i)&#125;</span>&quot;</span><br>        p.start()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;子进程<span class="hljs-subst">&#123;p.name&#125;</span>开始执行，进程号<span class="hljs-subst">&#123;p.pid&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>daemon 属性</strong></li></ul><p>使用 p.daemon &#x3D; True 可以将普通的子进程设置成守护进程。对于一个正常的子进程，主进程和子进程是异步的执行各自的代码的，如果主进程代码已经执行结束，子进程代码还未执行完，那么主进程就会等待所有的子进程执行结束后再结束，即结束整个程序；而对于守护进程而言，<strong>会随着主进程代码的执行结束而立即结束</strong>。</p><p>注意：守护进程是随着主进程的代码的结束而结束，而不是随着主进程的结束而结束。换句话说，正常执行中主进程永远是最后结束的，哪怕自己的代码已经全部执行完了，也不会结束，而是阻塞等待所有的子进程执行完了再结束，即结束整个程序。但只要主进程中的代码执行完了，守护进程肯定就跟着结束了。守护进程必须在 start 之前设置。</p><p>守护进程的三个特点：</p><ol><li><p>守护进程会随着父进程代码的结束而结束</p><pre><code class="hljs">           2. 守护进程自身不能再创建子进程           3. 守护进程必须要在start之前设置</code></pre></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是孙子&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是儿子&quot;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    p = Process(target=func1)<br>    p.start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func)<br>    p.daemon = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 设置守护进程</span><br>    p.start()<br>    <span class="hljs-built_in">print</span>(p.daemon)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是爸爸&quot;</span>)<br><span class="hljs-comment"># AssertionError: daemonic processes are not allowed to have children  守护进程不允许有子进程</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 没有设置守护进程</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span>  Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子进程代码结束&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func)<br>    p.start()<br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程代码执行结束&quot;</span>)<br><span class="hljs-comment"># 父进程三秒后就将代码全部执行完成了，阻塞等待子进程结束，最后载结束程序，结果为</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">父进程代码执行结束</span><br><span class="hljs-string">子进程代码结束</span><br><span class="hljs-string">Process finished with exit code 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 设置守护进程</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span>  Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子进程代码结束&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func)<br>    p.daemon = <span class="hljs-literal">True</span><br>    p.start()<br><br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程代码执行结束&quot;</span>)<br><span class="hljs-comment"># 父进程三秒后就将代码全部执行完成了，此时守护进程跟随父进程代码的执行结束而结束，所以结果为</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">父进程代码执行结束</span><br><span class="hljs-string">Process finished with exit code 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 利用守护进程编写计时器</span><br><span class="hljs-comment"># 计时5秒</span><br><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(time.strftime(<span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func)<br>    p.daemon = <span class="hljs-literal">True</span> <span class="hljs-comment"># 将p进程设置为守护进程,必须要在start之前设置</span><br>    p.start()<br>    time.sleep(<span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是爸爸&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><h3 id="一、进程间无法共享内存"><a href="#一、进程间无法共享内存" class="headerlink" title="一、进程间无法共享内存"></a><strong>一、进程间无法共享内存</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    num -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = <span class="hljs-number">100</span><br>    p_l = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p = Process(target=func, args=(num,))<br>        p.start()<br>        p_l.append(p)<br>    [p.join() <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> p_l]<br><br>    <span class="hljs-built_in">print</span>(num)  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><p>以上代码创建了五个子进程，分别对全局变量 num 进行了减1的操作，理论上来说，num 最后的值应该是95，然而测试得到的结果还是100，这是因为每次执行子进程实际相当于重新开辟了一个空间，将子进程的代码和相关的变量都拷贝一份过去再操作，所以不管子进程中对全局的变量进行什么操作，都不会影响原本内存中变量对应的值，这也就是多进程之间无法共享内存的原因。</p><h3 id="二、进程间直接的数据共享"><a href="#二、进程间直接的数据共享" class="headerlink" title="二、进程间直接的数据共享"></a><strong>二、进程间直接的数据共享</strong></h3><p>虽然进程间数据独立，但可以通过Manager和Value实现数据共享</p><ul><li><strong>Manager</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Manager<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">lst</span>):<br>    lst[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;aaa&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子进程中的列表&quot;</span>, lst)  <span class="hljs-comment"># 子进程中的列表 [&#x27;aaa&#x27;, 22, 33]</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    m = Manager()<br>    lst = m.<span class="hljs-built_in">list</span>([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>])  <span class="hljs-comment"># 创建一个共享的列表数据</span><br>    <span class="hljs-comment"># dic = m.dict(&#123;&quot;name&quot;: &quot;cdc&quot;&#125;)  # 创建一个共享的字典数据</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程中一开始的列表&quot;</span>, lst)  <span class="hljs-comment"># 父进程中一开始的列表 [11, 22, 33]</span><br>    p = Process(target=func, args=(lst,))<br>    p.start()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程中后来的列表&quot;</span>, lst)  <span class="hljs-comment"># 父进程中后来的列表 [&#x27;aaa&#x27;, 22, 33]</span><br></code></pre></td></tr></table></figure><ul><li><strong>Value</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Value<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    num.value -= <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;子进程中的num值&quot;</span>, num.value)  <span class="hljs-comment"># 子进程中的num值 99</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = Value(<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment"># 创建一个数值为100的共享整型数据</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程中一开始的num&quot;</span>, num.value)  <span class="hljs-comment"># 父进程中一开始的num 100</span><br>    p = Process(target=func, args=(num,))<br>    p.start()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;父进程中后来的num&quot;</span>, num.value)  <span class="hljs-comment"># 父进程中后来的num 99</span><br></code></pre></td></tr></table></figure><p><strong>除了直接实现数据共享外，multiprocessing 中可以通过以下机制来实现进程间通信（IPC，inter process Communication）</strong></p><h3 id="三、锁机制"><a href="#三、锁机制" class="headerlink" title="三、锁机制"></a><strong>三、锁机制</strong></h3><p>多个进程同时共享内存时会出现数据错乱的问题，例如如果多个进程同时向一个文件中写入，可能会出现一个进程刚写完还未来得及将写好的内容保存，另外一个进程已经将文件关闭了，此时第一个进程所写入的内容就丢失了。因此，我们可以给这个文件上一把锁，如果当前有进程正在操作文件，那么就不允许其他的进程再来操作这个文件了，只能等当前的进程操作结束后，再把锁打开，其他进程才能来使用文件。重复上述步骤，就不会出现数据错乱丢失的问题了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Lock<br><br>l = Lock()   <span class="hljs-comment"># 实例化一个锁</span><br>l.acquire()  <span class="hljs-comment"># 相当于拿走钥匙，锁上门，不允许其他人进来</span><br>l.release()  <span class="hljs-comment"># 释放锁，还钥匙，开门，允许其他人操作</span><br><br><span class="hljs-comment"># 如果加上锁后一直不释放，程序会阻塞等待，直到有锁被释放</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Lock<br><br>l = Lock()<br>l.acquire()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaaa&quot;</span>)<br>l.acquire()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bbbb&quot;</span>)<br><span class="hljs-comment"># 程序输出 aaaa 后一直阻塞等待</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多进程操作同一个文件</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Lock, Process<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hand_file</span>(<span class="hljs-params">l</span>):<br>    l.acquire()  <span class="hljs-comment"># 给文件加锁，不允许别的进程访问</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file=<span class="hljs-string">&quot;a.txt&quot;</span>, mode=<span class="hljs-string">&quot;a+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">f&quot;我是子进程<span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span> + <span class="hljs-string">&quot;\n&quot;</span>)<br>    l.release()  <span class="hljs-comment"># 释放锁，允许其他进程操作文件</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    l = Lock()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p = Process(target=hand_file, args=(l,))<br>        p.start()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模拟银行卡存钱取钱</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Lock, Process, Value<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 取钱</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_money</span>(<span class="hljs-params">l, money</span>):<br>    l.acquire()  <span class="hljs-comment"># 取钱的时候不允许别人对同一个账号存钱</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        money.value -= <span class="hljs-number">100</span><br>        time.sleep(<span class="hljs-number">0.5</span>)<br>    l.release()  <span class="hljs-comment"># 取完钱了，可以让别人存钱了</span><br><br><span class="hljs-comment"># 存钱</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_money</span>(<span class="hljs-params">l, money</span>):<br>    l.acquire()  <span class="hljs-comment"># 存钱的时候不允许别人对同一个账号取钱</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        money.value += <span class="hljs-number">100</span><br>        time.sleep(<span class="hljs-number">0.5</span>)<br>    l.release()  <span class="hljs-comment"># 存完钱了，可以让别人取钱了</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    money = Value(<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-number">1000</span>)  <span class="hljs-comment"># 定义 1000块钱</span><br>    l = Lock()  <span class="hljs-comment"># 实例化一个锁</span><br>    p1 = Process(target=get_money, args=(l, money))  <span class="hljs-comment"># 该进程用于取钱操作</span><br>    p1.start()<br>    p2 = Process(target=save_money, args=(l, money))  <span class="hljs-comment"># 该进程用于存钱操作</span><br>    p2.start()<br>    p1.join()<br>    p2.join()<br>    <span class="hljs-built_in">print</span>(money.value)<br></code></pre></td></tr></table></figure><p>进程中还会存在<strong>死锁</strong>情况，需要借助<strong>递归锁</strong>来解决，由于死锁和递归锁原理和多线程相同，此处在多线程中再详细介绍。</p><h3 id="四、信号量机制"><a href="#四、信号量机制" class="headerlink" title="四、信号量机制"></a><strong>四、信号量机制</strong></h3><p>信号量机制相当于是一把锁配好几把钥匙。信号量机制比锁机制多了一个计数器，这个计数器是用来记录当前剩余几把钥匙的。对于计数器来说，每acquire一次，计数器内部就减1，release一次，计数器就加1，当计数器为0时，表示没有钥匙了，此时acquire()处于阻塞，直到有钥匙归还才解除阻塞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Semaphore<br><br>sem = Semaphore(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 参数为整型，表示可以有多少把钥匙，此处表示有5把</span><br>sem.acquire()  <span class="hljs-comment"># 拿走钥匙，锁上门</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1111</span>)<br>sem.acquire()  <span class="hljs-comment"># 拿走钥匙，锁上门</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2222</span>)<br>sem.acquire()  <span class="hljs-comment"># 拿走钥匙，锁上门</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">3333</span>)<br>sem.acquire()  <span class="hljs-comment"># 拿走钥匙，锁上门</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4444</span>)<br>sem.acquire()  <span class="hljs-comment"># 拿走钥匙，锁上门</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">5555</span>)<br>sem.acquire()  <span class="hljs-comment"># 此时钥匙已经被前面全部拿完了，acquire会阻塞在这里，直到有人归还钥匙</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">6666</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多人同时就餐示例</span><br><span class="hljs-comment"># 一共有五个餐位，后来的人要等前面有空位才能就餐</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Semaphore, Process<br><span class="hljs-keyword">import</span> random, time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">i, sem</span>):<br>    sem.acquire()  <span class="hljs-comment"># 占一个位置吃饭</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i)&#125;</span>位客人准备吃饭了&quot;</span>)<br>    time.sleep(random.uniform(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i)&#125;</span>位客人吃完了&quot;</span>)<br>    sem.release()  <span class="hljs-comment"># 吃完了，把位置腾出来给别人吃饭</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sem = Semaphore(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 初始化了一把锁5把钥匙，也就是说允许5个人同时进入餐厅，</span><br>    <span class="hljs-comment"># 之后其他人必须等待，等有人从餐厅出来，还了钥匙，才能允许后边的人进入</span><br>    <span class="hljs-comment"># 来了20位客人</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        p = Process(target=eat, args=(i, sem))<br>        p.start()<br></code></pre></td></tr></table></figure><h3 id="五、事件机制"><a href="#五、事件机制" class="headerlink" title="五、事件机制"></a><strong>五、事件机制</strong></h3><p>事件机制 Event 对象主要有以下几种方法：</p><ol><li>is_set()：is_set 的值是布尔类型，事件机制通过该值来判断 wait 方法是否应该处于阻塞状态，is_set 的值为 True，则 wait 处于非阻塞状态，否则处于阻塞状态</li><li>wait()：判断is_set的值，如果为True，则非阻塞；值为False，则阻塞</li><li>set()：将is_set设为True</li><li>clear()：将is_set设为False</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Event<br><br>e = Event()  <span class="hljs-comment"># 实例化一个事件对象</span><br><span class="hljs-built_in">print</span>(e.is_set())  <span class="hljs-comment"># False  此时wait应该是阻塞的</span><br>e.<span class="hljs-built_in">set</span>()<br><span class="hljs-built_in">print</span>(e.is_set())  <span class="hljs-comment"># True  此时wait是非阻塞的</span><br>e.wait()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaaa&quot;</span>)<br>e.clear()<br><span class="hljs-built_in">print</span>(e.is_set())  <span class="hljs-comment"># False 此时wait是阻塞的，wait后面的代码无法继续执行</span><br>e.wait()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bbbb&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用事件机制模拟信号灯场景</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Event<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 信号灯函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">traffic_light</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-comment"># 交通等得一直亮着，要么是红灯，要么是绿灯</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> e.is_set():  <span class="hljs-comment"># 如果is_set是True，那么就是绿灯，wait非阻塞，汽车就通过</span><br>            time.sleep(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 绿的亮5秒</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;红灯亮了&quot;</span>)  <span class="hljs-comment"># 5秒后，切换到红灯</span><br>            e.clear()  <span class="hljs-comment"># 将is_set的值设为False，wait阻塞，汽车无法通过</span><br>        <span class="hljs-keyword">else</span>:<br>            time.sleep(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 红的亮三秒</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;绿灯亮了&quot;</span>)  <span class="hljs-comment"># 5秒后，切换到绿灯</span><br>            e.<span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 将is_set的值设为True，wait非阻塞，汽车可以通过</span><br><br><span class="hljs-comment"># 车的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params">e, i</span>):<br>    e.wait()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i)&#125;</span>辆车通过&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    e = Event()<br>    light = Process(target=traffic_light, args=(e,))<br>    light.start()<br>    <span class="hljs-comment"># 定义50辆车</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 为了测试效果明显，控制一下汽车生产的速度</span><br>            time.sleep(<span class="hljs-number">5</span>)<br>        p = Process(target=Car, args=(e, i))<br>        p.start()<br></code></pre></td></tr></table></figure><h3 id="六、队列"><a href="#六、队列" class="headerlink" title="六、队列"></a><strong>六、队列</strong></h3><ul><li>队列：先进先出（FIFO，First In First Out）</li><li>栈：先进后出（FILO，First In Last Out）</li></ul><p>创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递，<strong>队列在进程间通信是安全的</strong>。队列有以下常用方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.get</span>( <span class="hljs-selector-attr">[ block [ ,timeout ]</span> ] ) <br>返回q中的一个项目。如果q为空，此方法将阻塞，直到队列中有项目可用为止。block用于控制阻塞行为，默认为True. 如果设置为False，将引发Queue.Empty异常（定义在Queue模块中）。timeout是可选超时时间，用在阻塞模式中。如果在指定的时间间隔内没有项目可用，将引发Queue.Empty异常。<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.get_nowait</span>( ) <br>同<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.get</span>(False)方法。<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.put</span>(item <span class="hljs-selector-attr">[, block [,timeout ]</span> ] ) <br>将item放入队列。如果队列已满，此方法将阻塞至有空间可用为止。block控制阻塞行为，默认为True。如果设置为False，将引发Queue.Full异常（定义在Queue库模块中）。timeout指定在阻塞模式中等待可用空间的时间长短。超时后将引发Queue.Full异常。<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.qsize</span>() <br>返回队列中目前项目的正确数量。此函数的结果并不可靠，因为在返回结果和在稍后程序中使用结果之间，队列中可能添加或删除了项目。在某些系统上，此方法可能引发NotImplementedError异常。<br><br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.empty</span>() <br>如果调用此方法时 q为空，返回True。如果其他进程或线程正在往队列中添加项目，结果是不可靠的。也就是说，在返回和使用结果之间，队列中可能已经加入新的项目。<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.full</span>() <br>如果q已满，返回为True. 由于线程的存在，结果也可能是不可靠的（参考<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.empty</span>()方法）<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.close</span>() <br>关闭队列，防止队列中加入更多数据。调用此方法时，后台线程将继续写入那些已入队列但尚未写入的数据，但将在此方法完成时马上关闭。如果q被垃圾收集，将自动调用此方法。关闭队列不会在队列使用者中生成任何类型的数据结束信号或异常。例如，如果某个使用者正被阻塞在get（）操作上，关闭生产者中的队列不会导致get（）方法返回错误。<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.cancel_join_thread</span>() <br>不会再进程退出时自动连接后台线程。这可以防止<span class="hljs-built_in">join_thread</span>()方法阻塞。<br><br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.join_thread</span>() <br>连接队列的后台线程。此方法用于在调用<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.close</span>()方法后，等待所有队列项被消耗。默认情况下，此方法由不是q的原始创建者的所有进程调用。调用<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.cancel_join_thread</span>()方法可以禁止这种行为。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># put</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><br>q = Queue(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 实例化一个队列，参数为规定队列中最多可以存放的数据个数</span><br>q.put(<span class="hljs-number">123</span>)<br>q.put(<span class="hljs-string">&quot;abc&quot;</span>)<br>q.put([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;到此为止队列已经存满了&quot;</span>)  <span class="hljs-comment"># 队列已经存放了三个数据了，满了</span><br><span class="hljs-comment"># q.put(236)# 此时 q.put(236) 会阻塞等待，知道队列空出一个位置，即有数据被取出来</span><br>q.put(<span class="hljs-number">236</span>, <span class="hljs-literal">False</span>)  <span class="hljs-comment">#  此时不会阻塞，直接引发 queue.Full 错误</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># get</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><br>q = Queue(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 实例化一个队列，参数为规定队列中最多可以存放的数据个数</span><br>q.put(<span class="hljs-number">123</span>)<br>q.put(<span class="hljs-string">&quot;abc&quot;</span>)<br>q.put([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># 123</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># abc</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;此时队列已经全部取完了&quot;</span>)<br><span class="hljs-comment"># print(q.get())  #  队列中已经没有值了，此时get会阻塞等待，直到队列中有值</span><br><span class="hljs-built_in">print</span>(q.get(<span class="hljs-literal">False</span>))  <span class="hljs-comment"># 将block设置为False后不会阻塞，直接引发queue.Empty错误</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># put_nowait</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><br>q = Queue(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 实例化一个队列，参数为规定队列中最多可以存放的数据个数</span><br>q.put(<span class="hljs-number">123</span>)<br>q.put(<span class="hljs-string">&quot;abc&quot;</span>)<br>q.put([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;到此为止队列已经存满了&quot;</span>)<br>q.put_nowait(<span class="hljs-number">236</span>)  <span class="hljs-comment"># 不会阻塞，直接引发queue.Full异常，等同于 q.put(236, False)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># get_nowait</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue<br><br>q = Queue(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 实例化一个队列，参数为规定队列中最多可以存放的数据个数</span><br>q.put(<span class="hljs-number">123</span>)<br>q.put(<span class="hljs-string">&quot;abc&quot;</span>)<br>q.put([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># 123</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># abc</span><br><span class="hljs-built_in">print</span>(q.get())  <span class="hljs-comment"># [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;此时队列已经全部取完了&quot;</span>)<br><span class="hljs-built_in">print</span>(q.get_nowait())  <span class="hljs-comment"># 不会阻塞，直接引发queue.Empty异常，等同于 q.get(False)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 进程中使用队列</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Queue,Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">q</span>):<br>    q.put(<span class="hljs-string">&#x27;我是四川的&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = Queue(<span class="hljs-number">5</span>)<br>    p = Process(target=func,args=(q,))<br>    p.start()<br>    <span class="hljs-comment"># print(q.get_nowait()) # 此处，可能会报错，因为子进程和父进程同时运行，不一定队列中有数据</span><br>    <span class="hljs-built_in">print</span>(q.get())<span class="hljs-comment"># 此处一定不会报错，因为get是阻塞获取数据，如果队列没有就等着</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用队列q对象调用get函数来取得队列中最先进入的数据</span><br><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue,freeze_support<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put_func</span>(<span class="hljs-params">q</span>):<br>    info = <span class="hljs-built_in">str</span>(os.getpid()) + <span class="hljs-string">&#x27;\t:\t&#x27;</span> + <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>))<br>    q.put(info)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_func</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 获取到数据 ：\033[33m; %s \033[0m&#x27;</span> % (os.getpid(), q.get()))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># freeze_support() 如果有windows系统开启多进程导致程序崩溃，可尝试调用此函数</span><br>    q = Queue(<span class="hljs-number">5</span>)<br>    l_put = []<br>    l_get = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        p_put = Process(target=put_func, args=(q,))<br>        p_put.start()<br>        l_put.append(p_put)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        p_get = Process(target=get_func, args=(q,))<br>        p_get.start()<br>        l_put.append(p_get)<br><br>    [i.join() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l_put]<br>    [i.join() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l_get]<br></code></pre></td></tr></table></figure><h3 id="七、JoinableQueue-可连接的队列"><a href="#七、JoinableQueue-可连接的队列" class="headerlink" title="七、JoinableQueue 可连接的队列"></a><strong>七、JoinableQueue 可连接的队列</strong></h3><p>JoinableQueue常用于解决生产者消费者模型问题，它是继承Queue的，所以可以使用Queue中的方法并且JoinableQueue又多了两个方法：</p><ul><li>q.join()用于生产者。该方法会等待 q.task_done的返回结果，通过返回结果，生产者就能获得消费者当前消费了多少个数据</li><li>q.task_done()     用于消费者，是指每消费队列中一个数据，就给join返回一个标识。</li></ul><p>假设生产者生产了100个数据，join就先记录下100这个数据。每次消费者消费一个数据，task_done就会返回一个标识，当生产者（join）接收到100个消费者返回来的标识的时候，生产者就能知道消费者已经把所有数据都消费完了。</p><h3 id="八、管道"><a href="#八、管道" class="headerlink" title="八、管道"></a><strong>八、管道</strong></h3><p>管道是用于多进程之间通信的一种方式。管道是不安全的。管道在实例化对象时，会产生两个端口，即 con1,con2 &#x3D; Pipe()</p><ul><li>在单进程中使用管道，如果con1负责接收数据，con2就负责发送数据；如果con2负责接收数据，con1就负责发送数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pipe<br><br>con1, con2 = Pipe()<br><br>con1.send(<span class="hljs-string">&quot;abc&quot;</span>)<br><span class="hljs-built_in">print</span>(con2.recv())<br><br>con2.send(<span class="hljs-number">123</span>)<br><span class="hljs-built_in">print</span>(con1.recv())<br></code></pre></td></tr></table></figure><ul><li>在多进程中使用管道：如果父进程使用con1收，那么子进程就必须使用con2发；<br>                                       如果父进程使用con1发，那么子进程就必须使用con2收；<br>                                       如果父进程使用con2收，那么子进程就必须使用con1发；<br>                                       如果父进程使用con2发，那么子进程就必须使用con1收；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Pipe<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">con1, con2</span>):<br>    con1, con2 = con1, con2<br>    con1.close()  <span class="hljs-comment">#  子进程中使用con2和主进程交互，所以con1可以关闭了</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(con2.recv())  <span class="hljs-comment"># 当主进程的con1发数据时，子进程要死循环的去接收。</span><br>        <span class="hljs-keyword">except</span>:  <span class="hljs-comment"># 如果主进程的con1发完数据并关闭con1，子进程的con2继续接收时，就会报错，使用try的方式，获取错误</span><br>            con2.close()  <span class="hljs-comment"># 获取到错误，就是指子进程已经把管道中所有数据都接收完了，所以用这种方式去关闭管道</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    con1, con2 = Pipe()<br>    p = Process(target=func, args=(con1, con2))<br>    p.start()<br>    con2.close()  <span class="hljs-comment"># 主进程中使用con1和子进程交互，所以con2可以关闭了</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):  <span class="hljs-comment"># 生产数据</span><br>        con1.send(i)  <span class="hljs-comment"># 给子进程的con2发送数据</span><br>    con1.close()  <span class="hljs-comment"># 生产完数据，关闭父进程这一端的管道</span><br></code></pre></td></tr></table></figure><h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><p>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产进程和消费进程的工作能力来提高程序的整体处理数据的速度。举个应用栗子：全栈开发时候，前端接收客户请求，后端处理请求逻辑。当某时刻客户请求过于多的时候，后端处理不过来，此时完全可以借助队列来辅助，将客户请求放入队列中，后端逻辑代码处理完一批客户请求后马上从队列中继续获取，这样平衡两端的效率。</p><h4 id="为什么要使用生产者和消费者模式"><a href="#为什么要使用生产者和消费者模式" class="headerlink" title="为什么要使用生产者和消费者模式"></a><strong>为什么要使用生产者和消费者模式</strong></h4><p>在进程世界里，生产者就是生产数据的进程，消费者就是消费数据的进程。在多进程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p><h4 id="什么是生产者消费者模式"><a href="#什么是生产者消费者模式" class="headerlink" title="什么是生产者消费者模式"></a><strong>什么是生产者消费者模式</strong></h4><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p><h4 id="基于队列实现的生产者消费者模型"><a href="#基于队列实现的生产者消费者模型" class="headerlink" title="基于队列实现的生产者消费者模型"></a><strong>基于队列实现的生产者消费者模型</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一版</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><br><span class="hljs-comment"># 消费者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        info = q.get()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我吃到了&quot;</span> + info)<br><br><span class="hljs-comment"># 生产者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">productor</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        info = <span class="hljs-string">f&quot;包子<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)&#125;</span>号&quot;</span><br>        q.put(info)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = Queue(<span class="hljs-number">5</span>)<br>    pro_con = Process(target=consumer, args=(q,))<br>    pro_con.start()<br>    pro_pro = Process(target=productor, args=(q,))<br>    pro_pro.start()<br></code></pre></td></tr></table></figure><p>第一版代码中存在这样一个问题，生产者生产完数据后正常结束代码了，但是消费者会不断的从队列中取数据，如果获取不到，get 方法就会阻塞，导致整个程序无法结束，所以我们要修改一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第二版</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 消费者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            info = q.get_nowait()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我吃到了&quot;</span> + info)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;包子取完了&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 生产者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">productor</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        info = <span class="hljs-string">f&quot;包子<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>)&#125;</span>号&quot;</span><br>        <span class="hljs-built_in">print</span>(info)<br>        q.put(info)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = Queue(<span class="hljs-number">20</span>)<br>    pro_con = Process(target=consumer, args=(q,))<br>    pro_pro = Process(target=productor, args=(q,))<br>    pro_con.start()<br>    pro_pro.start()<br></code></pre></td></tr></table></figure><p>第二版在消费者函数中加了一个判断，如果不能取到数据，就退出。但是这个逻辑是有问题的，如果生产者的速度比较慢，数据还没来及放到队列中时，消费者已经去取了，发现没取到就判断为生产者已经全部生产完了，自己就退出了。而实际上生产者还在不断的生产数据，所以为了保险起见，生产者在生产完所有的数据后，可以在队列中加一个结束的标识，告诉消费者我已经生产结束了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第三版</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><br><span class="hljs-comment"># 消费者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        info = q.get()<br>        <span class="hljs-keyword">if</span> info <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;包子取完了&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我吃到了&quot;</span> + info)<br><br><span class="hljs-comment"># 生产者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">productor</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        info = <span class="hljs-string">f&quot;包子<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>)&#125;</span>号&quot;</span><br>        q.put(info)<br>    q.put(<span class="hljs-literal">None</span>)  <span class="hljs-comment"># 生产结束了，放入一个结束的标志来提醒消费者</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = Queue(<span class="hljs-number">5</span>)<br>    pro_con = Process(target=consumer, args=(q,))<br>    pro_pro = Process(target=productor, args=(q,))<br>    pro_con.start()<br>    pro_pro.start()<br></code></pre></td></tr></table></figure><p>这次可以完美实现了，但是这是只有一个生产者和一个消费者的情况，如果有一个生产者和多个消费者，生产者放入的结束标识被某一个消费者拿到后，后面几个消费者就没有办法再次拿到了，所以还是会阻塞，因此，有多少个消费者就应该有多少个结束标识，再次基础上我们再来优化一下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 终极版</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><br><span class="hljs-comment"># 消费者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        info = q.get()<br>        <span class="hljs-keyword">if</span> info <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我吃到了&quot;</span> + info)<br><br><span class="hljs-comment"># 生产者函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">productor</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        info = <span class="hljs-string">f&quot;包子<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>)&#125;</span>号&quot;</span><br>        q.put(info)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = Queue(<span class="hljs-number">5</span>)<br>    pro_con1 = Process(target=consumer, args=(q,))<br>    pro_con2 = Process(target=consumer, args=(q,))<br>    pro_con3 = Process(target=consumer, args=(q,))<br><br>    pro_pro1 = Process(target=productor, args=(q,))<br>    pro_pro2 = Process(target=productor, args=(q,))<br><br>    pro_con1.start()<br>    pro_con2.start()<br>    pro_con3.start()<br>    pro_pro1.start()<br>    pro_pro2.start()<br><br>    <span class="hljs-comment"># 我们可以把添加结束标识放在主进程中操作，主进程必须等生产者生产完后再添加标识</span><br>    pro_pro1.join()<br>    pro_pro2.join()<br><br>    <span class="hljs-comment"># 有几个消费者就添加几个标识</span><br>    q.put(<span class="hljs-literal">None</span>)<br>    q.put(<span class="hljs-literal">None</span>)<br>    q.put(<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><strong>基于可连接队列实现的生产者消费者模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> JoinableQueue, Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">consumer</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        info = q.get()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我吃到了&quot;</span> + info)<br>        q.task_done()  <span class="hljs-comment"># 没吃到一个包子就告诉生产者一下，生产者的计数器（join）就会自减 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">productor</span>(<span class="hljs-params">q</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        info = <span class="hljs-string">f&quot;包子<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>)&#125;</span>号&quot;</span><br>        q.put(info)<br>    q.join()  <span class="hljs-comment"># 此时生产者会将生产的包子的数目，即20，记录下来，阻塞等待消费者消费完队列中所有的数据（即join计数为0）再解除阻塞</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q = JoinableQueue(<span class="hljs-number">10</span>)<br>    p_pro = Process(target=productor, args=(q,))<br>    p_con = Process(target=consumer, args=(q,))<br><br>    <span class="hljs-comment"># 将消费者设置成守护进程</span><br>    p_con.daemon = <span class="hljs-literal">True</span><br><br>    p_pro.start()<br>    p_con.start()<br><br>    <span class="hljs-comment"># 主进程等待生产者全部结束再结束</span><br>    p_pro.join()<br></code></pre></td></tr></table></figure><p>实现的逻辑是这样的，首先生产者由于q.join的缘故，要等到消费者的task_done不断返回，等 join 计数变为0的时候，生产者才能结束；主进程由于p_pro.join()的缘故，必须等待生产者结束，自身的代码才能执行结束，而一旦主进程的代码执行结束了，消费者这个守护进程就会跟着结束，因此就不会存在消费者循环阻塞的问题了。</p><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><p>进程池实际上就是一个池子，它会帮程序员去管理池中的进程。进程池里边有固定数量的进程。这些进程一直处于待命状态，一旦有任务来，马上就有进程去处理。因为在实际业务中，任务量是有多有少的，如果任务量特别的多，不可能要开对应那么多的进程数，其次也不是开的进程越多，效率越高。开启那么多进程首先就需要消耗大量的时间让操作系统来为你管理它。其次还需要消耗大量时间让 CPU 帮你调度它。一边拿来说，进程数量是 CPU 核数 + 1 时，对CPU的利用率是最高的。</p><h3 id="一、使用进程池的三个方法"><a href="#一、使用进程池的三个方法" class="headerlink" title="一、使用进程池的三个方法"></a><strong>一、使用进程池的三个方法</strong></h3><p><strong>map(func,iterable)  方法</strong></p><ul><li>func：进程池中的进程执行的任务函数</li><li>iterable：可迭代对象，是把可迭代对象中的每个元素依次传给任务函数当参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(num)<br>    <span class="hljs-keyword">return</span> num<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Pool(<span class="hljs-number">5</span>)<br>    res = p.<span class="hljs-built_in">map</span>(func, [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)])<br>    p.close()<br>    p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程中map的返回值&#x27;</span>, res)<br></code></pre></td></tr></table></figure><p><strong>apply(func,args&#x3D;())  方法</strong></p><ul><li>func：进程池中的进程执行的任务函数</li><li>args：可迭代对象型的参数，是传给任务函数的参数</li></ul><p>该方法为同步方法，即根据进程池中的进程数量接入对应数量的任务，但是进程是一个一个执行的。同步处理任务时，不需要close和join，进程池中的所有进程是普通进程，即主进程需要等待其执行结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> num<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pool = Pool(os.cpu_count() + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):  <span class="hljs-comment"># 同步处理这100个任务，同步是指，哪怕我进程中有5个进程，也依旧是1个进程1个进程的去执行任务</span><br>        res = pool.apply(func,args=(i,))<br>        <span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><p><strong>apply_async(func,args&#x3D;(),callback&#x3D;None)  方法</strong></p><ul><li>func：进程池中的进程执行的任务函数</li><li>args：可迭代对象型的参数，是传给任务函数的参数</li><li>callback：回调函数，就是说每当进程池中有进程处理完任务了，返回的结果可以交给回调函数，由回调函数进行进一步的处理，回调函数只有异步才有，同步是没有的</li></ul><p>异步处理任务时，进程池中的所有进程是守护进程（主进程代码执行完毕守护进程就结束），所以异步处理任务时，必须要加上close和join，同步处理不需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> num<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Pool(<span class="hljs-number">5</span>)<br>    start = time.time()<br>    l = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    <span class="hljs-comment"># 异步处理这100个任务，异步是指，进程中有5个进程，一下就处理5个任务，接下来哪个进程处理完任务了，就马上去接收下一个任务</span><br>        res = p.apply_async(func,args=(i,))  <span class="hljs-comment"># 得到的结果是一个AsyncResul的实例obj，先将结果放入列表</span><br>        l.append(res)<br>    p.close()  <span class="hljs-comment">#  关闭进程池，防止还有其他的任务过来</span><br>    p.join()   <span class="hljs-comment"># 阻塞等待进程池中的子进程执行结束</span><br>    <span class="hljs-built_in">print</span>(time.time() - start)<br>    <br>    [<span class="hljs-built_in">print</span>(i.get()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l]<br>    <br><span class="hljs-comment"># 异步机制执行的结果是AsyncResul的实例obj，需要通过get方法得到实际结果；同步机制没有此方法，同步机制能直接拿到实际结果。</span><br><span class="hljs-comment"># 其实get是阻塞等待的，也就是说，如果没有上边的close和join，主进程一样会阻塞在get等待进程池中给返回结果。进程池异步执行任务获取结果，每次有一个进程返回结果后，就能get到一个结果，然后for循环到下一次继续阻塞等待拿结果，所以为了不影响执行效率，通常是将进程池执行的初始结果统一保存，然后统一取值</span><br></code></pre></td></tr></table></figure><h3 id="二、回调函数的使用"><a href="#二、回调函数的使用" class="headerlink" title="二、回调函数的使用"></a><strong>二、回调函数的使用</strong></h3><p>进程的任务函数的返回值，被当成回调函数的形参接收到，以此进行进一步的处理操作。回调函数是<strong>由主进程调用的，而不是子进程</strong>，子进程只负责把结果传递给回调函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time,os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">url</span>):<br>    res = requests.get(url)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程的pid:%s,父进程的pid：%s&#x27;</span>%(os.getpid(),os.getppid()))<br>    <span class="hljs-comment"># print(res.text)</span><br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">return</span> url,res.text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_result</span>(<span class="hljs-params">res</span>):<br>    url,text = res<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;回调函数的pid&#x27;</span>, os.getpid())  <span class="hljs-comment"># 所有打印出来的回调函数的pid都和主进程是一样的，所以回调函数都是由主进程负责调用的</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(url + text)<br>    <span class="hljs-comment"># print(&#x27;回调函数中！&#x27;,url)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Pool(<span class="hljs-number">5</span>)<br>    l = [<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,<br>         <span class="hljs-string">&#x27;http://www.jd.com&#x27;</span>,<br>         <span class="hljs-string">&#x27;http://www.taobao.com&#x27;</span>,<br>         <span class="hljs-string">&#x27;http://www.mi.com&#x27;</span>,<br>         <span class="hljs-string">&#x27;http://www.cnblogs.com&#x27;</span>,<br>         <span class="hljs-string">&#x27;https://www.bilibili.com&#x27;</span>,<br>         ]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程的pid&#x27;</span>,os.getpid())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br>        p.apply_async(func, args=(i,),callback=record_result)<span class="hljs-comment">#</span><br>        <span class="hljs-comment"># 异步执行任务func，每有一个进程执行完任务后，在func中return一个结果，结果会自动的被callback指定的函数，当成形式参数来接收到</span><br>    p.close()<br>    p.join()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 正则表达式</title>
    <link href="/2019/05/10/0014-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2019/05/10/0014-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="正则简介"><a href="#正则简介" class="headerlink" title="正则简介"></a>正则简介</h2><h3 id="一、什么是正则表达式？"><a href="#一、什么是正则表达式？" class="headerlink" title="一、什么是正则表达式？"></a><strong>一、什么是正则表达式？</strong></h3><p>​正则表达式本身与某种编程语言并没有什么实质性的联系，它只是匹配字符串内容的一种规则。官方的定义是，正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><h3 id="二、应用领域"><a href="#二、应用领域" class="headerlink" title="二、应用领域"></a><strong>二、应用领域</strong></h3><p>​正则匹配可以应用于用户登录或注册时输入的用户名、密码、邮箱、手机号等信息是否合法；也可以应用于爬虫领域，从爬取的数据中过滤出想要的内容。既然正则表达式是一种匹配字符串的规则，所以正则表达式操作的对象一定是字符串对象。</p><h3 id="三、正则在线测试工具"><a href="#三、正则在线测试工具" class="headerlink" title="三、正则在线测试工具"></a><strong>三、正则在线测试工具</strong></h3><p><a href="http://tool.chinaz.com/regex">http://tool.chinaz.com/regex</a></p><h2 id="正则语法"><a href="#正则语法" class="headerlink" title="正则语法"></a>正则语法</h2><h3 id="一、字符组"><a href="#一、字符组" class="headerlink" title="一、字符组"></a><strong>一、字符组</strong></h3><p>在同一个位置可能出现的各种字符组成了一个字符组，在正则表达式中用[ ]表示。字符分为很多类，比如数字、字母、标点等等</p><p><strong>[ ] 的使用</strong></p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[1aB]</span><br>待匹配字符：<span class="hljs-number">1</span>ABs<br>匹配结果：匹配到两个，分别是 <span class="hljs-number">1</span> <span class="hljs-selector-tag">B</span><br>解释：字符组只匹配一个字符的位置，只要目标字符中有出现在字符组范围内的，就能匹配上，如目标字符中的<span class="hljs-number">1</span>和<span class="hljs-selector-tag">B</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[0-9]</span><br>待匹配字符：<span class="hljs-number">12</span>AB<br>匹配结果：匹配到两个，分别是 <span class="hljs-number">1</span> <span class="hljs-number">2</span><br>解释：也可以用-表示范围，<span class="hljs-selector-attr">[0-9]</span>就和<span class="hljs-selector-attr">[0123456789]</span>是一个意思，目标字符串只要出现在数字范围内就能匹配到<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[a-z]</span><br>待匹配字符：<span class="hljs-number">12</span>abs<br>匹配结果：匹配到三个，分别是 <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> s<br>解释：根据英文字符的ascii码范围去匹配，目标字符串只要出现在<span class="hljs-selector-tag">a</span>-z范围的字符就能匹配到，<span class="hljs-selector-attr">[a-z]</span>和<span class="hljs-selector-attr">[abcdefghijklmnopqrstuvwxyz]</span>表达的意思一样<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[A-Z]</span><br>待匹配字符：<span class="hljs-number">12</span>ACL<br>匹配结果：匹配到三个，分别是 <span class="hljs-selector-tag">A</span> C L<br>解释：根据英文字符的ascii码范围去匹配，目标字符串只要出现在<span class="hljs-selector-tag">A</span>-Z范围的字符就能匹配到，<span class="hljs-selector-attr">[A-Z]</span>和<span class="hljs-selector-attr">[ABCDEFGHIJKLMNOPQRSTUVWXYZ]</span>表达的意思一样<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[0-9]</span><span class="hljs-selector-attr">[a-z]</span><span class="hljs-selector-attr">[A-Z]</span><br>待匹配字符：<span class="hljs-number">12</span>ACL5dC<br>匹配结果：匹配到一个，分别是<span class="hljs-number">5</span>dC<br>解释：此时的正则规则是由三个字符组组成，且第一个字符必须是一个数字，第二个必须是小写字母，第三个必须是大写字母，在待匹配的字符串中只能找到 <span class="hljs-number">5</span>dC 符合要求<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[0-9a-zA-Z]</span><br>待匹配字符：<span class="hljs-number">12</span>AcL<br>匹配结果：匹配到五个，分别是 <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-selector-tag">A</span> c L<br>解释：正则的范围包括所有的数字和字母，因此都可以匹配到<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：      <span class="hljs-selector-attr">[abc0-9]</span><br>待匹配字符：<span class="hljs-number">12</span>AcL<br>匹配结果：匹配到三个，分别是 <span class="hljs-number">1</span> <span class="hljs-number">2</span> c<br>解释：匹配<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> c或者<span class="hljs-number">0</span>-<span class="hljs-number">9</span>之间的数字<br></code></pre></td></tr></table></figure><p>注：使用 “-” 时，必须由小到大写，如 0-9，a-z，A-Z，不能从大到小写，如 9-0，g-a，Z-B</p><h3 id="二、元字符"><a href="#二、元字符" class="headerlink" title="二、元字符"></a><strong>二、元字符</strong></h3><p><strong>.匹配除换行符以外的任意字符</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：     .<br>待匹配字符：<span class="hljs-number">12</span>AcL<br>匹配结果：匹配到五个，分别是 <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-selector-tag">A</span> c L<br></code></pre></td></tr></table></figure><p><strong>\w匹配字母或数字或下划线</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">正则：\w<br>待匹配字符：s_a1<span class="hljs-meta">@</span><br>匹配结果：匹配到四个，分别是 s <span class="hljs-literal">_</span> a <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>\s匹配任意的空白符</strong></p><p><strong>\d匹配数字</strong></p><p><strong>\n匹配一个换行符</strong></p><p><strong>\t匹配一个制表符</strong></p><p><strong>\b匹配一个单词的结尾（边界）</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">正则：o\<span class="hljs-keyword">b</span><br>待匹配字符：hellohello<br>匹配结果：匹配到<span class="hljs-number">1</span>个，结果为第二个hello中的o，即字符串最后一个o<br>解释：正则中字符o后面紧跟着结尾边界，待匹配字符串中，第一个hello的o后面是字母h，不是结尾，所以只能匹配到最后一个o<br></code></pre></td></tr></table></figure><p><strong>^匹配字符串的开始</strong></p><p><strong>$匹配字符串的结尾</strong></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cos">正则：<span class="hljs-symbol">^hello</span>$<br>待匹配字符：hellohello<br>匹配结果：匹配不到结果<br>解释：正则中hello单词的前面必须是开始符号，末尾必须是结束符号，待匹配的字符串中找不到对应的字段<br></code></pre></td></tr></table></figure><p><strong>\W匹配非字母或数字或下划线</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">与 <span class="hljs-string">\w</span> 互斥，[<span class="hljs-string">\w\W]</span> 表示匹配所有<br></code></pre></td></tr></table></figure><p><strong>\S匹配非空白符</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">与 <span class="hljs-string">\s</span> 互斥，[<span class="hljs-string">\s\S]</span> 表示匹配所有<br></code></pre></td></tr></table></figure><p><strong>\D匹配非数字</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">与 <span class="hljs-string">\d</span> 互斥，[<span class="hljs-string">\d\D]</span> 表示匹配所有<br></code></pre></td></tr></table></figure><p><strong>a|b匹配字符a或者b</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vim">正则：<span class="hljs-keyword">a</span>|<span class="hljs-keyword">b</span><br>待匹配字符：<span class="hljs-keyword">abc</span><br>匹配结果：匹配到<span class="hljs-number">2</span>个，结果分别为 <span class="hljs-keyword">a</span> <span class="hljs-keyword">b</span><br><br>注：当出现的选择的范围是包含关系时，要把大的范围写在前面<br># 错误写法<br>正则：<span class="hljs-keyword">abc</span>|abcd<br>待匹配字符：abcd<br>匹配结果：匹配到<span class="hljs-number">1</span>个，结果分别为<span class="hljs-keyword">abc</span><br>解释：正则是从左往右进行匹配的，此时无论是输入 <span class="hljs-keyword">abc</span> 还是 abcd 都会被第一个条件匹配到，第二个条件无法执行<br><br># 修改<br>正则：abcd|<span class="hljs-keyword">abc</span><br>待匹配字符：abcd<br>匹配结果：匹配到<span class="hljs-number">1</span>个，结果分别为abcd<br>解释：此时输入 <span class="hljs-keyword">abc</span>，使用第二个条件匹配，输入 abcd，使用第一个条件匹配<br></code></pre></td></tr></table></figure><p><strong>( )匹配括号内的表达式，也表示一个组</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一般和量词结合使用<br></code></pre></td></tr></table></figure><p><strong>[ ]匹配字符组中的内容</strong></p><p><strong>[^ ]匹配非字符组中的所有内容</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">正则：<span class="hljs-selector-attr">[^0-9a-z]</span><br>待匹配字符：<span class="hljs-number">0</span>aA<br>匹配结果：匹配到<span class="hljs-number">1</span>个，结果分别为<span class="hljs-selector-tag">A</span><br>解释：匹配除了数字和小写字母其他以外的所有字符<br></code></pre></td></tr></table></figure><h3 id="三、量词"><a href="#三、量词" class="headerlink" title="三、量词"></a><strong>三、量词</strong></h3><p><strong>?重复一次或者零次（即当前字符可有可无）</strong></p><p><strong>+重复一次或多次（即当前字符至少出现一次）</strong></p><p><strong>*重复零次或多次</strong></p><p><strong>{n}重复n次</strong></p><p><strong>{n, }至少重复n次</strong></p><p><strong>{n,m} 重复n到m次</strong></p><h3 id="四、正则匹配实例"><a href="#四、正则匹配实例" class="headerlink" title="四、正则匹配实例"></a><strong>四、正则匹配实例</strong></h3><p><strong>. ^ $  联合使用</strong></p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配 结果</th><th>说明</th></tr></thead><tbody><tr><td>海.</td><td>海燕海娇海东</td><td>海燕   海娇   海东</td><td><code> 匹配所有&quot;海.&quot;的字符</code></td></tr><tr><td>^海.</td><td>海燕海娇海东</td><td>海燕</td><td><code>只从开头匹配&quot;海.&quot;</code></td></tr><tr><td>海.$</td><td>海燕海娇海东</td><td>海东</td><td><code>只匹配结尾的&quot;海.$&quot;</code></td></tr></tbody></table><p><strong>? + * {}   联合使用</strong></p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配 结果</th><th>说明</th></tr></thead><tbody><tr><td>李.?</td><td>李杰和李莲英和李二棍子</td><td>李杰 李莲 李二</td><td><code>?表示重复零次或一次，即只匹配&quot;李&quot;后面一个任意字符</code></td></tr><tr><td>李.*</td><td>李杰和李莲英和李二棍子</td><td>李杰和李莲英和李二棍子</td><td><code>*表示重复零次或多次，即匹配&quot;李&quot;后面0或多个任意字符</code></td></tr><tr><td>李.+</td><td>李杰和李莲英和李二棍子</td><td>李杰和李莲英和李二棍子</td><td><code>+表示重复一次或多次，即只匹配&quot;李&quot;后面1个或多个任意字符</code></td></tr><tr><td>李.{1,2}</td><td>李杰和李莲英和李二棍子</td><td>李杰和 李莲英 李二棍</td><td><code>&#123;1,2&#125;匹配1到2次任意字符</code></td></tr></tbody></table><p><strong>字符集 []  [^]</strong></p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配 结果</th><th>说明</th></tr></thead><tbody><tr><td>李[杰莲英二棍子]*</td><td>李杰和李莲英和李二棍子</td><td>李杰   李莲英   李二棍子</td><td><code>表示匹配&quot;李&quot;字后面[杰莲英二棍子]的字符任意次</code></td></tr><tr><td>李[^和]*</td><td>李杰和李莲英和李二棍子</td><td>李杰   李莲英   李二棍子</td><td><code>表示匹配一个不是&quot;和&quot;的字符任意次</code></td></tr><tr><td>[\d]</td><td>456bdha3</td><td>4   5   6   3</td><td><code>表示匹配任意一个数字，匹配到4个结果</code></td></tr><tr><td>[\d]+</td><td>456bdha3</td><td>456     3</td><td><code>表示匹配任意个数字，匹配到2个结果</code></td></tr></tbody></table><p><strong>分组( )  或|  [^]   联合使用</strong></p><p> 身份证号码是一个长度为15或18个字符的字符串，如果是15位则全部由数字组成，首位不能为0；如果是18位，则前17位全部是数字，末位可能是数字或x，</p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配 结果</th><th>说明</th></tr></thead><tbody><tr><td>^[1-9]\d{13,16}[0-9x]$</td><td>110101198001017032</td><td>110101198001017032</td><td><code>表示可以匹配一个正确的身份证号</code></td></tr><tr><td>^[1-9]\d{13,16}[0-9x]$</td><td>1101011980010170</td><td>1101011980010170</td><td><code>表示也可以匹配这串数字，但这并不是一个正确的身份证号码，它是一个16位的数字</code></td></tr><tr><td>^[1-9]\d{14}(\d{2}[0-9x])?$</td><td>1101011980010170</td><td>False</td><td><code>现在不会匹配错误的身份证号了()表示分组，将\d&#123;2&#125;[0-9x]分成一组，就可以整体约束他们出现的次数为0-1次</code></td></tr><tr><td>^([1-9]\d{16}[0-9x]|[1-9]\d{14})$</td><td>110105199812067023</td><td>110105199812067023</td><td><code>表示先匹配[1-9]\d&#123;16&#125;[0-9x]如果没有匹配上就匹配[1-9]\d&#123;14&#125;</code></td></tr></tbody></table><h3 id="五、正则表达式小练习"><a href="#五、正则表达式小练习" class="headerlink" title="五、正则表达式小练习"></a><strong>五、正则表达式小练习</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 匹配任意长度的正整数</span><br>[<span class="hljs-meta">1-9</span>]\d*<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 匹配小数</span><br>-<span class="hljs-string">?\d</span>+\.\d+<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 匹配整数或者小数</span><br>-<span class="hljs-string">?\d</span>+\.<span class="hljs-string">?\d</span>*   有缺陷 <span class="hljs-number">1</span>. <span class="hljs-number">2</span>.这样的内容都能被匹配上<br>-<span class="hljs-string">?\d</span>+\.<span class="hljs-string">?\d</span>+   有缺陷 <span class="hljs-number">1</span> <span class="hljs-number">2</span> 这样的一位数都匹配不上了<br>-<span class="hljs-string">?\d</span>+(\.\d+)?  将小数点和小数分组成一个整体的表达式，对整体进行取零次或者一次的操作，即小数和小数点可有可无，有就是小数，没有就是整数<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 匹配负数</span><br><span class="hljs-punctuation">-</span><span class="hljs-number">0</span>\.\d<span class="hljs-punctuation">+</span><span class="hljs-string">|-[1-9]\d*(\.\d+)?</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 匹配手机号</span><br><span class="hljs-attribute">1</span>[<span class="hljs-number">3</span>-<span class="hljs-number">9</span>]\d&#123;<span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 匹配qq号</span><br>[<span class="hljs-meta">1-9</span>]\d&#123;<span class="hljs-number">4</span>,<span class="hljs-number">11</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 匹配8-10位的用户密码，包含数字字母下划线和?@密码</span><br>[\w@<span class="hljs-string">?]</span>&#123;<span class="hljs-number">8</span>,<span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment"># 匹配验证码，4位数字字母组成的</span><br>[<span class="hljs-string">\da-zA-Z]&#123;4&#125;</span><br></code></pre></td></tr></table></figure><h3 id="六、特殊的用法和现象"><a href="#六、特殊的用法和现象" class="headerlink" title="六、特殊的用法和现象"></a><strong>六、特殊的用法和现象</strong></h3><p><strong>量词 + ? 的用法</strong></p><p>​量词中的 ? + * {n,} 和 {n,m} 都是属于贪婪匹配，即尽可能多的匹配符合规则的字符，例如使用规则 ab{1,4} 去匹配  abbbbbbb，得到的结果是 abbbb，但是实际上 ab，abb，abbb 也是符合正则匹配的规则的，但是最后的结果还是以{1,4}中较大的范围优先，这就是贪婪匹配。</p><p>​在正则内部，贪婪匹配是根据<strong>回溯算法</strong>来实现的。如，使用&lt;.*&gt; 规则去匹配&lt;dshdksadk&gt;&lt;dsahdksdjks&gt;dhaskdksdjklsdjklsdj ，得到的结果为&lt;dshdksadk&gt;&lt;dsahdksdjks&gt;，内部的匹配流程是从左往右分析规则，即从待匹配字符串离开时找，找到第一个 &lt; 号，往后匹配所有字符，即匹配到结尾的 j ，此时规则发现是以 &gt; 结尾的，就回头在找到这个符号为止。</p><p>而 “量词+?” 表示尽可能少的去匹配，即惰性匹配。如，使用&lt;.*?&gt; 规则去匹配&lt;dshdksadk&gt;&lt;dsahdksdjks&gt;dhaskdksdjklsdjklsdj ，得到的结果为&lt;dshdksadk&gt;，内部实现的流程是规则在开始匹配时就会把 &gt; 带着，一但找到这个符号，就不继续往后找了。</p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配 结果</th><th>说明</th></tr></thead><tbody><tr><td>李.*?</td><td>李杰和李莲英和李二棍子</td><td>李 <br/>李<br/> 李</td><td>* 重复零次或多次，尽可能重复多次<br/>*? 尽可能重复零次</td></tr><tr><td>李.+?</td><td>李杰和李莲英和李二棍子</td><td>李杰<br/>李莲<br/>李二</td><td>+ 重复一次或多次，尽可能重复多次<br/>+? 尽可能重复一次</td></tr><tr><td>李.??</td><td>李杰和李莲英和李二棍子</td><td>李<br/>李<br/>李</td><td>？ 重复一次或零次次，尽可能重复一次<br/>?? 尽可能重复零次次</td></tr><tr><td>李.{1,4}?</td><td>李杰和李莲英和李二棍子</td><td>李杰<br/>李莲<br/>李二</td><td>{n, m} 重复n次到m次，尽可能重复m次<br/>{n, m}? 尽可能重复n次</td></tr><tr><td>李.{1,}?</td><td>李杰和李莲英和李二棍子</td><td>李杰<br/>李莲<br/>李二</td><td>{n, }重复n次或多次，尽可能重复多次<br/>{n, }? 尽可能重复n次</td></tr></tbody></table><p><strong>正则表达式中符号的转义</strong></p><p>​在字符组中一些特殊的字符会现出原形，如 [()+*?&#x2F;$.] 就表示匹配对应的字符符号，原来的作用都不会生效，[-] 只有写在字符组的首位的时候表示普通的减号或者负号，写在其他位置的时候表示范围，如 [1 - 9]，而所有的 \w \d \s(\n,\t, )  \W \D \S都表示它原本的意义，因此为了避免有的特殊符号在字符组中会产生特殊的作用，我们可以统一在这些符号前添加一个转义符 “\“</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[<span class="hljs-string">\\d]</span>表示匹配<span class="hljs-string">\或者d</span><br>[<span class="hljs-string">\-]</span>表示匹配减号<br>[<span class="hljs-string">\(]</span>表示匹配括号<br></code></pre></td></tr></table></figure><h2 id="Python中使用正则"><a href="#Python中使用正则" class="headerlink" title="Python中使用正则"></a>Python中使用正则</h2><h3 id="一、匹配相关"><a href="#一、匹配相关" class="headerlink" title="一、匹配相关"></a><strong>一、匹配相关</strong></h3><p><strong>findall 方法</strong></p><p>​将所有匹配上的内容全部返回，返回值是一个列表；如果没有匹配结果，返回一个空列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ret1 = re.findall(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;12sdasd5897dshkda1364&quot;</span>)<br><span class="hljs-built_in">print</span>(ret1)  <span class="hljs-comment"># [&#x27;12&#x27;, &#x27;5897&#x27;, &#x27;1364&#x27;]</span><br><br>ret2 = re.findall(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;asdsadsa&quot;</span>)<br><span class="hljs-built_in">print</span>(ret2)  <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><p><strong>search 方法</strong></p><p>​如果匹配上了，返回一个正则匹配结果的对象，匹配不上返回None；通过group方法从对象中取值，但是只能拿到第一个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret1 = re.search(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;12sdasd5897dshkda1364&quot;</span>)<br><span class="hljs-built_in">print</span>(ret1)  <span class="hljs-comment"># &lt;_sre.SRE_Match object; span=(0, 2), match=&#x27;12&#x27;&gt;  span为匹配到的结果的索引值范围，match为匹配到的结果</span><br><span class="hljs-built_in">print</span>(ret1.group())  <span class="hljs-comment"># 12</span><br><br>ret2 = re.search(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;asdsadsa&quot;</span>)<br><span class="hljs-built_in">print</span>(ret2)  <span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><p><strong>match 方法</strong></p><p>​和search方法一样，如果匹配上了，返回一个正则匹配结果的对象，匹配不上返回None；通过group方法从对象中拿到第一个值，但是match必须从头开始匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret1 = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;12sdasd5897dshkda1364&quot;</span>)<br><span class="hljs-built_in">print</span>(ret1)  <span class="hljs-comment"># &lt;_sre.SRE_Match object; span=(0, 2), match=&#x27;12&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(ret1.group())  <span class="hljs-comment"># 12</span><br><br>ret2 = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;@!12sdasd5897dshkda1364&quot;</span>)<br><span class="hljs-built_in">print</span>(ret2)  <span class="hljs-comment"># match是从头开始匹配的，代码中要从头开始匹配数字，但是开头是符号，所以匹配失败返回None</span><br></code></pre></td></tr></table></figure><h3 id="二、替换相关"><a href="#二、替换相关" class="headerlink" title="二、替换相关"></a><strong>二、替换相关</strong></h3><p><strong>sub 方法</strong></p><p>​将原字符串中对应字段替换成新规定的内容，返回替换后的结果，默认全部替换，可以指定替换的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret1 = re.sub(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;123sdasd456das789dsa&quot;</span>)<br><span class="hljs-built_in">print</span>(ret1)  <span class="hljs-comment">#  HsdasdHdasHdsa</span><br><br><span class="hljs-comment"># 指定替换次数</span><br>ret2 = re.sub(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;123sdasd456das789dsa&quot;</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 只替换两处</span><br><span class="hljs-built_in">print</span>(ret2)  <span class="hljs-comment"># HsdasdHdas789dsa</span><br></code></pre></td></tr></table></figure><p><strong>subn 方法</strong></p><p>​将原字符串中对应字段替换成新规定的内容，返回值是一个元组，包含替换后的结果以及替换的次数，默认全部替换，可以指定替换的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret1 = re.subn(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;123sdasd456das789dsa&quot;</span>)<br><span class="hljs-built_in">print</span>(ret1)  <span class="hljs-comment">#  (&#x27;HsdasdHdasHdsa&#x27;, 3)</span><br><br><span class="hljs-comment"># 指定替换次数</span><br>ret2 = re.subn(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;123sdasd456das789dsa&quot;</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 只替换两处</span><br><span class="hljs-built_in">print</span>(ret2)  <span class="hljs-comment"># (&#x27;HsdasdHdas789dsa&#x27;, 2)</span><br></code></pre></td></tr></table></figure><h3 id="三、切割相关"><a href="#三、切割相关" class="headerlink" title="三、切割相关"></a><strong>三、切割相关</strong></h3><p>​在原字符串中按照匹配的内容进行切割，返回值是一个列表，存放切割后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = re.split(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;dsad123dsada456dsada789dsad&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)  <span class="hljs-comment"># [&#x27;dsad&#x27;, &#x27;dsada&#x27;, &#x27;dsada&#x27;, &#x27;dsad&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="四、进阶方法"><a href="#四、进阶方法" class="headerlink" title="四、进阶方法"></a><strong>四、进阶方法</strong></h3><p><strong>compile 方法</strong>（时间效率）</p><p>​对于python中的正则机制而言，其流程是先将正则表达式转换成python解释器能够理解的代码，再对字符串进行匹配，因此对于较长或者比较复杂的正则表达式，每次翻译解释就需要耗费一定的时间，如果频繁使用该正则，对整个任务的时间花费将会造成较大的影响。因此可以先使用compile方法，对正则表达式进行预编译，每次使用时直接使用预编译好的对象，从而节省时间。</p><p>注：只有在多次使用某一个相同的正则表达式的时候,这个compile才会帮助我们提高程序的效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">match_num = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;0\.\d+|[1-9]\d*(\.\d+)?&quot;</span>)<br><span class="hljs-built_in">print</span>(match_num)  <span class="hljs-comment"># re.compile(&#x27;0\\.\\d+|[1-9]\\d*(\\.\\d+)?&#x27;) 预编译</span><br><span class="hljs-comment"># 匹配/切割/替换等方法对于预编译对象皆可用</span><br>ret1 = match_num.search(<span class="hljs-string">&quot;12sdasd545&quot;</span>)<br><span class="hljs-built_in">print</span>(ret1.group())  <span class="hljs-comment"># 12</span><br></code></pre></td></tr></table></figure><p><strong>finditer 方法</strong>（空间效率）</p><p>​如果匹配到的内容特别多，一次性读入内存，会影响代码的处理效率，因此可以使用finditer方法，返回一个迭代器，迭代器中存放的是正则匹配结果的对象，逐个取值，节省内存，提高效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = re.finditer(<span class="hljs-string">&quot;\d+&quot;</span>, <span class="hljs-string">&quot;sdas1s23ds45s78s6d5d485&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)  <span class="hljs-comment"># &lt;callable_iterator object at 0x000001AD72D0C470&gt;</span><br><span class="hljs-built_in">print</span>(ret.__next__())  <span class="hljs-comment"># &lt;_sre.SRE_Match object; span=(4, 5), match=&#x27;1&#x27;&gt;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ret:<br>    <span class="hljs-built_in">print</span>(i.group())<br></code></pre></td></tr></table></figure><h3 id="五、分组相关"><a href="#五、分组相关" class="headerlink" title="五、分组相关"></a><strong>五、分组相关</strong></h3><p><strong>分组命名</strong></p><ul><li>(?P<name>正则表达式) 表示给分组起名字</li><li>(?P&#x3D;name)表示使用这个分组,这里匹配到的内容应该和之前定义的分组中的内容完全相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基本使用</span><br>ret = re.search(<span class="hljs-string">&quot;(?P&lt;year&gt;\d+)年(?P&lt;month&gt;\d+)月(?P&lt;day&gt;\d+)日&quot;</span>, <span class="hljs-string">&quot;今天是2020年02月20日&quot;</span>)<br><span class="hljs-built_in">print</span>(ret.group())  <span class="hljs-comment"># 2020年02月20日</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-string">&quot;year&quot;</span>))  <span class="hljs-comment"># 2020</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-string">&quot;month&quot;</span>)) <span class="hljs-comment"># 02</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-string">&quot;day&quot;</span>))  <span class="hljs-comment"># 20</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在正则规则中使用之前定义的分组</span><br>ret = re.search(<span class="hljs-string">&quot;&lt;(?P&lt;tag&gt;\w+)&gt;\w+&lt;/\w+&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;a&gt;wahahawahaha&lt;/b&gt;&quot;</span>)<br><span class="hljs-built_in">print</span>(ret.group())  <span class="hljs-comment"># &lt;a&gt;wahahawahaha&lt;/b&gt;</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-string">&quot;tag&quot;</span>))  <span class="hljs-comment"># a</span><br><br>ret = re.search(<span class="hljs-string">&quot;&lt;(?P&lt;tag&gt;\w+)&gt;\w+&lt;/(?P=tag)&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;a&gt;wahahawahaha&lt;/b&gt;&quot;</span>)<br><span class="hljs-built_in">print</span>(ret.group())    <span class="hljs-comment"># AttributeError: &#x27;NoneType&#x27; object has no attribute &#x27;group&#x27;，报错</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-string">&quot;tag&quot;</span>))  <br><span class="hljs-comment"># 报错是由于正则规则中，定义的分组命名 ?P&lt;tag&gt; 的内容应该是 a，所以后面使用分组时 ?P=tag 对应的值也要是 a，但是待匹配中对应的位置的值是 b，所以没有匹配到结果，返回None，None中没有group方法，所以报错</span><br></code></pre></td></tr></table></figure><p><strong>通过索引使用分组</strong></p><p>​不用给分组命名，直接使用分组的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 索引是从1开始的，所以分组(\w+) (\d+) (\w+)的索引分别是 1 2 3，在正则规则中想要使用分组的索引，只需要 &quot;\索引&quot; 即可</span><br>ret = re.search(<span class="hljs-string">r&quot;&lt;(\w+)&gt;(\d+)(\w+)&lt;/\1&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;a&gt;12345sdsad&lt;/a&gt;&quot;</span>) <span class="hljs-comment"># python字符串中&quot;\&quot;可能无法转义，可以在字符串最前面加一个r进行强制转义</span><br><span class="hljs-built_in">print</span>(ret.group())  <span class="hljs-comment"># &lt;a&gt;dshak12345&lt;/a&gt;</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">1</span>)) <span class="hljs-comment"># a</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">2</span>)) <span class="hljs-comment"># 12345</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">3</span>)) <span class="hljs-comment"># sdsad</span><br></code></pre></td></tr></table></figure><p>python 中的正则表达式有着一些自己的特性：</p><ul><li>findall 方法中，正则规则出现分组，匹配的结果会优先显示分组的结果，要想取消分组优先，使用 (?:正则表达式)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = re.findall(<span class="hljs-string">&quot;(\d+)\w&quot;</span>, <span class="hljs-string">&quot;12HHH456AAAdsjs&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)  <span class="hljs-comment"># [&#x27;12&#x27;, &#x27;456&#x27;]  理论上结果应该是 [&#x27;12H&#x27;, &#x27;456A&#x27;]，这就是因为分组结果优先的原因</span><br><br><span class="hljs-comment"># 取消分组优先</span><br>ret = re.findall(<span class="hljs-string">&quot;(?:\d+)\w&quot;</span>, <span class="hljs-string">&quot;12HHH456AAAdsjs&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><ul><li>split 方法遇到分组，会保留切割的内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = re.split(<span class="hljs-string">&quot;(\d+)&quot;</span>, <span class="hljs-string">&quot;dsa123dsds45ds&quot;</span>)<br><span class="hljs-built_in">print</span>(ret) <span class="hljs-comment"># [&#x27;dsa&#x27;, &#x27;123&#x27;, &#x27;dsds&#x27;, &#x27;45&#x27;, &#x27;ds&#x27;]  理论上列表中应该不保留数字</span><br><br><span class="hljs-comment"># 取消分组的影响</span><br>ret = re.split(<span class="hljs-string">&quot;(?:\d+)&quot;</span>, <span class="hljs-string">&quot;dsa123dsds45ds&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)<br></code></pre></td></tr></table></figure><ul><li>search中有分组的话，通过group(n)就能够拿到group中的匹配的内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 索引是从1开始的，所以分组(\w+) (\d+) (\w+)的索引分别是 1 2 3</span><br>ret = re.search(<span class="hljs-string">r&quot;&lt;(\w+)&gt;(\d+)(\w+)&lt;/\1&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;a&gt;12345sdsad&lt;/a&gt;&quot;</span>) <br><span class="hljs-built_in">print</span>(ret.group())  <span class="hljs-comment"># &lt;a&gt;dshak12345&lt;/a&gt;</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">1</span>)) <span class="hljs-comment"># a</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">2</span>)) <span class="hljs-comment"># 12345</span><br><span class="hljs-built_in">print</span>(ret.group(<span class="hljs-number">3</span>)) <span class="hljs-comment"># sdsad</span><br></code></pre></td></tr></table></figure><p>补：re 模块中，各个方法中的参数 flags</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">flags有很多可选值：<br>    re.I(IGNORECASE)忽略大小写，括号内是完整的写法<br>    re.M(MULTILINE)多行模式，改变^和$的行为<br>    re.S(DOTALL)点可以匹配任意字符，包括换行符<br>    re.L(LOCALE)做本地化识别的匹配，表示特殊字符集 <span class="hljs-string">\w,</span> <span class="hljs-string">\W,</span> <span class="hljs-string">\b,</span> <span class="hljs-string">\B,</span> <span class="hljs-string">\s,</span> <span class="hljs-string">\S</span> 依赖于当前环境，不推荐使用<br>    re.U(UNICODE) 使用<span class="hljs-string">\w</span> <span class="hljs-string">\W</span> <span class="hljs-string">\s</span> <span class="hljs-string">\S</span> <span class="hljs-string">\d</span> <span class="hljs-string">\D使用取决于unicode定义的字符属性。在python3中默认使用该flag</span><br>    re.X(VERBOSE)冗长模式，该模式下pattern字符串可以是多行的，忽略空白字符，并可以添加注释<br>    <br>一般常用前三个<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ret = re.findall(<span class="hljs-string">&quot;[a-z]&quot;</span>, <span class="hljs-string">&quot;dsaQWE&quot;</span>, flags=re.I)<br><span class="hljs-built_in">print</span>(ret)  <span class="hljs-comment"># [&#x27;d&#x27;, &#x27;s&#x27;, &#x27;a&#x27;, &#x27;Q&#x27;, &#x27;W&#x27;, &#x27;E&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 面向对象进阶</title>
    <link href="/2019/05/04/0013-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/"/>
    <url>/2019/05/04/0013-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="一、属性初识"><a href="#一、属性初识" class="headerlink" title="一、属性初识"></a><strong>一、属性初识</strong></h3><p>我们定义一个用于计算圆的周长和面积的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, r</span>):<br>        <span class="hljs-variable language_">self</span>.r = r<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perimeter</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * <span class="hljs-number">3.14</span> * <span class="hljs-variable language_">self</span>.r<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * <span class="hljs-variable language_">self</span>.r ** <span class="hljs-number">2</span><br><br>c1 = Circle(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(c1.area())  <span class="hljs-comment"># 计算圆的面积</span><br><span class="hljs-built_in">print</span>(c1.perimeter())  <span class="hljs-comment"># 计算圆的周长</span><br></code></pre></td></tr></table></figure><p>虽然功能实现了，但是在我们平时认知的逻辑上似乎不太合理。周长和面积都应该是圆的一个属性，换句话来说，周长和面积都应该是一个名字，而不应该是一个方法。我们在上述类中，实际上调用了计算周长和面积的方法，才得到的对应的值。我们可以使用面向对象的属性来实现这个操作。</p><p>**属性：**将方法伪装成一个属性，在代码的本质上没有实质上的提升，只是让逻辑看上去更加的合理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, r</span>):<br>        <span class="hljs-variable language_">self</span>.r = r<br><br><span class="hljs-comment"># 利用property装饰器，将方法伪装成属性</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perimeter</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * <span class="hljs-number">3.14</span> * <span class="hljs-variable language_">self</span>.r<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * <span class="hljs-variable language_">self</span>.r ** <span class="hljs-number">2</span><br><br>c1 = Circle(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(c1.area)  <span class="hljs-comment"># 若该方法被伪装成了属性，再调用时，就和直接调用类中的其他属性一样，不需要加括号</span><br><span class="hljs-built_in">print</span>(c1.perimeter)<br></code></pre></td></tr></table></figure><h3 id="二、操作属性"><a href="#二、操作属性" class="headerlink" title="二、操作属性"></a><strong>二、操作属性</strong></h3><p>虽然将方法伪装成属性后，调用属性和正常调用类中的其他属性一样，但是不能直接对其进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__age<br><br>p1 = Person(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(p1.age)<br>p1.age = <span class="hljs-number">28</span>  <span class="hljs-comment"># AttributeError: can&#x27;t set attribute</span><br></code></pre></td></tr></table></figure><p>我们可以通过 <strong>@方法名.setter</strong> 和 <strong>@方法名.deleter</strong> 对伪装的属性进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改属性的值</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, new_age</span>):<br>        <span class="hljs-variable language_">self</span>.__age = new_age<br><br><br>p1 = Person(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;修改前:&quot;</span>, p1.age)<br>p1.age = <span class="hljs-number">28</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;修改后:&quot;</span>, p1.age)<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p>  <img src="/img/blog/about_python/面向对象_修改属性.png" style="zoom: 67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除属性</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.__age<br>        <br><span class="hljs-meta">    @age.deleter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.__age<br>        <br>p1 = Person(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前:&quot;</span>, p1.age)<br><span class="hljs-keyword">del</span> p1.age<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后:&quot;</span>, p1.age)  <span class="hljs-comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_Person__age&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="三、属性的应用场景"><a href="#三、属性的应用场景" class="headerlink" title="三、属性的应用场景"></a><strong>三、属性的应用场景</strong></h3><ul><li>一般用于类似周长、面积、BMI 等值的计算，需求上是想调用值，而实现上需要计算的场景。</li><li>涉及到私有相关的，这个时候更多的也会用到 setter 和 deleter</li></ul><h2 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h2><h3 id="一、类方法"><a href="#一、类方法" class="headerlink" title="一、类方法"></a><strong>一、类方法</strong></h3><p>类方法就是通过类名调用的方法。类方法中第一个参数约定俗称 cls，python 自动将类名(类空间)传给 cls。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># 普通方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br>        <br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(cls)<br></code></pre></td></tr></table></figure><ul><li>类名调用类方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># 普通方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br><br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(cls)  <span class="hljs-comment"># &lt;class &#x27;__main__.A&#x27;&gt;</span><br><br><span class="hljs-built_in">print</span>(A)   <span class="hljs-comment"># &lt;class &#x27;__main__.A&#x27;&gt;</span><br>A.func2()   <span class="hljs-comment"># 类名调用类方法不需要传参数，python会把类的空间自动传给方法中cls参数</span><br><br>A.func1(<span class="hljs-number">111</span>)  <span class="hljs-comment"># 类名调用普通方法需要传参数</span><br></code></pre></td></tr></table></figure><ul><li>对象也可以调用类方法，此时 cls 接收的是类本身</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># 普通方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br><br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(cls)  <span class="hljs-comment"># &lt;class &#x27;__main__.A&#x27;&gt;</span><br><br>a1 = A()<br>a1.func2()<br></code></pre></td></tr></table></figure><ul><li>对于继承而言，cls 参数接收的也是调用类方法的类的空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># 普通方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br><br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(cls)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br>B.func2()<br>b1 = B()  <span class="hljs-comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span><br>b1.func2()  <span class="hljs-comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、类方法的应用场景"><a href="#二、类方法的应用场景" class="headerlink" title="二、类方法的应用场景"></a><strong>二、类方法的应用场景</strong></h3><ul><li>类中不需要对象参与的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span>:<br>    name = <span class="hljs-string">&#x27;cdc&#x27;</span><br>    count = <span class="hljs-number">1</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">cls</span>):  <span class="hljs-comment"># 此方法无需对象参与</span><br>        <span class="hljs-keyword">return</span> cls.name + <span class="hljs-built_in">str</span>(cls.count + <span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(A1.func1())<br></code></pre></td></tr></table></figure><ul><li>对类中的静态变量进行改变，要用类方法</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">class</span> A1:<br>    <span class="hljs-keyword">name</span> = <span class="hljs-string">&#x27;cdc&#x27;</span><br>    <span class="hljs-built_in">count</span> = <span class="hljs-number">1</span><br><br>    @classmethod<br>    def func1(cls):<br>        # A1.<span class="hljs-keyword">name</span> = <span class="hljs-string">&quot;cdcx&quot;</span>  # cls已经接收到了A1的空间了,可以按如下写<br>        cls.<span class="hljs-keyword">name</span> = <span class="hljs-string">&quot;cdcx&quot;</span><br><br><br><span class="hljs-built_in">print</span>(A1.<span class="hljs-keyword">name</span>)<br>A1.func1()<br><span class="hljs-built_in">print</span>(A1.<span class="hljs-keyword">name</span>)<br></code></pre></td></tr></table></figure><ul><li>继承中，父类得到子类的类空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    age = <span class="hljs-number">18</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(cls)  <span class="hljs-comment"># &lt;class &#x27;__main__.B&#x27;&gt;</span><br>        <span class="hljs-built_in">print</span>(cls.name + <span class="hljs-built_in">str</span>(cls.age))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    name = <span class="hljs-string">&quot;tr&quot;</span><br>    age = <span class="hljs-number">28</span><br><br>B.func1()  <span class="hljs-comment"># tr28</span><br></code></pre></td></tr></table></figure><p>此时，cls 参数接收到是子类 B 的空间，因此可以在父类中任意使用子类中的内容。当然，我们也可以不通过类方法，让父类的某个方法得到子类的类空间里面的任意值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    age = <span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)  <span class="hljs-comment"># self 接收的是子类的对象，通过子类对象能得到子类空间的任意值  &lt;__main__.B object at 0x0000019103C2C470&gt;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.age) <span class="hljs-comment"># 22</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    age = <span class="hljs-number">22</span><br><br>b1 = B()<br><span class="hljs-built_in">print</span>(b1)  <span class="hljs-comment"># &lt;__main__.B object at 0x0000019103C2C470&gt;</span><br>b1.func2()<br></code></pre></td></tr></table></figure><p>通过类方法和不通过类方法都可以实现，但是两种实现方式都有优劣之处。通过子类对象的方式，既可以拿到子类空间的内容也可以拿到子类实例化对象空间内的内容；通过类方法更加简单方便，所以具体的使用还是要看需求来定。</p><h3 id="三、静态方法"><a href="#三、静态方法" class="headerlink" title="三、静态方法"></a><strong>三、静态方法</strong></h3><p>静态方法是类中的函数，不需要实例，也是通过类名直接调用。静态方法主要是用来存放逻辑性的代码，逻辑上属于类，但是和类本身没有关系，也就是说在静态方法中，不会涉及到类中的属性和方法的操作。可以理解为，静态方法是个<strong>独立的、单纯的</strong>函数，它仅仅托管于某个类的名称空间中，便于使用和维护。简单来说，静态方法和定义在类外部的普通函数没有区别，不需要对象和类的参与，定义静态方法只是为了让类更加整洁，避免打乱了逻辑关系，加强代码的复用性，方便以后代码维护。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># 普通方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-comment"># 静态方法</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func3</span>():<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">username, pwd</span>):<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;cdc&quot;</span> <span class="hljs-keyword">and</span> pwd == <span class="hljs-string">&quot;123456&quot;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录成功&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>)<br>            <br>A.login(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射就是用字符串数据类型的变量名来访问这个变量的值。</p><p>反射的方法有：</p><ul><li>getattr</li><li>hasattr</li><li>setattr</li><li>delattr</li></ul><h3 id="一、类的反射"><a href="#一、类的反射" class="headerlink" title="一、类的反射"></a><strong>一、类的反射</strong></h3><p>语法:  getattr(类名(即名称空间),’XXX’)  XXX一定是字符串，且在类中能找到同名的静态属性或者方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 类的反射</span><br><span class="hljs-comment"># 语法: 命名空间.XXX == getattr(命名空间,&#x27;XXX&#x27;)  XXX一定是字符串,且在类中能找到同名的静态属性或者方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    ROLE = <span class="hljs-string">&quot;student&quot;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;查看课程&quot;</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录&quot;</span>)<br><br><span class="hljs-comment"># 反射操作静态属性</span><br><span class="hljs-built_in">print</span>(Student.ROLE)  <span class="hljs-comment"># 普通方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(Student, <span class="hljs-string">&quot;ROLE&quot;</span>))  <span class="hljs-comment"># 反射方法  等价于 Student.ROLE</span><br><br><span class="hljs-comment"># 反射操作类的方法</span><br>Student.check_course()  <span class="hljs-comment"># 普通方法</span><br><span class="hljs-built_in">getattr</span>(Student, <span class="hljs-string">&quot;check_course&quot;</span>)()  <span class="hljs-comment"># 反射 getattr(Student, &quot;check_course&quot;)相当于拿到了类中check_course方法的内存地址,等价于 Student.check_course，加()执行方法</span><br><br>Student.login()<br><span class="hljs-built_in">getattr</span>(Student, <span class="hljs-string">&quot;login&quot;</span>)()<br></code></pre></td></tr></table></figure><h3 id="二、对象的反射"><a href="#二、对象的反射" class="headerlink" title="二、对象的反射"></a><strong>二、对象的反射</strong></h3><p>语法：getattr(对象名(即实例化空间),’XXX’)  XXX一定是字符串，且在类中能找到同名的方法或者对象的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">6666</span>)<br><br>a1 = A(<span class="hljs-string">&quot;cdc&quot;</span>)<br><br><span class="hljs-comment"># 反射操作对象的属性</span><br><span class="hljs-built_in">print</span>(a1.name)  <span class="hljs-comment"># 普通方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(a1, <span class="hljs-string">&quot;name&quot;</span>))  <span class="hljs-comment"># 反射  等价于 a1.name</span><br><br><span class="hljs-comment"># 反射操作对象的方法</span><br>a1.func1()  <span class="hljs-comment"># 普通方法</span><br><span class="hljs-built_in">getattr</span>(a1, <span class="hljs-string">&quot;func1&quot;</span>)()  <span class="hljs-comment"># 反射</span><br></code></pre></td></tr></table></figure><h3 id="三、模块的反射"><a href="#三、模块的反射" class="headerlink" title="三、模块的反射"></a><strong>三、模块的反射</strong></h3><p>语法：getattr(模块名,’XXX’)  XXX一定是字符串，且在模块中能找到同名的方法或属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># time.sleep(3)  # 普通调用方式</span><br><span class="hljs-built_in">getattr</span>(time, <span class="hljs-string">&quot;sleep&quot;</span>)(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 反射调用方式</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">666</span>)<br></code></pre></td></tr></table></figure><h3 id="四、反射的其他方法"><a href="#四、反射的其他方法" class="headerlink" title="四、反射的其他方法"></a><strong>四、反射的其他方法</strong></h3><p>hasattr 用于判断反射的调用者中是否有对应的方法或者属性，返回值是一个布尔值，一般都是和 getattr 联合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    ROLE = <span class="hljs-string">&#x27;STUDENT&#x27;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查看课程了&#x27;</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;登录&#x27;</span>)<br><br><span class="hljs-comment"># 反射一个类中没有的属性</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(Student, <span class="hljs-string">&quot;age&quot;</span>))  <span class="hljs-comment"># AttributeError: type object &#x27;Student&#x27; has no attribute &#x27;age&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hasattr</span>(Student, <span class="hljs-string">&quot;age&quot;</span>))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 联合使用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    ROLE = <span class="hljs-string">&#x27;STUDENT&#x27;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查看课程了&#x27;</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;登录&#x27;</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(Student, <span class="hljs-string">&quot;age&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(Student, <span class="hljs-string">&quot;age&quot;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到该属性&quot;</span>)<br></code></pre></td></tr></table></figure><p>setattr 用于修改反射调用者对应的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    ROLE = <span class="hljs-string">&#x27;STUDENT&#x27;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查看课程了&#x27;</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;登录&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(Student.ROLE) <span class="hljs-comment"># 修改前</span><br><span class="hljs-built_in">setattr</span>(Student, <span class="hljs-string">&quot;ROLE&quot;</span>, <span class="hljs-string">&quot;Teacher&quot;</span>)<br><span class="hljs-built_in">print</span>(Student.ROLE)  <span class="hljs-comment"># 修改后</span><br></code></pre></td></tr></table></figure><p>delattr 用于删除反射调用者对应的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    ROLE = <span class="hljs-string">&#x27;STUDENT&#x27;</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查看课程了&#x27;</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;登录&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(Student.ROLE)  <span class="hljs-comment"># 删除前</span><br><span class="hljs-built_in">delattr</span>(Student, <span class="hljs-string">&quot;ROLE&quot;</span>)<br><span class="hljs-built_in">print</span>(Student.ROLE)  <span class="hljs-comment"># 删除后 AttributeError: type object &#x27;Student&#x27; has no attribute &#x27;ROLE&#x27;</span><br></code></pre></td></tr></table></figure><p>注：setattr 和delattr 也可以用于自定义的类、对象和模块，但是不建议用于他人编写的模块或类。</p><h3 id="五、反射的好处"><a href="#五、反射的好处" class="headerlink" title="五、反射的好处"></a><strong>五、反射的好处</strong></h3><p>对于反射的作用，我们可能会有这样的疑问，对于我要调用的静态属性或者方法也好，我们都可以通过类名或者对象直接去调用，为什么还要多次一举来通过反射调用呢？使用反射到底有什么好处？我们可以通过一个简单的例子来感受一下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 编写一个简单的学生选课系统，要求如下：</span><br><span class="hljs-meta"># 1.通过用户的登录可以识别用户的身份，判断用户是学生还是管理员，并且根据身份实例化</span><br><span class="hljs-meta"># 2.根据每个身份对应的类，让用户选择能够做的事情</span><br></code></pre></td></tr></table></figure><p>我们先按照我们正常的逻辑来写</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># user_info文件，用于存放用户名，密码和用户身份</span><br>cdc|<span class="hljs-string">123456</span>|Manager<br>tr|<span class="hljs-string">666</span>|Student<br>ctt|<span class="hljs-string">2222</span>|Teacher<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 学生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;查看所有的课程&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选择课程&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;检查已选择过的课程&quot;</span>)<br><br><span class="hljs-comment"># 管理员类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_student</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;创建学生账号&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;创建课程&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_student_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查看学生信息&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;用户名：&quot;</span>)<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;密码：&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;user_info&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fr:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fr:<br>            user, password, idnt = line.strip().split(<span class="hljs-string">&quot;|&quot;</span>)<br>            <span class="hljs-keyword">if</span> username == user <span class="hljs-keyword">and</span> pwd == password:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br>                <span class="hljs-keyword">return</span> username, idnt  <span class="hljs-comment"># 判断用户名密码是否正确，并得到用户对应的身份</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    user, idnt = login()<br>    <span class="hljs-keyword">if</span> idnt == <span class="hljs-string">&quot;Student&quot;</span>:<br>        student = Student(user)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            exe_choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入操作：&quot;</span>)<br>            <span class="hljs-keyword">if</span> exe_choice == <span class="hljs-string">&quot;查看所有的课程&quot;</span>:<br>                student.view_course()<br>            <span class="hljs-keyword">elif</span> exe_choice == <span class="hljs-string">&quot;选择课程&quot;</span>:<br>                student.choose_course()<br>            <span class="hljs-keyword">elif</span> exe_choice == <span class="hljs-string">&quot;检查已选择过的课程&quot;</span>:<br>                student.check_course()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有此项操作&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        manager = Manager(user)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            exe_choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入操作：&quot;</span>)<br>            <span class="hljs-keyword">if</span> exe_choice == <span class="hljs-string">&quot;创建学生账号&quot;</span>:<br>                manager.create_student()<br>            <span class="hljs-keyword">elif</span> exe_choice == <span class="hljs-string">&quot;创建课程&quot;</span>:<br>                manager.create_course()<br>            <span class="hljs-keyword">elif</span> exe_choice == <span class="hljs-string">&quot;查看学生信息&quot;</span>:<br>                manager.check_student_info()<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有此项操作&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>我们可以看到，现在只有两个身份我们就需要做这么多的判断，对用户的身份需要判断，对用户的操作也需要判断，如果身份再增加的话，还需要继续添加判断的代码，整个项目就会特别的冗长。下面我们使用反射的思想的来对代码进行优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    OPERATE_DIC = [<br>        (<span class="hljs-string">&quot;查看所有的课程&quot;</span>, <span class="hljs-string">&quot;view_course&quot;</span>),<br>        (<span class="hljs-string">&quot;选择课程&quot;</span>, <span class="hljs-string">&quot;choose_course&quot;</span>),<br>        (<span class="hljs-string">&quot;检查已选择过的课程&quot;</span>, <span class="hljs-string">&quot;check_course&quot;</span>)<br>    ]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;查看所有的课程&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选择课程&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;检查已选择过的课程&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>:<br>    OPERATE_DIC = [<br>        (<span class="hljs-string">&quot;创建学生账号&quot;</span>, <span class="hljs-string">&quot;create_student&quot;</span>),<br>        (<span class="hljs-string">&quot;创建课程&quot;</span>, <span class="hljs-string">&quot;create_course&quot;</span>),<br>        (<span class="hljs-string">&quot;查看学生信息&quot;</span>, <span class="hljs-string">&quot;check_student_info&quot;</span>)<br>    ]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_student</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;创建学生账号&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_course</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;创建课程&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_student_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查看学生信息&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;用户名：&quot;</span>)<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;密码：&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;user_info&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fr:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fr:<br>            user, password, idnt = line.strip().split(<span class="hljs-string">&quot;|&quot;</span>)<br>            <span class="hljs-keyword">if</span> username == user <span class="hljs-keyword">and</span> pwd == password:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登陆成功&quot;</span>)<br>                <span class="hljs-keyword">return</span> username, idnt<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    user, idnt = login()<br>    <span class="hljs-built_in">print</span>(user, idnt)<br><br>    <span class="hljs-comment"># 利用模块映射来实例化对象</span><br>    file = sys.modules[<span class="hljs-string">&#x27;__main__&#x27;</span>]  <span class="hljs-comment"># 从系统路径中找到当前模块，即找到当前py文件的路径</span><br>    cls = <span class="hljs-built_in">getattr</span>(file, idnt)  <span class="hljs-comment"># 如果idnt=Student，该操作等价于 getattr(选课系统_反射版, &quot;Student&quot;)，得到对应的类</span><br><br>    <span class="hljs-comment"># 实例化对象</span><br>    obj = cls(user)<br><br>    operate_dic = cls.OPERATE_DIC<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> num, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(operate_dic, <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(num, i)<br>        exe_choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要执行的操操作序号：&quot;</span>))<br>        exe = operate_dic[exe_choice-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 获取用户要执行的操作</span><br>        <span class="hljs-comment"># 通过对象的反射执行对应的方法</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(obj, exe[<span class="hljs-number">1</span>]):<br>            <span class="hljs-built_in">getattr</span>(obj, exe[<span class="hljs-number">1</span>])()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有此操作&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>按照反射的思想来设计后，如果再添加新的类，也不需要对login和main函数进行修改了，只需要修改对应的类的定义就行了。</p><h2 id="面向对象相关的内置函数"><a href="#面向对象相关的内置函数" class="headerlink" title="面向对象相关的内置函数"></a>面向对象相关的内置函数</h2><ul><li>isinstance()  判断对象所属类型，包括继承关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">A</span>):<span class="hljs-keyword">pass</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(a, A))  <span class="hljs-comment"># True</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, A))  <span class="hljs-comment"># False</span><br><br>c = C()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(c, C))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(c, A))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># isinstance 和 type 的区别</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<span class="hljs-keyword">pass</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, B))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b) <span class="hljs-keyword">is</span> B)  <span class="hljs-comment"># True</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(b, A))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b) <span class="hljs-keyword">is</span> A)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># type只管最近的一层，不管继承的父类</span><br></code></pre></td></tr></table></figure><ul><li>issubclass()  判断类与类之间的继承关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">issubclass</span>(B,A))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">issubclass</span>(A,B))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h2 id="面向对象的内置方法"><a href="#面向对象的内置方法" class="headerlink" title="面向对象的内置方法"></a>面向对象的内置方法</h2><p>面向对象中的内置方法又称类中的特殊方法&#x2F;双下方法&#x2F;魔术方法，类中的每一个双下方法都有它自己的特殊意义，这些方法都不需要你在外部直接调用，而是通过一些特殊的语法来自动触发这些 双下方法。（注：内置函数和类的内置方法是有千丝万缕的关系的）</p><h3 id="一、-call"><a href="#一、-call" class="headerlink" title="一、__call__"></a><strong>一、__call__</strong></h3><p>实例化对象加()，就会触发该方法。call 方法常常用于在一个类中对另一个类的的功能进行添加，而不用去关注另一个类是如何定义的，flask框架源码中，很多地方就是使用的call方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;调用了__call__方法&quot;</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># &lt;__main__.A object at 0x00000187AB31C240&gt;</span><br><span class="hljs-built_in">print</span>(a()) <span class="hljs-comment"># 等级于 A()() 输出&#x27;调用了__call__方法&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">666</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在实例化A之前做一些事情&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.a = cls()<br>        <span class="hljs-variable language_">self</span>.a()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在实例化A之后做一些事情&#x27;</span>)<br><br>B(A)<br></code></pre></td></tr></table></figure><h3 id="二、-len"><a href="#二、-len" class="headerlink" title="二、__len__"></a><strong>二、__len__</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 未在类中定义__len__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>: <span class="hljs-keyword">pass</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))  <span class="hljs-comment"># TypeError: object of type &#x27;A&#x27; has no len()</span><br><br><span class="hljs-comment"># 在类中定义了__len__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">666</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))   <span class="hljs-comment"># 666</span><br></code></pre></td></tr></table></figure><ul><li>len(obj)相当于调用了这个obj的__len__方法</li><li>__len__方法return的值就是len函数的返回值，并不是真的返回对象的长度，具体的返回值需要自己来实现</li><li>如果一个obj对象没有__len__方法,那么len函数会报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mylist</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>        <span class="hljs-variable language_">self</span>.name = <span class="hljs-string">&#x27;alex&#x27;</span><br>        <span class="hljs-variable language_">self</span>.age = <span class="hljs-number">83</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;执行__len__了&#x27;</span>)<br>        <span class="hljs-comment"># return len(self.__dict__)  # 此时返回的就是对象空间里内容的长度</span><br>        <span class="hljs-comment"># return len(self.lst)  # 此时返回的就是列表的长度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.name)  <span class="hljs-comment"># 此时返回的就是name的长度</span><br><br>a = mylist()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure><h3 id="三、-new"><a href="#三、-new" class="headerlink" title="三、__new__"></a><strong>三、__new__</strong></h3><p>类中的构造方法，用于为实例化的对象开辟一个内存空间，在实例化对象之后和__init__执行之前执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__new__方法&quot;</span>, <span class="hljs-number">666</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__init__方法&quot;</span>, <span class="hljs-number">777</span>)<br><br>a = A()  <span class="hljs-comment"># __new__方法 666</span><br></code></pre></td></tr></table></figure><p>我们之前定义类的时候，从来没有定义过__new__方法，但是为什么实例化对象时还能获得一块内存呢？这是因为所有的类都继承于object类，在object中实现了构造方法。因此，我们在自己定义类中的__new__的时候，可以直接调用父类object的__new__方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        obj = <span class="hljs-built_in">super</span>().__new__(cls)  <span class="hljs-comment"># 调用父类object类中的构造方法，开辟一个空间</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__new__方法&quot;</span>, <span class="hljs-number">666</span>)<br>        <span class="hljs-keyword">return</span> obj  <span class="hljs-comment"># 将开辟的空间返回给对象，即self</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__init__方法&quot;</span>, <span class="hljs-number">777</span>)<br><br>a = A()<br></code></pre></td></tr></table></figure><p>我们知道，对于同一个类，每次实例化时都会给对象开辟一个新的实例化空间，那我们有没有办法让所有的实例化对象只用一块空间内？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<span class="hljs-keyword">pass</span><br><br>a1 = A()<br>a2 = A()<br>a3 = A()<br><br><span class="hljs-built_in">print</span>(a1)  <span class="hljs-comment"># &lt;__main__.A object at 0x000001EF4C78C390&gt;</span><br><span class="hljs-built_in">print</span>(a2)  <span class="hljs-comment"># &lt;__main__.A object at 0x000001EF4C78C470&gt;</span><br><span class="hljs-built_in">print</span>(a3)  <span class="hljs-comment"># &lt;__main__.A object at 0x000001EF4C78C438&gt;</span><br></code></pre></td></tr></table></figure><p>单例类：如果一个类 从头到尾只能有一个实例，说明从头到尾之开辟了一块儿属于对象的空间，那么这个类就是一个单例类。单例类就可以用__new__方法来实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    __SPACE = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-comment"># 如果还没有开辟内存，就开辟一块。如果已经有一块内存了，就把这块已经存在的内存再返回</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cls.__SPACE:<br>            cls.__SPACE = <span class="hljs-built_in">super</span>().__new__(cls)<br>        <span class="hljs-keyword">return</span> cls.__SPACE<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>a1 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br>a2 = A(<span class="hljs-string">&quot;trr&quot;</span>, <span class="hljs-number">20</span>)  <span class="hljs-comment"># 因为所有对象公用一块内存，所以内存中的变量会被替换</span><br><br><span class="hljs-built_in">print</span>(a1)  <span class="hljs-comment"># &lt;__main__.A object at 0x0000017DAD56CEB8&gt;</span><br><span class="hljs-built_in">print</span>(a2)  <span class="hljs-comment"># &lt;__main__.A object at 0x0000017DAD56CEB8&gt;</span><br><br><span class="hljs-built_in">print</span>(a1.name) <span class="hljs-comment"># trr</span><br></code></pre></td></tr></table></figure><h3 id="四、-str"><a href="#四、-str" class="headerlink" title="四、__str__"></a><strong>四、__str__</strong></h3><ul><li>print一个对象相当于调用一个对象的__str__方法</li><li>str(obj)，相当于执行obj.__str__方法</li><li>%s占位符字符串格式化输出时相当于执行obj.__str__方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 未定义__str__方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>a = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># &lt;__main__.A object at 0x000002E9980AC470&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a))  <span class="hljs-comment"># &lt;__main__.A object at 0x000002E9980AC470&gt;</span><br>s = <span class="hljs-string">f&quot;信息：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(s)  <span class="hljs-comment"># 信息：&lt;__main__.A object at 0x000002E9980AC470&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义了__str__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名:%s,年龄:%s&quot;</span> % (<span class="hljs-variable language_">self</span>.name, <span class="hljs-variable language_">self</span>.age)<br><br>a = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 姓名:cdc,年龄:18</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a))  <span class="hljs-comment"># 姓名:cdc,年龄:18</span><br>s = <span class="hljs-string">f&quot;信息：<span class="hljs-subst">&#123;a&#125;</span>&quot;</span>  <span class="hljs-comment"># 信息：姓名:cdc,年龄:18</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="五、-repr"><a href="#五、-repr" class="headerlink" title="五、__repr__"></a><strong>五、__repr__</strong></h3><ul><li>repr(obj)，相当于执行obj.__repr__方法</li><li>%r占位符格式化输出字符串时相当于执行obj.__repr__方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;__str__方法&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;__repr__方法&quot;</span><br>    <br>a = A()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a),<span class="hljs-built_in">repr</span>(a))  <span class="hljs-comment"># __str__方法 __repr__方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----%s-----%r-----&quot;</span> % (a, a))  <span class="hljs-comment"># ----__str__方法-----__repr__方法-----</span><br></code></pre></td></tr></table></figure><p><strong>__repr__和__str__的关系：</strong></p><ul><li>__repr__是__str__的”备胎”，如果有__str__方法，那么print %s str 都先去执行__str__方法，并且使用__str__的返回值，如果没有__str__,那么 print %s str 都会执行__repr__</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;__str__方法&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;__repr__方法&quot;</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># __str__方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a))   <span class="hljs-comment"># __str__方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s&quot;</span> % a)   <span class="hljs-comment"># __str__方法</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># def __str__(self):</span><br>    <span class="hljs-comment">#     return &quot;__str__方法&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;__repr__方法&quot;</span><br><br>a = A()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># __repr__方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a))  <span class="hljs-comment"># __repr__方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s&quot;</span> % a)  <span class="hljs-comment"># __repr__方法</span><br></code></pre></td></tr></table></figure><ul><li>在子类中使用__str__，先找子类的__str__，没有的话要向上找，只要父类不是object，就执行父类的__str__；但是如果除了object之外的父类都没有__str__方法，就执行子类的__repr__方法；如果子类也没有__repr__方法，还要向上继续找父类中的__repr__方法，一直找不到就再执行object类中的__str__方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 子类和父类都有 __str__ </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A中的__repr__&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;B中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;B中的__repr__&quot;</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># B中的__str__</span><br><br><span class="hljs-comment">#################################################################</span><br><br><span class="hljs-comment"># 子类中没有__str__，父类中有__str__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A中的__repr__&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-comment"># def __str__(self):</span><br>    <span class="hljs-comment">#     return &quot;B中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;B中的__repr__&quot;</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># A中的__str__</span><br><br><br><span class="hljs-comment">#################################################################</span><br><br><span class="hljs-comment"># 子类和父类没有__str__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># def __str__(self):</span><br>    <span class="hljs-comment">#     return &quot;A中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A中的__repr__&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-comment"># def __str__(self):</span><br>    <span class="hljs-comment">#     return &quot;B中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;B中的__repr__&quot;</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># B中的__repr__</span><br><br><span class="hljs-comment">#################################################################</span><br><br><span class="hljs-comment"># 子类中没有__repr__，父类中有__repr__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># def __str__(self):</span><br>    <span class="hljs-comment">#     return &quot;A中的__str__&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;A中的__repr__&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-comment"># def __str__(self):</span><br>    <span class="hljs-comment">#     return &quot;B中的__str__&quot;</span><br><br>    <span class="hljs-comment"># def __repr__(self):</span><br>    <span class="hljs-comment">#  return &quot;B中的__repr__&quot;</span><br>    <br>    <span class="hljs-keyword">pass</span><br><br>b = B()<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># A中的__repr__</span><br></code></pre></td></tr></table></figure><h3 id="六、-del"><a href="#六、-del" class="headerlink" title="六、__del__"></a><strong>六、__del__</strong></h3><p>__new__构造方法用于申请一块内存空间，__del__析构方法用于归还一些在创建对象的时候借用的资源（主要是操作系统资源，如文件资源和网络资源等），在释放空间操作之前执行。</p><p>简单来说，在类空间内定义的变量或者方法等资源，是由python解释器来管理的，当类空间释放掉以后，python的垃圾回收机制会自动回收这些资源。但是有些借用操作系统相关的资源，python解释器是无法去归还释放的。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, file_name</span>):<br>        <span class="hljs-variable language_">self</span>.file_name = file_name<br>        <span class="hljs-variable language_">self</span>.f = <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.file_name, mode=<span class="hljs-string">&quot;r&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.f.read()<br><br>f = File(<span class="hljs-string">&quot;a.txt&quot;</span>)<br>f.read()<br></code></pre></td></tr></table></figure><p>f 定义在类内部的一个文件句柄资源，当整个代码运行结束后，f 就会被python解释器释放掉。但是操作系统借出的文件资源并不会因此释放掉，会驻存内存中，如果读取的文件的内容较多，实例化的对象也较多后，内存就会被过分占用导致系统卡顿现象，因此我们需要手动释放操作系统的文件资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, file_name</span>):<br>        <span class="hljs-variable language_">self</span>.file_name = file_name<br>        <span class="hljs-variable language_">self</span>.f = <span class="hljs-built_in">open</span>(<span class="hljs-variable language_">self</span>.file_name, mode=<span class="hljs-string">&quot;r&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.f.read()<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.f.close()  <span class="hljs-comment"># 归还文件资源</span><br><br>f = File(<span class="hljs-string">&quot;a.txt&quot;</span>)<br>f.read()<br></code></pre></td></tr></table></figure><h3 id="七、item系列"><a href="#七、item系列" class="headerlink" title="七、item系列"></a><strong>七、item系列</strong></h3><p>在内置模块中，有一些特殊的方法，要求对象必须实现__getitem__&#x2F;__setitem__&#x2F;__delitem__才能使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, key, value</span>):<br>        <span class="hljs-built_in">print</span>(key)  <span class="hljs-comment"># name</span><br>        <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># trr</span><br>        <span class="hljs-comment"># self.key = value  # 此操作相当于给对象加了一个属性，没法改变name的值，可以使用反射</span><br>        <span class="hljs-built_in">setattr</span>(<span class="hljs-variable language_">self</span>, key, value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.name<br><br>a = A(<span class="hljs-string">&quot;cdc&quot;</span>)<br><br><span class="hljs-comment"># print(a.name)  # 普通方式取值</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;name&quot;</span>])  <span class="hljs-comment"># item系列取值，类似于字典取值</span><br><br><span class="hljs-comment"># a.name = &quot;trr&quot; # 普通方式修改值</span><br>a[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;trr&quot;</span>  <span class="hljs-comment"># item系列修改值</span><br><span class="hljs-built_in">print</span>(a.name)<br><br><span class="hljs-comment"># del a.name  # 普通方式删除值</span><br><span class="hljs-keyword">del</span> a[<span class="hljs-string">&quot;name&quot;</span>]  <span class="hljs-comment"># item系列删除值</span><br><br><span class="hljs-comment">###################################</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,lst</span>):<br>        <span class="hljs-variable language_">self</span>.lst = lst<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.lst[item]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, key, value</span>):<br>        <span class="hljs-variable language_">self</span>.lst[key] = value<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-variable language_">self</span>.lst.pop(key)<br>b = B([<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;222&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-string">&#x27;ddd&#x27;</span>])<br><span class="hljs-built_in">print</span>(b.lst[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(b[<span class="hljs-number">0</span>])<br>b[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;alex&#x27;</span><br><span class="hljs-built_in">print</span>(b.lst)<br><span class="hljs-keyword">del</span> b[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(b.lst)<br></code></pre></td></tr></table></figure><h3 id="八、-hash"><a href="#八、-hash" class="headerlink" title="八、__hash__"></a><strong>八、__hash__</strong></h3><p>hash算法：实现能够把某一个要存在内存里的值通过一系列计算，保证不同值的hash结果是不一样的。对同一个值在多次执行python代码的时候hash值是不同，但是对同一个值在同一次执行python代码的时候hash值永远不变。在存储数据时，hash 算法会先根据要存储的对象进行hash计算，得到一个数字，这个数字是真实的物理内存地址，理论上来说，在一次代码运行中，只要值不一样，得到的地址应该也不一样，但是hash算法也不是百分百保险的，也会出现值不同但是得到的地址相同的情况，为了防止这种情况的发生，hash算法实际上进行了以下步骤：</p><ol><li>先看一下这个地址内是否已经有值存储，如果是空的，就将当前的数据存储进去；</li><li>如果地址中已经存储了值，就比较当前的值和已存储的值是否完全一样，如果一样就不操作，如果不一样，就会把要存储的值在换一个地址进行存储（二次寻址）。</li></ol><p>hash算法常用于优化寻址操作。在python中最典型的应用就是字典的寻址和集合去重。</p><p><strong>字典的寻址</strong></p><p>在存储字典结构的数据类似时，会将每一对键值对的键进行hash计算，返回一个数字，这个数字就是实际的物理内存地址，然后将键值对的值的地址存放在对应的地址内。如果字典的键一样，后来的键对应的值就会把原来的值替换掉，即键每次寻址会找最新的那个地址（二次寻址）。取值时，将键再进行一次 hash 计算，直接去计算得出的内存地址处取值。</p><p>这就是为什么字典取值比列表快的原因，但是同时也要求了创建字典对象时，键必须是可hash的，且键要唯一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;aa&quot;</span>:<span class="hljs-string">&quot;trr&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>:<span class="hljs-string">&quot;cdc&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(dic[<span class="hljs-string">&quot;aa&quot;</span>])  <span class="hljs-comment"># cdc</span><br></code></pre></td></tr></table></figure> <img src="/img/blog/about_python/hash_字典存储.png" style="zoom: 67%;" /><p><strong>集合的去重</strong></p><p>集合去重也是运用了hash的机制，对每一个元素进行hash计算再去存储，对于值相等的元素对应的地址也相同，对应的值也相同，就不会重复存储了。</p><p>可以进行 hash(obj) 操作的对象，内部必须实现__hash__方法。</p><h3 id="九、-eq"><a href="#九、-eq" class="headerlink" title="九、__eq__"></a><strong>九、__eq__</strong></h3><p>用于指定对象是否相等的规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>a1 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br>a2 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><br><span class="hljs-built_in">print</span>(a1 == a2)  <span class="hljs-comment"># False，是两个不同的对象，虽然属性相同</span><br></code></pre></td></tr></table></figure><p>如果想实现只要属性相同的两个对象就是同一个对象，我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>a1 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br>a2 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">judge_obj</span>(<span class="hljs-params">obj1, obj2</span>):<br>    <span class="hljs-keyword">if</span> obj1.name == obj2.name <span class="hljs-keyword">and</span> obj1.age == obj2.age:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(judge_obj(a1, a2))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p>我们可以通过__eq__方法，将判断封装到类的内部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.name == other.name <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.age == other.age:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>a1 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br>a2 = A(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>)<br><br><span class="hljs-built_in">print</span>(a1 == a2)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="十、-hash-和-eq-联合使用"><a href="#十、-hash-和-eq-联合使用" class="headerlink" title="十、__hash__ 和 __eq__ 联合使用"></a><strong>十、__hash__</strong> <strong>和</strong> <strong>__eq__</strong> <strong>联合使用</strong></h3><p>可哈希的集合（hashed collections），需要集合的元素实现了__eql__和__hash__，而这两个方法可以作一个形象的比喻：</p><ul><li>哈希集合就是很多个桶，但每个桶里面只能放一个球。</li><li>__hash__函数的作用就是找到桶的位置，到底是几号桶。</li><li>__eql__函数的作用就是当桶里面已经有一个球了，但又来了一个球，它声称它也应该装进这个桶里面（__hash__函数给它说了桶的位置），双方僵持不下，那就得用__eql__函数来判断这两个球是不是相等的（equal），如果是判断是相等的，那么后来那个球就不应该放进桶里，哈希集合维持现状。</li></ul><p>我们可以通过一个很重要的例子来深入了解一下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">现在又一个<span class="hljs-keyword">Person</span>类，该类有500个对象，对象有姓名，性别，年龄三个属性。现在我认为只要是年龄和性别相同的对象，就属于同一个对象，针对这个需求对500个对象进行去重。<br></code></pre></td></tr></table></figure><p>首先我们先把类和对象实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.sex = sex<br><br>person_lst = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用来保存实例化出来的对象</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;cdc&quot;</span>, i, <span class="hljs-string">&quot;male&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;ctt&quot;</span>, i, <span class="hljs-string">&quot;female&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;trr&quot;</span>, i, <span class="hljs-string">&quot;female&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;th&quot;</span>, i, <span class="hljs-string">&quot;male&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;lj&quot;</span>, i, <span class="hljs-string">&quot;male&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(person_lst))  <span class="hljs-comment"># 500</span><br></code></pre></td></tr></table></figure><p>谈及到去重，我们的第一想法是尝试使用 set </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(person_lst))  # &#123;&lt;__main__.Person object <span class="hljs-built_in">at</span> <span class="hljs-number">0</span>x0000021BAB6C2048&gt;, &lt;__main__.Person object <span class="hljs-built_in">at</span> <span class="hljs-number">0</span>x0000021BAB6CA048&gt;......&#125;<br></code></pre></td></tr></table></figure><p>理论上来说，能实现 set 的对象内部一定要实现__hash__方法，之所以没有报错是因为 object 类中为我们实现了，但是 object 中实现的 __hash__ 方法无法满足我们的需求，我们要自己实现一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span><span class="hljs-subst">&#123;self.sex&#125;</span>&quot;</span>  <span class="hljs-comment"># 这部操作相当于我们使用姓名和性别拼接的字符串作为计算我们hash值的关键字，得到对应的地址</span><br></code></pre></td></tr></table></figure><p>得到我们自己想要的hash值以后，我们还要规定一个判断新的值和已经存储的值是否相等的规则，否则当同一个地址下，新存入的对象和已存在的对象相遇，无法判断这两个对象是否相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 完整的代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.sex = sex<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span><span class="hljs-subst">&#123;self.sex&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.name == other.name <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.sex == other.sex:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;姓名：<span class="hljs-subst">&#123;self.name&#125;</span>，性别：<span class="hljs-subst">&#123;self.sex&#125;</span>&quot;</span><br><br>person_lst = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用来保存实例化出来的对象</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;cdc&quot;</span>, i, <span class="hljs-string">&quot;male&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;ctt&quot;</span>, i, <span class="hljs-string">&quot;female&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;trr&quot;</span>, i, <span class="hljs-string">&quot;female&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;th&quot;</span>, i, <span class="hljs-string">&quot;male&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    person_lst.append(Person(<span class="hljs-string">&quot;lj&quot;</span>, i, <span class="hljs-string">&quot;male&quot;</span>))<br><br><span class="hljs-comment"># print(len(person_lst))</span><br><span class="hljs-comment"># print(set(person_lst))</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(person_lst):<br>    <span class="hljs-built_in">print</span>(i)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">姓名：th，性别：male</span><br><span class="hljs-string">姓名：lj，性别：male</span><br><span class="hljs-string">姓名：cdc，性别：male</span><br><span class="hljs-string">姓名：ctt，性别：female</span><br><span class="hljs-string">姓名：trr，性别：female</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 面向对象三大特性</title>
    <link href="/2019/05/03/0012-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
    <url>/2019/05/03/0012-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="一、继承初识"><a href="#一、继承初识" class="headerlink" title="一、继承初识"></a><strong>一、继承初识</strong></h3><p>我们先来看下面几段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, color</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.color = color<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, color</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, color</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>我们定义了猫的类、狗的类还有鸟的类，他们都有类似的对象属性和方法，如果往后还要定义更多的动物类，且这些类拥有的属性和方法都相同，又需要重新复写这些代码。所以我们就可以使用继承的思想来实现类似的这种需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, color</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.color = color<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>我们先定义一个 Animal 类，再将定义的 Cat 类和 Dog 类加一个括号，括号里传一个 Animal 类名，这就代表着我定义的 Cat 类和 Dog 类是继承于 Animal 类的，可以使用 Animal 类中的相关属性和方法。括号里面的称为父类（基类或者超类），括号外面的称为子类（或者派生类）。</p><p>使用继承思想有哪些好处：</p><ul><li>优化代码,节省代码</li><li>提高代码的复用性</li><li>提高代码的维护性</li><li>让类与类之间发生关系（组合是让对象之间发生关系）</li></ul><h3 id="二、对父类的调用"><a href="#二、对父类的调用" class="headerlink" title="二、对父类的调用"></a><strong>二、对父类的调用</strong></h3><p>子类以及子类实例化的对象，可以访问父类的任何方法或变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    breath = <span class="hljs-string">&#x27;呼吸&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)  <span class="hljs-comment"># &lt;__main__.Person object at 0x0000020663933588&gt;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物都需要进食....&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Animal</span>):  <span class="hljs-comment"># 括号里面的 父类,基类,超类   括号外面的 子类,派生类.</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-keyword">pass</span><br><br>p1 = Person(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-string">&#x27;boy&#x27;</span>, <span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(p1.__dict__)<br></code></pre></td></tr></table></figure><ul><li>子类的类名可以访问父类的所有内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(Person.breath)  <span class="hljs-comment"># 呼吸</span><br>Person.eat(<span class="hljs-number">111</span>)  <span class="hljs-comment"># 动物都需要进食....</span><br></code></pre></td></tr></table></figure><ul><li>子类实例化的对象也可以访问父类所有内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(p1.breath)<br>p1.eat()<br><br><span class="hljs-comment"># 当子类的实例化对象调用继承的父类中的方法时，会将子类对象的实例化空间传给父类对应方法中的self参数</span><br><span class="hljs-built_in">print</span>(p1)  <span class="hljs-comment"># &lt;__main__.Person object at 0x0000020663933588&gt;</span><br></code></pre></td></tr></table></figure><p>实例化对象查找相关的属性时，会先在实例空间内进行查找，找不到就会去本类中进行查找，还是找不到就再去父类中查找……</p><p>类名查找对应属性时，先从自身的名称空间进行查找，查找不到再去父类中查找，永远不可能从实例化的对象中查找。</p><h3 id="三、只调用子类的方法"><a href="#三、只调用子类的方法" class="headerlink" title="三、只调用子类的方法"></a><strong>三、只调用子类的方法</strong></h3><p>在子类创建这个方法，如果方法名与父类相同，按照执行顺序，会优先调用子类的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    breath = <span class="hljs-string">&#x27;呼吸&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物都需要进食....&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Animal</span>):  <span class="hljs-comment"># 括号里面的 父类,基类,超类   括号外面的 子类,派生类.</span><br>       <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我爱吃面条...&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我爱睡懒觉&quot;</span>)<br>        <br>p1 = Person(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-string">&#x27;boy&#x27;</span>, <span class="hljs-number">18</span>)<br>p1.eat()  <span class="hljs-comment"># 我爱吃面条...</span><br>p1.sleep()<br></code></pre></td></tr></table></figure><h3 id="四、只调用父类的方法"><a href="#四、只调用父类的方法" class="headerlink" title="四、只调用父类的方法"></a><strong>四、只调用父类的方法</strong></h3><p>子类中不要定义与父类同名的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    breath = <span class="hljs-string">&#x27;呼吸&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物都需要进食....&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Animal</span>):  <span class="hljs-comment"># 括号里面的 父类,基类,超类   括号外面的 子类,派生类.</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br>p1 = Person(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-string">&#x27;boy&#x27;</span>, <span class="hljs-number">18</span>)<br>p1.eat()  <span class="hljs-comment"># 动物都需要进食... </span><br></code></pre></td></tr></table></figure><h3 id="五、同时调用父类的方法和子类的方法"><a href="#五、同时调用父类的方法和子类的方法" class="headerlink" title="五、同时调用父类的方法和子类的方法"></a><strong>五、同时调用父类的方法和子类的方法</strong></h3><ul><li>方式一，通过类名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    breath = <span class="hljs-string">&#x27;呼吸&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物都需要进食....&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Animal</span>):  <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age, skin</span>):<br>        Animal.__init__(<span class="hljs-variable language_">self</span>, name, sex, age)<br>        <span class="hljs-variable language_">self</span>.skin = skin<br>        <br>p1 = Person(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-string">&#x27;boy&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;yellow&quot;</span>)<br><span class="hljs-built_in">print</span>(p1.name)  <span class="hljs-comment"># cdc</span><br><span class="hljs-built_in">print</span>(p1.sex)   <span class="hljs-comment"># boy</span><br><span class="hljs-built_in">print</span>(p1.age)   <span class="hljs-comment"># 18</span><br><span class="hljs-built_in">print</span>(p1.skin)  <span class="hljs-comment"># yellow</span><br></code></pre></td></tr></table></figure><ul><li>方式二，super()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    breath = <span class="hljs-string">&#x27;呼吸&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.sex = sex<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self, args</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物都需要进食....&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我爱吃<span class="hljs-subst">&#123;args&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">Animal</span>):  <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sex, age, skin</span>):<br>        <span class="hljs-comment"># super(Person, self).__init__(name, sex, age)  # 可以简写成以下方式</span><br>        <span class="hljs-built_in">super</span>().__init__(name, sex, age)<br>        <span class="hljs-variable language_">self</span>.skin = skin<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self, args</span>):<br>        <span class="hljs-built_in">super</span>().eat(args)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我爱吃面条&quot;</span>) <br>    <br>    <br>p1 = Person(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-string">&#x27;boy&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;yellow&quot;</span>)<br><span class="hljs-built_in">print</span>(p1.name)  <span class="hljs-comment"># cdc</span><br><span class="hljs-built_in">print</span>(p1.sex)   <span class="hljs-comment"># boy</span><br><span class="hljs-built_in">print</span>(p1.age)   <span class="hljs-comment"># 18</span><br><span class="hljs-built_in">print</span>(p1.skin)  <span class="hljs-comment"># yellow</span><br><br>p1.eat(<span class="hljs-string">&quot;馒头&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">动物都需要进食....</span><br><span class="hljs-string">我爱吃馒头</span><br><span class="hljs-string">我爱吃面条</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="六、新式类和经典类"><a href="#六、新式类和经典类" class="headerlink" title="六、新式类和经典类"></a><strong>六、新式类和经典类</strong></h3><ul><li>新式类：凡是继承object类都是新式类。python3 所有的类都是新式类，因为 python3 中的类都默认继承 object。</li><li>经典类：不继承object类都是经典类。python2 既有新式类，又有经典类。所有的类默认都不继承 object类，所有的类默认都是经典类；可以让其继承 object 转变为新式类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python2环境下</span><br><span class="hljs-comment"># 经典类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 新式类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="七、单继承和多继承的顺序"><a href="#七、单继承和多继承的顺序" class="headerlink" title="七、单继承和多继承的顺序"></a><strong>七、单继承和多继承的顺序</strong></h3><p>**单继承：**单继承的查询顺序在新式类和经典类中没有区别，都是现在本类中查找，找不到再去父类中查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;IN A&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN B&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN C&#x27;)</span><br><br>c1 = C()<br>c1.func()<br><br><span class="hljs-comment"># 查询顺序：C B A</span><br></code></pre></td></tr></table></figure><p>**多继承：**新式类遵循广度优先，经典类遵循深度优先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;IN A&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN B&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN C&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN D&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span>(<span class="hljs-title class_ inherited__">C</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN E&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>(D,E):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN F&#x27;)</span><br><br>f1 = F()<br>f1.func()<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>    <span class="hljs-selector-tag">A</span><br><span class="hljs-selector-tag">B</span>(A)<span class="hljs-built_in">C</span>(A)<br><br><span class="hljs-built_in">D</span>(B)<span class="hljs-built_in">E</span>(C)<br> <span class="hljs-built_in">F</span>(D,E)<br><br></code></pre></td></tr></table></figure><p>经典类：深度优先，即一条路走到黑。按照F的继承顺序从左往右查找，即如果F中没有，就去D中查找，D中没有就去B中查找，B中没有就去A中查找，找到就结束，再找不到就报错。</p><p>新式类：广度优先，一条路走到倒数第二级，判断，如果其他路能走到终点，则返回走另一条路。如果不能，则走到终点。按照F的继承顺序从左往右查找，即如果F中没有，就去D中查找，D中没有就去B中查找，此时在B处判断，如果没有其他途径能到达A，就去A中查找，找到就结束，再找不到就报错；显然上述列子中是有其他途径的（FECA），因此要返回从E开始查询，E中没有就去C中查询，C没有就去A中查找，找到就结束，再找不到就报错。因此广度优先的查询顺序为：FDBECA</p><h3 id="八、多继承C3算法"><a href="#八、多继承C3算法" class="headerlink" title="八、多继承C3算法"></a><strong>八、多继承C3算法</strong></h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"> <span class="hljs-variable">H</span><br><span class="hljs-variable">G</span><span class="hljs-punctuation">(</span><span class="hljs-variable">H</span><span class="hljs-punctuation">)</span><span class="hljs-variable">F</span><span class="hljs-punctuation">(</span><span class="hljs-variable">H</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">E</span><span class="hljs-punctuation">(</span><span class="hljs-variable">G</span><span class="hljs-punctuation">)</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">(</span><span class="hljs-variable">F</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">C</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">)</span><span class="hljs-variable">B</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">A</span><span class="hljs-punctuation">(</span><span class="hljs-variable">BCD</span><span class="hljs-punctuation">)</span><br><br>第一步，先把每一条深度遍历和<span class="hljs-variable">A</span>自己的继承顺序放到一个列表中，所以我们可以得到以下四个列表：<br><span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><br>第二步，每个列表中第一值作为头，其余的值作为尾，如在<span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>中，<span class="hljs-variable">B</span>是头，<span class="hljs-variable">DFH</span>是尾，其余列表同样按照这个规则；<br>第三步，从第一个列表的头开始，如果这个头不在其余任意一个列表的尾中，则把该头单独拿出来放在一个新的列表，并把所有列表中的该字母去掉；如果该头出现在了其他列表的尾中，则跳过该头，取第二个列表的头进行相同操作；最后新列表中的字母顺序即为多继承的查找顺序。<br><br>例：<br>原始的四个列表：<span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><br>划分头尾：<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br>先找<span class="hljs-variable">B</span>，发现<span class="hljs-variable">B</span>在其他列表的尾中没有出现过，把<span class="hljs-variable">B</span>提取出来，并删掉所有列表中的<span class="hljs-variable">B</span>：<span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span>  新列表<span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-punctuation">]</span><br>重新划分头尾：<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span><br>找<span class="hljs-built_in">D</span>，发现<span class="hljs-built_in">D</span>在列表<span class="hljs-punctuation">[</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span>的尾中，所以跳过<span class="hljs-built_in">D</span>，用下一个列表的头<span class="hljs-built_in">C</span>开始匹配，发现<span class="hljs-built_in">C</span>满足条件，把<span class="hljs-built_in">C</span>提取出来，删掉所有列表中的<span class="hljs-built_in">C</span>：<span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span>  新列表<span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-punctuation">]</span><br>重新划分头尾：<span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">]</span><span class="hljs-operator">,</span> <span class="hljs-punctuation">[</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">,</span><span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><br>找<span class="hljs-built_in">D</span>，发现<span class="hljs-built_in">D</span>满足条件，把<span class="hljs-built_in">D</span>提取出来，删掉所有列表中的<span class="hljs-built_in">D</span>：<span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>  <span class="hljs-punctuation">[</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span>     新列表<span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">]</span><br><span class="hljs-operator">......</span><br>最后得到新列表 <span class="hljs-punctuation">[</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span><span class="hljs-variable">H</span><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure><p>使用  <strong>类名.mro()</strong>  方式可以得到广度优先的查询顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-comment"># pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;IN A&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN B&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN C&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN D&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span>(<span class="hljs-title class_ inherited__">C</span>):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN E&#x27;)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>(D,E):<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># def func(self):</span><br>    <span class="hljs-comment">#     print(&#x27;IN F&#x27;)</span><br><br><span class="hljs-built_in">print</span>(F.mro())  <span class="hljs-comment"># [&lt;class &#x27;__main__.F&#x27;&gt;, &lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;__main__.E&#x27;&gt;, &lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br></code></pre></td></tr></table></figure><h3 id="九、抽象类（接口类）"><a href="#九、抽象类（接口类）" class="headerlink" title="九、抽象类（接口类）"></a><strong>九、抽象类（接口类）</strong></h3><p>在我们开发项目时，必须要有归一化设计的思想。比如，要实现一个支付的功能，我们可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用支付宝支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdpay</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用京东支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br>A1 = Alipay(<span class="hljs-number">100</span>)<br>A1.pay()<br>J1 = Jdpay(<span class="hljs-number">100</span>)<br>J1.pay()<br></code></pre></td></tr></table></figure><p>虽然在代码和逻辑上都没有什么问题，但是从使用方式上来说，这两者都是支付的功能，但是需要通过不同的方式取调度，这一点是很不合理的，我们可以进行改良</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用支付宝支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdpay</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用京东支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">obj</span>):<br>    obj.pay()<br><br><br>a1 = Alipay(<span class="hljs-number">200</span>)<br>j1 = Jdpay(<span class="hljs-number">100</span>)<br><br><span class="hljs-comment"># 归一化设计</span><br>pay(a1)<br>pay(j1)<br><br></code></pre></td></tr></table></figure><p>无论通过何种方式进行支付，都只需要调用同一个pay方法即可，这就是最典型的归一化设计的思想。</p><p>然而，当我们的代码交给其他人接着进行开发的时候，其他人由于不熟悉原来的代码架构，可能不按照原来的代码方式进行续写，此时想要归一化功能就会有问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用支付宝支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdpay</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用京东支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><span class="hljs-comment"># 新增代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wechatpay</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wechat_pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用微信支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">obj</span>):<br>    obj.pay()<br><br><br>w1 = Wechatpay(<span class="hljs-number">200</span>)<br>pay(w1)  <span class="hljs-comment"># AttributeError: &#x27;Wechatpay&#x27; object has no attribute &#x27;pay&#x27;</span><br></code></pre></td></tr></table></figure><p>新增代码部分并未参考上面两个类的写法，自己定义了一个方法，倒是想要实现归一化的时候报错。针对上述情况，我们就可以定义一个抽象类（又称接口类），让后续的类都继承该类，并让后续的类都按照该类的格式进行定义，制定了一个规范。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> abstractmethod, ABCMeta<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span>(metaclass=ABCMeta):  <span class="hljs-comment"># 抽象类，接口类</span><br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;使用支付宝支付了%s&#x27;</span> % <span class="hljs-variable language_">self</span>.money)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdpay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-variable language_">self</span>.money = money<br><br>A1 = Alipay(<span class="hljs-number">100</span>)<br>J1 = Jdpay(<span class="hljs-number">200</span>)  <span class="hljs-comment"># TypeError: Can&#x27;t instantiate abstract class Jdpay with abstract methods pay</span><br></code></pre></td></tr></table></figure><p>抽象类中不需要定义方法具体的实现，它的功能就是为子类制定一个必须强制执行的规则。对于抽象类中添加了装饰器的方法来说，子类在定义时，必须要定义该方法，否则报错。这样一来，当别人拿到你的代码后，也可以保证必须按照原来的规则统一编写接口。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是指同一类事物可以有多种形态。</p><p>多态性是指在不考虑实例类型的情况下使用实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reStructuredText">在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息（！！！obj.func():是调用了obj的方法func，又称为向obj发送了一条消息func），不同的对象在接收时会产生不同的行为（即方法）。也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。<br><br>比如：老师.下课铃响了（），学生.下课铃响了()，老师执行的是下班操作，学生执行的是放学操作，虽然二者消息一样，但是执行的效果不同<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">peo = People()<br>dog = Dog()<br>pig = Pig()<br><br><span class="hljs-comment"># peo、dog、pig都是动物,只要是动物肯定有talk方法</span><br><span class="hljs-comment"># 于是我们可以不用考虑它们三者的具体是什么类型,而直接使用</span><br>peo.talk()<br>dog.talk()<br>pig.talk()<br><br><br><span class="hljs-comment"># 更进一步,我们可以定义一个统一的接口来使用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">obj</span>):<br>    obj.talk()<br></code></pre></td></tr></table></figure><p>多态性的好处：</p><p>​    1.增加了程序的灵活性</p><p>　　  <em>以不变应万变，不论对象千变万化，使用者都是同一种形式去调用，如  func(animal)</em></p><p>​    2.增加了程序额可扩展性</p><p>　　  <em>通过继承animal类创建了一个新的类，使用者无需更改自己的代码，还是用  func(animal)  去调用</em></p><p>在python中，其实并没有多态的概念，或者说在python中处处是多态。这是由于python是弱语言决定的。在强语言类型，如 java 中，在声明一个变量时，必须规定其数据类型，即使后面对变量值进行修改，也必须时该数据类型下的。然而在python中，可以随意改变变量的类型和值，且不管什么数据类型，传入函数或者封装到对象中都可以的。</p><h3 id="一、鸭子模型"><a href="#一、鸭子模型" class="headerlink" title="一、鸭子模型"></a><strong>一、鸭子模型</strong></h3><p>Python崇尚鸭子类型，即‘如果看起来像、叫声像而且走起路来像鸭子，那么它就是鸭子’。python程序员通常根据这种行为来编写程序。例如，如果想编写现有对象的自定义版本，可以继承该对象，也可以创建一个外观和行为像，但与它无任何关系的全新对象，后者通常用于保存程序组件的松耦合度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Str</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 字符串类型操作索引相关</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 列表类型操作索引相关</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuple</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rrr</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 元组类型操作索引相关</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>上述例子中，三种类的三种方法均用于操作索引，但是方法名不一样。其实他们的功能类似，我们完全可以把方法名都定义成 index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Str</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 字符串类型操作索引相关</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 列表类型操作索引相关</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuple</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 元组类型操作索引相关</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>这样这些类就互称为鸭子，而我们在操作不同数据类型索引的时候，只需要通过调用 index 方法名就行了，函数会根据自身调用的类的不同去执行不同的方法，即虽然接受的函数名一样，但是执行的效果不同。开发人员就不需要考虑是何种数据类型去执行不同的方法来实现同一种功能，简化了调用方式。（原来要分别执行 Str.index，List.abc，Tuple.rrr，现在统一都是 类名.index）</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>广义的封装：实例化一个对象，给对象空间封装一些属性。</p><p>狭义的封装：私有制。</p><h3 id="一、私有静态字段"><a href="#一、私有静态字段" class="headerlink" title="一、私有静态字段"></a><strong>一、私有静态字段</strong></h3><ul><li>对于私有静态字段,类的外部不能访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    __age = <span class="hljs-number">18</span>  <span class="hljs-comment"># 私有静态字段前加__</span><br><br>a1 = A()<br><br><span class="hljs-built_in">print</span>(A.name)  <span class="hljs-comment"># cdc</span><br><span class="hljs-built_in">print</span>(a1.name)  <span class="hljs-comment"># cdc</span><br> <br><span class="hljs-built_in">print</span>(A.__age)  <span class="hljs-comment"># AttributeError: type object &#x27;A&#x27; has no attribute &#x27;__age&#x27;  类名不能访问私有静态字段</span><br><span class="hljs-built_in">print</span>(a1.__age) <span class="hljs-comment"># AttributeError: &#x27;A&#x27; object has no attribute &#x27;__age&#x27;  实例化对象不能访问私有静态字段</span><br></code></pre></td></tr></table></figure><ul><li>对于私有静态字段，类的内部可以访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    __age = <span class="hljs-number">18</span>  <span class="hljs-comment"># 私有静态字段前加__</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__age)<br>        <span class="hljs-built_in">print</span>(A.__age)<br><br>a1 = A()<br><br>a1.func()  <span class="hljs-comment"># 18</span><br>A.func(a1) <span class="hljs-comment"># 18</span><br></code></pre></td></tr></table></figure><ul><li>对于私有静态字段来说，只能在本类中内部访问，类的外部、派生类均不可访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    __money = <span class="hljs-number">100000</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    name = <span class="hljs-string">&#x27;cdc&#x27;</span><br>    __age = <span class="hljs-number">18</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__money)<br>        <span class="hljs-built_in">print</span>(A.__money)<br><br>a1 = A()<br>a1.func()<br></code></pre></td></tr></table></figure><p>其实私有静态字段在类的外部是可以访问的，这也是python的一个小bug，但是不建议这么去访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    __age = <span class="hljs-number">18</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__age)<br>        <span class="hljs-built_in">print</span>(A.__age)<br><br><span class="hljs-built_in">print</span>(A.__dict__)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;name&#x27;: &#x27;cdc&#x27;, &#x27;_A__age&#x27;: 18, &#x27;func&#x27;: &lt;function A.func at 0x000001E5ED6ED950&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;A&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;A&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>我们通过打印A类的名称空间的内容可以发现，其实当python解释器在读取类的定义代码时，读取到__age，就知道这是要定义一个私有静态字段。为了不让类的外部能够访问到，就会把原来存放到类的名称空间的__age前面多添加一个_类名，即_A__age，所以我们从外部想要调用__age时，就会找不到对应静态字段。这也是为什么从类的内部可以访问私有静态变量的原因了，因为在类的内部，当执行到 print(A.__age) 时，解释器会自动把__age变为_A__age，这样就能匹配上了。</p><p>所以当我们从外部想要调用私有静态变量时，只需要这样调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    __age = <span class="hljs-number">18</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__age)<br>        <span class="hljs-built_in">print</span>(A.__age)<br><br>a1 = A()<br><br><span class="hljs-built_in">print</span>(a1._A__age) <span class="hljs-comment"># 18</span><br><span class="hljs-built_in">print</span>(A._A__age)  <span class="hljs-comment"># 18</span><br></code></pre></td></tr></table></figure><p>但是记住千万不要这么干，千万不要，不要！</p><h3 id="二、私有方法"><a href="#二、私有方法" class="headerlink" title="二、私有方法"></a><strong>二、私有方法</strong></h3><ul><li>类外部不能访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&#x27;alex&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func....&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.__func()   <br>    <br>a1 = A()<br>a1.__func()  <span class="hljs-comment"># 类外部不能访问</span><br></code></pre></td></tr></table></figure><ul><li>类内部可以访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    name = <span class="hljs-string">&#x27;alex&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func....&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.__func()   <span class="hljs-comment"># 类的内部可以</span><br>a1 = A()<br>a1.func1()  <span class="hljs-comment"># 类的内部可以访问</span><br></code></pre></td></tr></table></figure><ul><li>派生类不能访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    __money = <span class="hljs-number">100000</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__f1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    name = <span class="hljs-string">&#x27;alex&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func....&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.__f1()<br>        <br>a1 = A()<br>a1.func1()  <span class="hljs-comment"># 类的派生类也不能访问.</span><br></code></pre></td></tr></table></figure><h3 id="三、私有对象属性"><a href="#三、私有对象属性" class="headerlink" title="三、私有对象属性"></a><strong>三、私有对象属性</strong></h3><ul><li>类外部不能访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, weight</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br>        <span class="hljs-variable language_">self</span>.__weight = weight<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__age)<br><br>a1 = A(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>)<br><span class="hljs-built_in">print</span>(a1.__age)<br></code></pre></td></tr></table></figure><ul><li>类内部可以访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, weight</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br>        <span class="hljs-variable language_">self</span>.__weight = weight<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__age)<br><br>a1 = A(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>)<br>a1.func()<br></code></pre></td></tr></table></figure><ul><li>派生类不能访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, weight</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.__age = age<br>        <span class="hljs-variable language_">self</span>.__weight = weight<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__age)<br>        <br>a1 = A(<span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>)<br>a1.func()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 面向对象</title>
    <link href="/2019/05/03/0011-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E8%AF%86/"/>
    <url>/2019/05/03/0011-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><h3 id="一、面向过程"><a href="#一、面向过程" class="headerlink" title="一、面向过程"></a><strong>一、面向过程</strong></h3><p>​核心点在过程二字，过程指的是解决问题的步骤，说白了就是先做什么再干什么。这种解决问题的思路就好比是工厂中的流水线。shell脚本就是典型的面向过程，按步骤做事。</p><ul><li><p>优点：复杂的问题流程化，进而简单化。</p></li><li><p>缺点：可扩展性差，比如，一个脚本就是干一件事情的。</p></li></ul><h3 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a><strong>二、面向对象</strong></h3><p>​核心点是对象二字，对象指的是具有相同属性和动作的结合体叫对象。面向对象编程就好比在代码中创造一个世界，创造若干对象，就像现实世界中的万物一样，每个物体都可以有自己的属性和动作。</p><ul><li><p>优点：可扩展性强</p></li><li><p>缺点：编程的复杂度高于面向过程</p></li></ul><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>​类是指具有相同属性和技能的一类事物，对象是指具体的类的表现，具体的实实在在的一个实例。比如动物时一个类，狗就是动物类的一个实例化对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 实例化一个对象</span><br>dog = Animal()<br></code></pre></td></tr></table></figure><p>​类体一共有两个部分，定义在类中变量叫做静态变量（又称变量或者静态字段），定义在类中的方法叫做动态变量（又称方法或者函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 静态变量，又叫变量或静态字段</span><br>    animal = <span class="hljs-string">&quot;高级动物&quot;</span><br>    soul = <span class="hljs-string">&quot;有灵魂&quot;</span><br>    language = <span class="hljs-string">&quot;有语言&quot;</span><br><br>    <span class="hljs-comment"># 动态变量，又叫方法或者函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人类可以工作...&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人类可以购物...&quot;</span>)<br><br>p1 = Person()  <span class="hljs-comment"># 实例化一个对象</span><br></code></pre></td></tr></table></figure><h2 id="从类名的角度操作类中的内容"><a href="#从类名的角度操作类中的内容" class="headerlink" title="从类名的角度操作类中的内容"></a>从类名的角度操作类中的内容</h2><h3 id="一、操作类中的静态变量"><a href="#一、操作类中的静态变量" class="headerlink" title="一、操作类中的静态变量"></a><strong>一、操作类中的静态变量</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 静态变量，又叫变量或静态字段</span><br>    animal = <span class="hljs-string">&quot;高级动物&quot;</span><br>    soul = <span class="hljs-string">&quot;有灵魂&quot;</span><br>    language = <span class="hljs-string">&quot;有语言&quot;</span><br><br>    <span class="hljs-comment"># 动态变量，又叫方法或者函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人类可以工作...&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人类可以购物...&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>通过__dict__来查看类中所有的内容，但是只能进行查询，不能对类中的内容进行增删改的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(Person.__dict__)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取到的内容是一个字典</span><br><span class="hljs-string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;animal&#x27;: &#x27;高级动物&#x27;, &#x27;soul&#x27;: &#x27;有灵魂&#x27;, &#x27;language&#x27;: &#x27;有语言&#x27;, &#x27;work&#x27;: &lt;function Person.work at 0x000001A89C34D8C8&gt;, &#x27;shop&#x27;: &lt;function Person.shop at 0x000001A89C34D9D8&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Person&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Person&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 获取具体的值</span><br><span class="hljs-built_in">print</span>(Person.__dict__[<span class="hljs-string">&quot;soul&quot;</span>])  <span class="hljs-comment"># 有灵魂</span><br><br><span class="hljs-comment"># 尝试修改值</span><br>Person.__dict__[<span class="hljs-string">&#x27;soul&#x27;</span>] = <span class="hljs-string">&#x27;行尸走肉&#x27;</span>  <span class="hljs-comment"># TypeError: &#x27;mappingproxy&#x27; object does not support item assignment</span><br></code></pre></td></tr></table></figure><ul><li>通过 <code>.</code> 号来操作类中的静态变量，可以进行增删改查</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(Person.soul)  <span class="hljs-comment"># 查</span><br>Person.mind = <span class="hljs-string">&quot;有思想&quot;</span>  <span class="hljs-comment"># 增</span><br>Person.soul = <span class="hljs-string">&quot;行尸走肉&quot;</span>  <span class="hljs-comment"># 改</span><br><span class="hljs-keyword">del</span> Person.animal  <span class="hljs-comment"># 删</span><br><br><span class="hljs-built_in">print</span>(Person.__dict__)<br></code></pre></td></tr></table></figure><h3 id="二、操作类中的方法"><a href="#二、操作类中的方法" class="headerlink" title="二、操作类中的方法"></a><strong>二、操作类中的方法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 除了静态方法和类方法，一般不用类名去操作类中的方法</span><br><span class="hljs-comment"># Person.work()  # 必须任意传一个参数</span><br>Person.work(<span class="hljs-number">111</span>)<br></code></pre></td></tr></table></figure><h2 id="从对象角度来操作类中的内容"><a href="#从对象角度来操作类中的内容" class="headerlink" title="从对象角度来操作类中的内容"></a>从对象角度来操作类中的内容</h2><p> 在类中，名为__init__的函数称为类的初始化方法，在实例化一个对象时，实际上进行了以下操作：</p><ol><li>创建了一个对象空间（实例空间）</li><li>自动执行类中的__init__方法，并将对象空间传给self参数</li><li>执行具体的__init__代码，给对象空间封装属性。</li><li>对象空间将空间指针返回给调用者，即自己定义的对象名。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 静态变量，又叫变量或静态字段</span><br>    animal = <span class="hljs-string">&quot;高级动物&quot;</span><br>    soul = <span class="hljs-string">&quot;有灵魂&quot;</span><br>    language = <span class="hljs-string">&quot;有语言&quot;</span><br><br>    <span class="hljs-comment"># 构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, sex</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)  <span class="hljs-comment"># &lt;__main__.Person object at 0x000001FF4D7CCD68&gt;</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>        <span class="hljs-variable language_">self</span>.sex = sex<br><br>    <span class="hljs-comment"># 动态变量，又叫方法或者函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人类可以工作...&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;人类可以购物...&quot;</span>)<br>        <br>p1 = Person(<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;male&quot;</span>)  <span class="hljs-comment"># 类名+()：实例化一个对象</span><br><span class="hljs-built_in">print</span>(p1) <span class="hljs-comment"># &lt;__main__.Person object at 0x000001FF4D7CCD68&gt;</span><br><br><span class="hljs-comment"># self的空间地址和实例化对象的空间地址一样，简单来说，self就是实例化出来的对象</span><br></code></pre></td></tr></table></figure><h3 id="一、操作对象中的静态变量"><a href="#一、操作对象中的静态变量" class="headerlink" title="一、操作对象中的静态变量"></a><strong>一、操作对象中的静态变量</strong></h3><ul><li>通过__dict__来查看对象中所有的内容，但是只能进行查询，不能对对象中的内容进行增删改的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(p1.__dict__)<br><span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;cdc&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>通过 <code>.</code> 号来操作对象中的静态变量，可以进行增删改查；通过 . 号来操作类中的静态变量时，只能查询，不能进行其他操作。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(p1.name)  <span class="hljs-comment"># 查</span><br>p1.high = <span class="hljs-number">175</span>  <span class="hljs-comment"># 增</span><br><span class="hljs-keyword">del</span> p1.name  <span class="hljs-comment"># 删</span><br>p1.age = <span class="hljs-number">73</span> <span class="hljs-comment"># 改</span><br><span class="hljs-built_in">print</span>(p1.__dict__)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p1.language = <span class="hljs-string">&quot;说汉语&quot;</span><br><span class="hljs-comment"># 这一步操作只能给对象增加一个language属性，而无法修改类中的静态变量language</span><br></code></pre></td></tr></table></figure><h3 id="二、操作对象的方法"><a href="#二、操作对象的方法" class="headerlink" title="二、操作对象的方法"></a><strong>二、操作对象的方法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不需要额外传参数，调用方法时，对象会将自己的空间地址传给方法中的self</span><br>p1.work()<br>p1.shop()<br></code></pre></td></tr></table></figure><h2 id="类的名称空间和查询顺序"><a href="#类的名称空间和查询顺序" class="headerlink" title="类的名称空间和查询顺序"></a>类的名称空间和查询顺序</h2><p>在定义一个类，到实例化一个对象，再到调用对象相关的静态变量或方法这个过程中，实际上经历了以下过程：</p><img src="/img/blog/about_python/类的调用.png" style="zoom: 67%;" />  <p>第一步，python解释器从上往下读取类的定义代码，读取完后会在内存中开辟一个存储类的名称空间；</p><p>第二部，执行实例化对象代码，会产生一个含有对象指针的名称空间，自动执行类中的__init__方法，并将对象空间传给self参数；</p><p>第三步，将实例化对象时传入的参数传给类中的构造函数；</p><p>第四步，执行具体的构造函数代码，给对象空间封装属性。</p><p>第五步，执行 print(p1.animal) 时，会先在对象的名称空间内进行查找 animal 属性，查找不到，再从类空间找，再找不到，再从父类找….</p><p>注意：</p><ul><li>直接从类中查找属性时，先从本类空间找，如果找不到，再从父类找……</li><li>查找属性时可以从对象空间查找到类空间，但是不能从类空间往对象空间查找；</li><li>对象之间相互独立，对象空间之间相互对立。</li></ul><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>​有这么一个需求，创建两个游戏角色，角色有名字、攻击力、生命值三个属性，角色可以互相攻击，此方法要完成谁攻击谁,谁掉了多少血,  还剩多少血’的提示功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, ad, hp</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.ad = ad<br>        <span class="hljs-variable language_">self</span>.hp = hp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, obj</span>):<br>        obj.hp = obj.hp - <span class="hljs-variable language_">self</span>.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span>攻击了<span class="hljs-subst">&#123;obj.name&#125;</span>，<span class="hljs-subst">&#123;obj.name&#125;</span>掉了<span class="hljs-subst">&#123;self.ad&#125;</span>血，还剩<span class="hljs-subst">&#123;obj.hp&#125;</span>血&quot;</span>)<br><br><br>p1 = GameRole(<span class="hljs-string">&quot;那鲁多&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>p2 = GameRole(<span class="hljs-string">&quot;萨斯给&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">80</span>)<br><br>p1.attack(p2)<br></code></pre></td></tr></table></figure><p>现在版本升级，角色可以使用武器，最后提示谁使用了哪种武器攻击了谁，谁掉了多少血还剩多少血</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, ad, hp</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.ad = ad<br>        <span class="hljs-variable language_">self</span>.hp = hp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, obj</span>):<br>        obj.hp = obj.hp - <span class="hljs-variable language_">self</span>.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span>攻击了<span class="hljs-subst">&#123;obj.name&#125;</span>，<span class="hljs-subst">&#123;obj.name&#125;</span>掉了<span class="hljs-subst">&#123;self.ad&#125;</span>血，还剩<span class="hljs-subst">&#123;obj.hp&#125;</span>血&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, ad</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.ad = ad<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fight</span>(<span class="hljs-params">self, obj1, obj2</span>):<br>        obj2.hp = obj2.hp - <span class="hljs-variable language_">self</span>.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;obj1.name&#125;</span>使用了<span class="hljs-subst">&#123;self.name&#125;</span>攻击了<span class="hljs-subst">&#123;obj2.name&#125;</span>，<span class="hljs-subst">&#123;obj2.name&#125;</span>掉了<span class="hljs-subst">&#123;self.ad&#125;</span>血还剩<span class="hljs-subst">&#123;obj2.hp&#125;</span>血&quot;</span>)<br><br><br>p1 = GameRole(<span class="hljs-string">&quot;那鲁多&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>p2 = GameRole(<span class="hljs-string">&quot;萨斯给&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">80</span>)<br><br>w1 = Weapon(<span class="hljs-string">&quot;苦无&quot;</span>, <span class="hljs-number">20</span>)<br>w2 = Weapon(<span class="hljs-string">&quot;手里剑&quot;</span>, <span class="hljs-number">10</span>)<br><br>w1.fight(p1, p2)<br></code></pre></td></tr></table></figure><p>​虽然功能实现了，但是这样实现不合理，人物利用武器攻击别人，你的动作发起者是人，而不是武器。所以对于这种情况，可以用组合来解决。</p><p>组合：给一个类的对象封装一个属性，这个属性是另一个类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, ad, hp</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.ad = ad<br>        <span class="hljs-variable language_">self</span>.hp = hp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, obj</span>):<br>        obj.hp = obj.hp - <span class="hljs-variable language_">self</span>.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.name&#125;</span>攻击了<span class="hljs-subst">&#123;obj.name&#125;</span>，<span class="hljs-subst">&#123;obj.name&#125;</span>掉了<span class="hljs-subst">&#123;self.ad&#125;</span>血，还剩<span class="hljs-subst">&#123;obj.hp&#125;</span>血&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">armament_weapon</span>(<span class="hljs-params">self, weapon</span>):<br>        <span class="hljs-variable language_">self</span>.weapon = weapon<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, ad</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.ad = ad<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fight</span>(<span class="hljs-params">self, obj1, obj2</span>):<br>        obj2.hp = obj2.hp - <span class="hljs-variable language_">self</span>.ad<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;obj1.name&#125;</span>使用了<span class="hljs-subst">&#123;self.name&#125;</span>攻击了<span class="hljs-subst">&#123;obj2.name&#125;</span>，<span class="hljs-subst">&#123;obj2.name&#125;</span>掉了<span class="hljs-subst">&#123;self.ad&#125;</span>血还剩<span class="hljs-subst">&#123;obj2.hp&#125;</span>血&quot;</span>)<br><br><br>p1 = GameRole(<span class="hljs-string">&quot;那鲁多&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>p2 = GameRole(<span class="hljs-string">&quot;萨斯给&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">80</span>)<br><br>w1 = Weapon(<span class="hljs-string">&quot;苦无&quot;</span>, <span class="hljs-number">20</span>)<br>w2 = Weapon(<span class="hljs-string">&quot;手里剑&quot;</span>, <span class="hljs-number">10</span>)<br><br>p1.armament_weapon(w1) <span class="hljs-comment"># 给那鲁多装备了苦无这个对象</span><br><span class="hljs-comment"># print(p1.weapon)</span><br><span class="hljs-comment"># print(p1.weapon.name)</span><br><span class="hljs-comment"># print(p1.weapon.ad)</span><br>p1.weapon.fight(p1, p2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 内置函数</title>
    <link href="/2019/05/01/0010-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <url>/2019/05/01/0010-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="常用内置函数概览"><a href="#常用内置函数概览" class="headerlink" title="常用内置函数概览"></a>常用内置函数概览</h2><p><a href="https://www.processon.com/mindmap/5e2ea3e6e4b0d27af181882c">https://www.processon.com/mindmap/5e2ea3e6e4b0d27af181882c</a></p><img src="/img/blog/about_python/内置函数.png" style="zoom:80%;" /> <h2 id="作用域相关"><a href="#作用域相关" class="headerlink" title="作用域相关"></a>作用域相关</h2><h3 id="locals-和-globals"><a href="#locals-和-globals" class="headerlink" title="locals 和 globals"></a><strong>locals 和 globals</strong></h3><ul><li><strong>locals</strong>：函数会以字典的类型返回当前位置的全部的局部变量</li><li><strong>globals</strong>：函数会以字典的类型返回全部的全局变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():    <br>a = <span class="hljs-number">40</span>    <br>b = <span class="hljs-number">20</span>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>():        <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈&quot;</span>)    <br><span class="hljs-built_in">print</span>(a, b)     <span class="hljs-comment"># 这里使用的是局部作用域    </span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())    <span class="hljs-comment"># 打印全局作⽤用域中的内容    </span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())     <span class="hljs-comment"># 打印当前局部作⽤用域中的内容，即打印func中的局部命名空间</span><br><br>func()<br><br><span class="hljs-comment"># 输出的结果是一样的，因为locals()是查看当前的局部命名空间，而此时locals函数的位置就处在全局中，因此查看的也是全局</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())   <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())    <br></code></pre></td></tr></table></figure><h2 id="迭代器-生成器相关"><a href="#迭代器-生成器相关" class="headerlink" title="迭代器&#x2F;生成器相关"></a>迭代器&#x2F;生成器相关</h2><h3 id="一、range"><a href="#一、range" class="headerlink" title="一、range"></a><strong>一、range</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 结果：0 1 2 3 4</span><br><br><br><span class="hljs-comment"># 间隔取值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 每隔3个不长取一次值：0 3 6 9</span><br><br><span class="hljs-comment"># 倒序取值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 从10到0倒序，每隔三个步长取值一次：10 7 4 1</span><br></code></pre></td></tr></table></figure><h3 id="二、iter"><a href="#二、iter" class="headerlink" title="二、iter"></a><strong>二、iter</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>]<br><span class="hljs-comment"># it = lst.__iter__()  # 拿到列表的迭代器对象</span><br>it = <span class="hljs-built_in">iter</span>(lst) <span class="hljs-comment"># 等价于 lst.__iter__()</span><br><br><span class="hljs-built_in">print</span>(it.__next__())<br><span class="hljs-built_in">print</span>(it.__next__())<br><span class="hljs-built_in">print</span>(it.__next__())<br><span class="hljs-built_in">print</span>(it.__next__())<br></code></pre></td></tr></table></figure><h3 id="三、next"><a href="#三、next" class="headerlink" title="三、next"></a><strong>三、next</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>]<br>it = lst.__iter__()  <span class="hljs-comment"># 拿到列表的迭代器对象</span><br><span class="hljs-built_in">print</span>(it.__next__())<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))  <span class="hljs-comment"># 等价于 it.__next__()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(it))<br></code></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="一、print"><a href="#一、print" class="headerlink" title="一、print"></a><strong>一、print</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出相关内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>)<br><br><span class="hljs-comment"># 修改字符串输出的连接符，默认是一个空格</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>)  <span class="hljs-comment"># aaa bbb ccc</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, sep=<span class="hljs-string">&quot;_&quot;</span>)  <span class="hljs-comment"># aaa_bbb_ccc</span><br><br><span class="hljs-comment"># 修改字符串输出的结尾符，默认是换行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, end=<span class="hljs-string">&quot;*****&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ddd&quot;</span>)<br><span class="hljs-comment"># aaa bbb ccc*****ddd</span><br></code></pre></td></tr></table></figure><h3 id="二、input"><a href="#二、input" class="headerlink" title="二、input"></a><strong>二、input</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input 用于接收用户在终端输入的内容。默认输入的内容都是字符串</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;姓名：&quot;</span>)<br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><h2 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h2><h3 id="一、id"><a href="#一、id" class="headerlink" title="一、id"></a><strong>一、id</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># id 用于获取变量在内存中的地址</span><br>a = <span class="hljs-number">1111</span><br>b = <span class="hljs-string">&quot;aaaaa&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))  <span class="hljs-comment"># 2025378406128</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b))  <span class="hljs-comment"># 2025378538192</span><br></code></pre></td></tr></table></figure><h3 id="二、hash"><a href="#二、hash" class="headerlink" title="二、hash"></a><strong>二、hash</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将一个变量通过hash算法进行计算得到唯一一个编号，并存到响应的内存中；当下一次再遇到该变量时，在对其进行一次hash计算，可以通过直接计算的值取到对应的内容，有点类似于字典的原理</span><br><span class="hljs-comment"># hash的目的就是唯一性</span><br><span class="hljs-comment"># hash表是牺牲空间来换取时间</span><br><span class="hljs-comment"># 字典的键就要求是hash结构，因此字典的查找效率最高</span><br><span class="hljs-comment"># 只有不可变类型才能进行hash计算</span><br><br>tup = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(tup))<br><br>s = <span class="hljs-string">&quot;呵呵&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(s))<br><br>n = <span class="hljs-number">111</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(n))<br><br><span class="hljs-comment"># 字典、列表、集合等可变对象无法进行hash计算</span><br>dct = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;aaa&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(dct))<br><br>lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(lst))<br><br>st = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(st))<br></code></pre></td></tr></table></figure><h2 id="模块相关"><a href="#模块相关" class="headerlink" title="模块相关"></a>模块相关</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 让用户输入要调用的模块</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;要调用的模块&quot;</span>)<br><br><span class="hljs-comment"># import name # 报错，找不到name模块</span><br><span class="hljs-built_in">__import__</span>(name) <span class="hljs-comment"># 这样就可以正常执行模块的调用</span><br></code></pre></td></tr></table></figure><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(a))  <span class="hljs-comment"># 二进制  0b1010</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a))  <span class="hljs-comment"># 十六进制  0xa</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">oct</span>(a))  <span class="hljs-comment"># 八进制  0o12</span><br></code></pre></td></tr></table></figure><h2 id="调用相关"><a href="#调用相关" class="headerlink" title="调用相关"></a>调用相关</h2><h3 id="callable"><a href="#callable" class="headerlink" title="callable"></a><strong>callable</strong></h3><p>用于判断变量是否可调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(a))  <span class="hljs-comment"># False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaa&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">callable</span>(func))  <span class="hljs-comment"># True</span><br><br></code></pre></td></tr></table></figure><h2 id="字符串类型代码的执行"><a href="#字符串类型代码的执行" class="headerlink" title="字符串类型代码的执行"></a>字符串类型代码的执行</h2><h3 id="一、eval"><a href="#一、eval" class="headerlink" title="一、eval"></a><strong>一、eval</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># eval 用于执行字符串类型的代码，可用于简单的运算，并返回最终的结果，但是对于比较复杂的字符类型代码无法执行</span><br>s = <span class="hljs-string">&quot;3+5+9&quot;</span><br><span class="hljs-built_in">print</span>(s)  <span class="hljs-comment"># 3+5+9</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(s))  <span class="hljs-comment"># 会将字符串转换为代码并执行  17</span><br></code></pre></td></tr></table></figure><h3 id="二、exec"><a href="#二、exec" class="headerlink" title="二、exec"></a><strong>二、exec</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># exec 用于执行较为复杂的字符类型代码，无结果返回</span><br>code = <span class="hljs-string">&quot;for i in range(0,10):print(i)&quot;</span><br><span class="hljs-built_in">exec</span>(code)<br><span class="hljs-comment"># 0 1 2 3 4 5 6 7 8 9</span><br><br><span class="hljs-built_in">exec</span>(<span class="hljs-string">&quot;&quot;&quot;def func():print(&quot;我是cdc&quot;)&quot;&quot;&quot;</span>)<br>func() <span class="hljs-comment"># 可直接调用定义在字符串中的函数名</span><br></code></pre></td></tr></table></figure><h3 id="三、compile"><a href="#三、compile" class="headerlink" title="三、compile"></a><strong>三、compile</strong></h3><p>代码的执行过程：python解释器将代码编译成字节码   –&gt;  字节码传到操作系统中进行识别  –&gt;  操作系统调动相关的硬件进行功能的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># compile 将字符串类型的代码编译，代码对象能够通过exec语句来执行或者eval进行求值 </span><br><span class="hljs-string">&#x27;&#x27;&#x27;参数说明 :        </span><br><span class="hljs-string">1. resource 要执行的代码，动态代码片段</span><br><span class="hljs-string">    2. 文件名    代码存放的文件名，当传⼊了第⼀个参数的时候，这个参数给空就可以了        </span><br><span class="hljs-string">    3. 模式，取值有 3 个：</span><br><span class="hljs-string">    3.1 exec: 一般放⼀些流程语句的时候            </span><br><span class="hljs-string">    3.2 eval: resource 只存放一个求值表达式</span><br><span class="hljs-string">    3.3 single: resource 存放的代码有交互的时候mode应为single </span><br><span class="hljs-string">  &#x27;&#x27;&#x27;</span> <br>  <br>code1 = <span class="hljs-string">&quot;for i in range(10): print(i)&quot;</span> <br>c1 = <span class="hljs-built_in">compile</span>(code1, <span class="hljs-string">&quot;&quot;</span>, mode=<span class="hljs-string">&quot;exec&quot;</span>) <br><span class="hljs-built_in">exec</span>(c1) <br> <br>code2 = <span class="hljs-string">&quot;1+2+3&quot;</span> <br>c2 = <span class="hljs-built_in">compile</span>(code2, <span class="hljs-string">&quot;&quot;</span>, mode=<span class="hljs-string">&quot;eval&quot;</span>) <br>a = <span class="hljs-built_in">eval</span>(c2)<br><span class="hljs-built_in">print</span>(a) <br><br>code3 = <span class="hljs-string">&quot;name = input(&#x27;请输⼊入你的名字:&#x27;)&quot;</span> <br>c3 = <span class="hljs-built_in">compile</span>(code3, <span class="hljs-string">&quot;&quot;</span>, mode=<span class="hljs-string">&quot;single&quot;</span>) <br><span class="hljs-built_in">exec</span>(c3) <br><span class="hljs-built_in">print</span>(name)  <span class="hljs-comment"># 可直接调用在字符代码中定义的变量</span><br></code></pre></td></tr></table></figure><p>使用compile的好处：</p><ul><li>可以防止源码泄露，编译后都是字节码，只有操作系统可以识别</li><li>加快运行速度。不用读一行解释一行再编译一行，可将代码先全部编译成字节码，后期可直接运行（python 的 pypy 解释器就是这个原理）</li></ul><h2 id="数学运算相关"><a href="#数学运算相关" class="headerlink" title="数学运算相关"></a>数学运算相关</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求绝对值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(-<span class="hljs-number">2</span>))  <span class="hljs-comment"># 2</span><br><br><span class="hljs-comment"># 求商和余数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">divmod</span>(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># (3, 1) 3为商，1为余数</span><br><br><span class="hljs-comment"># 求和</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># 15</span><br><br><span class="hljs-comment"># 求最大</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># 5</span><br><br><span class="hljs-comment"># 求最小</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># 求幂，若有三个参数，先将前两个进行幂运算，再将计算结果与第三个值取余</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 先得100，再与3取余，结果为1</span><br><br><span class="hljs-comment"># 四舍五入，注意当小数为0.5时，取最接近的偶数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">4.5</span>))  <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">4.6</span>))  <span class="hljs-comment"># 5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">5.5</span>))  <span class="hljs-comment"># 6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">5.6</span>))  <span class="hljs-comment"># 6</span><br></code></pre></td></tr></table></figure><h2 id="序列相关"><a href="#序列相关" class="headerlink" title="序列相关"></a>序列相关</h2><h3 id="一、reversed"><a href="#一、reversed" class="headerlink" title="一、reversed"></a><strong>一、reversed</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;cc&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">reversed</span>(lst))  <span class="hljs-comment"># 返回的是一个迭代器，不会改变原列表</span><br><span class="hljs-built_in">print</span>(lst)<br>new_lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(lst))<br><span class="hljs-built_in">print</span>(new_lst)  <span class="hljs-comment">#  [&#x27;cc&#x27;, 21, 1, &#x27;aa&#x27;]</span><br><br><br>s = <span class="hljs-string">&quot;abcdefg&quot;</span><br>new_a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">reversed</span>(s))<br><span class="hljs-built_in">print</span>(new_a)  <span class="hljs-comment"># [&#x27;g&#x27;, &#x27;f&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="二、slice"><a href="#二、slice" class="headerlink" title="二、slice"></a><strong>二、slice</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])<br><br>s = <span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 三个参数：起始位置  结束位置  切片步长，默认为1</span><br><span class="hljs-built_in">print</span>(lst[s])<br></code></pre></td></tr></table></figure><h2 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h2><h3 id="一、format"><a href="#一、format" class="headerlink" title="一、format"></a><strong>一、format</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串</span><br>s = <span class="hljs-string">&quot;我叫cdc&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(s, <span class="hljs-string">&quot;^20&quot;</span>))  <span class="hljs-comment"># 设置居中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(s, <span class="hljs-string">&quot;&lt;20&quot;</span>))  <span class="hljs-comment"># 设置左对齐</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(s, <span class="hljs-string">&quot;&gt;20&quot;</span>))  <span class="hljs-comment"># 设置右对齐</span><br><br><span class="hljs-comment"># 数值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>))  <span class="hljs-comment"># 二进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">97</span>, <span class="hljs-string">&#x27;c&#x27;</span>))  <span class="hljs-comment"># 转换成unicode字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;d&#x27;</span>))  <span class="hljs-comment"># 十进制 %d</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;o&#x27;</span>))  <span class="hljs-comment"># 八进制  8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;x&#x27;</span>))  <span class="hljs-comment"># 十六进制(⼩写字⺟)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;X&#x27;</span>))  <span class="hljs-comment"># 十六进制(⼤写字⺟)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;n&#x27;</span>))  <span class="hljs-comment"># 十进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">11</span>))  <span class="hljs-comment"># 十进制</span><br><br><span class="hljs-comment"># 浮点数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">123456789</span>, <span class="hljs-string">&#x27;e&#x27;</span>))  <span class="hljs-comment"># 科学计数法. 默认保留6位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">123456789</span>, <span class="hljs-string">&#x27;0.2e&#x27;</span>))  <span class="hljs-comment"># 科学计数法. 保留2位小数(小写)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">123456789</span>, <span class="hljs-string">&#x27;0.2E&#x27;</span>))  <span class="hljs-comment"># 科学计数法. 保留2位小数(大写)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">1.23456789</span>, <span class="hljs-string">&#x27;f&#x27;</span>))  <span class="hljs-comment"># 小数点计数法. 保留6位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">1.23456789</span>, <span class="hljs-string">&#x27;0.2f&#x27;</span>))  <span class="hljs-comment"># 小数点计数法. 保留2位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">1.23456789</span>, <span class="hljs-string">&#x27;0.10f&#x27;</span>))  <span class="hljs-comment"># 小数点计数法. 保留10位小数，位数不够就补0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">1.23456789e+3</span>, <span class="hljs-string">&#x27;F&#x27;</span>))  <span class="hljs-comment"># 小数点计数法. 很大的时候输出 INF 表示无限大</span><br></code></pre></td></tr></table></figure><h3 id="二、bytes-和-bytearry"><a href="#二、bytes-和-bytearry" class="headerlink" title="二、bytes 和 bytearry"></a><strong>二、bytes 和 bytearry</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;你好啊&quot;</span><br>a = s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>bs = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;你好啊&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(bs.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>ret = <span class="hljs-built_in">bytearray</span>(<span class="hljs-string">&quot;cdc&quot;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 得到的是一个数组，一位就是一个元素</span><br><span class="hljs-built_in">print</span>(ret[<span class="hljs-number">0</span>])<br>ret[<span class="hljs-number">0</span>] = <span class="hljs-number">65</span>  <span class="hljs-comment"># 修改第一位元素的值，变为大写的A</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(ret))<br><br>s = <span class="hljs-built_in">memoryview</span>(<span class="hljs-string">&quot;cdc&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))  <span class="hljs-comment"># 查看内存</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="三、ord-chr-ascii"><a href="#三、ord-chr-ascii" class="headerlink" title="三、ord  chr  ascii"></a><strong>三、ord  chr  ascii</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))  <span class="hljs-comment"># 97, 返回字母a在编码表中的码位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;中&#x27;</span>))  <span class="hljs-comment"># 20013 中国的中字在编码表中的位置</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">65</span>))  <span class="hljs-comment"># 已知码位. 计算字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">20018</span>))<br><br><span class="hljs-comment"># 查看字符是否在ascii码中，在则返回本身，不在返回\u...</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ascii</span>(<span class="hljs-string">&quot;a&quot;</span>))  <span class="hljs-comment"># &#x27;a&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ascii</span>(<span class="hljs-string">&quot;房&quot;</span>))  <span class="hljs-comment"># &#x27;\u623f&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="四、repr"><a href="#四、repr" class="headerlink" title="四、repr"></a><strong>四、repr</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;你好. \n我是cdc&quot;</span><br><span class="hljs-built_in">print</span>(name) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">你好. </span><br><span class="hljs-string">我是cdc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 原样输出,过滤掉转义字符 \n \t \r</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(name))   <span class="hljs-comment"># &#x27;你好. \n我是cdc&#x27;</span><br><br><span class="hljs-comment"># 过滤不掉百分号</span><br>name2 = <span class="hljs-string">&quot;你好. \n我叫%s&quot;</span> % <span class="hljs-string">&quot;cdc&quot;</span><br><span class="hljs-built_in">print</span>(name2)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">你好. </span><br><span class="hljs-string">我叫cdc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(name2))  <span class="hljs-comment"># &#x27;你好. \n我叫cdc&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="其余内置方法"><a href="#其余内置方法" class="headerlink" title="其余内置方法"></a>其余内置方法</h2><h3 id="一、enumerate-枚举"><a href="#一、enumerate-枚举" class="headerlink" title="一、enumerate  枚举"></a><strong>一、enumerate  枚举</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;蛋1&quot;</span>, <span class="hljs-string">&quot;蛋2&quot;</span>, <span class="hljs-string">&quot;蛋3&quot;</span>, <span class="hljs-string">&quot;蛋4&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lst)):<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-built_in">print</span>(lst[i])<br><br><span class="hljs-keyword">for</span> index, el <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(lst, <span class="hljs-number">100</span>):    <span class="hljs-comment"># 把索引和元素一起获取,索引默认从0开始. 可以更改</span><br>    <span class="hljs-built_in">print</span>(index)<br>    <span class="hljs-built_in">print</span>(el)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">100</span><br><span class="hljs-string">蛋1</span><br><span class="hljs-string">101</span><br><span class="hljs-string">蛋2</span><br><span class="hljs-string">102</span><br><span class="hljs-string">蛋3</span><br><span class="hljs-string">103</span><br><span class="hljs-string">蛋4</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、all-any"><a href="#二、all-any" class="headerlink" title="二、all   any"></a><strong>二、all   any</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># all 对于一个可迭代对象，当所有元素都为True，最后结果就为True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">all</span>([<span class="hljs-number">1</span>, <span class="hljs-string">&quot;哈哈&quot;</span>, <span class="hljs-string">&quot;馒头&quot;</span>, <span class="hljs-literal">True</span>]))  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># any 对于一个可迭代对象，只要有一个元素为True，最后结果就为True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-number">0</span>, <span class="hljs-string">&quot;哈哈&quot;</span>, <span class="hljs-string">&quot;馒头&quot;</span>, <span class="hljs-literal">True</span>]))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="三、zip"><a href="#三、zip" class="headerlink" title="三、zip"></a><strong>三、zip</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的新列表。如果各个迭代器的元素个数不一致, 则返回列表长度与最短的对象相同。 </span><br><br>lst1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]<br>lst2 = [<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>]<br>lst3 = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>, <span class="hljs-string">&quot;eee&quot;</span>]<br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(lst1, lst2, lst3):<br>    <span class="hljs-built_in">print</span>(el)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">(&#x27;a&#x27;, &#x27;aa&#x27;, &#x27;aaa&#x27;)</span><br><span class="hljs-string">(&#x27;b&#x27;, &#x27;bb&#x27;, &#x27;bbb&#x27;)</span><br><span class="hljs-string">(&#x27;c&#x27;, &#x27;cc&#x27;, &#x27;ccc&#x27;)</span><br><span class="hljs-string">(&#x27;d&#x27;, &#x27;dd&#x27;, &#x27;ddd&#x27;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="四、sorted"><a href="#四、sorted" class="headerlink" title="四、sorted"></a><strong>四、sorted</strong></h3><p><strong>语法</strong>：sorted(Iterable, key&#x3D;None, reverse&#x3D;False)        </p><p><strong>参数</strong>：</p><ul><li>Iterable：可迭代对象        </li><li>key：排序规则(排序函数)，在 sorted 内部会将可迭代对象中的每⼀个元素传递给这个函数的参数，根据函数运算的结果进行排序</li><li>reverse：是否是倒序，True–&gt;倒序，False–&gt;正序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>] <br>lst2 = <span class="hljs-built_in">sorted</span>(lst) <br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># 原列表不会改变 </span><br><span class="hljs-built_in">print</span>(lst2) <span class="hljs-comment"># 返回的新列表是经过排序的 </span><br><br>dic = &#123;<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">3</span>:<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;B&#x27;</span>&#125; <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(dic))  <span class="hljs-comment"># 如果是字典，则返回排序过后的key </span><br><span class="hljs-comment"># [1, 2, 3]</span><br></code></pre></td></tr></table></figure><p>和函数组合使用，函数返回的必须是一个数字，用于排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据字符串长度进行排序 </span><br>lst = [<span class="hljs-string">&quot;钢铁侠&quot;</span>, <span class="hljs-string">&quot;银河护卫队&quot;</span>, <span class="hljs-string">&quot;美国队长&quot;</span>, <span class="hljs-string">&quot;蜘蛛侠&quot;</span>, <span class="hljs-string">&quot;复仇者联盟&quot;</span>] <br><br><span class="hljs-comment"># 计算字符串长度 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">s</span>):    <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(lst, key=func)) <br></code></pre></td></tr></table></figure><p>和匿名函数组合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据字符串长度进行排序</span><br>lst = [<span class="hljs-string">&quot;钢铁侠&quot;</span>, <span class="hljs-string">&quot;银河护卫队&quot;</span>, <span class="hljs-string">&quot;美国队长&quot;</span>, <span class="hljs-string">&quot;蜘蛛侠&quot;</span>, <span class="hljs-string">&quot;复仇者联盟&quot;</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(lst, key=<span class="hljs-keyword">lambda</span> s: <span class="hljs-built_in">len</span>(s)))<br><br><br>lst = [&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;alex&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;,<br>       &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;wusir&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">16</span>&#125;,<br>       &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;taibai&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">17</span>&#125;]<br><br><span class="hljs-comment"># 按照年龄对学生信息进行排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(lst, key=<span class="hljs-keyword">lambda</span> e: e[<span class="hljs-string">&#x27;age&#x27;</span>]))<br></code></pre></td></tr></table></figure><h3 id="五、filter"><a href="#五、filter" class="headerlink" title="五、filter"></a><strong>五、filter</strong></h3><p><strong>语法</strong>：ﬁlter(function. Iterable)        </p><p><strong>参数</strong>：</p><ul><li>function：用来筛选的函数，在 ﬁlter 中会自动的把 iterable 中的元素逐个传递给 function，然后根据function 返回的 True 或者 False 来判断是否保留此项数据；</li><li>Iterable：可迭代对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>] <br>ll = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>, lst) <span class="hljs-comment"># 筛选所有的偶数 </span><br><span class="hljs-built_in">print</span>(ll)  <span class="hljs-comment"># 返回的是一个迭代器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(ll))<br><br>lst = [&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;alex&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;,<br>       &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;wusir&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">16</span>&#125;,<br>       &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;taibai&#x27;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">17</span>&#125;]<br>fl = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> e: e[<span class="hljs-string">&#x27;age&#x27;</span>] &gt; <span class="hljs-number">16</span>, lst)  <span class="hljs-comment"># 筛选年年龄⼤大于16的数据</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(fl))<br></code></pre></td></tr></table></figure><h3 id="六、map"><a href="#六、map" class="headerlink" title="六、map"></a><strong>六、map</strong></h3><p><strong>语法</strong>：map(function, iterable) </p><p><strong>参数</strong>：</p><ul><li>function  将可迭代对象中每一个元素去function中执行并返回结果</li><li>iterable  可迭代对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算列表中每个元素的平方，返回新列表 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">e</span>):    <br><span class="hljs-keyword">return</span> e*e <br>mp = <span class="hljs-built_in">map</span>(func, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) <br><span class="hljs-built_in">print</span>(mp)  <span class="hljs-comment"># 返回的是一个迭代器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(mp)) <br></code></pre></td></tr></table></figure><p>改写成匿名函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * x, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]))) <br></code></pre></td></tr></table></figure><p>如果函数中有多个参数，后面的列表要一一对应；如果列表长度不一样，以最短的列表为准</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>lst2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x, y: x + y, lst1, lst2))) <span class="hljs-comment"># x 取lst1中的值，y 取lst2中的值  [3,6,9,12]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 生成器</title>
    <link href="/2019/05/01/0009-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2019/05/01/0009-%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="生成器的本质和定义方式"><a href="#生成器的本质和定义方式" class="headerlink" title="生成器的本质和定义方式"></a>生成器的本质和定义方式</h2><p>本质：生成器实际上就是一个迭代器。</p><p>生成器的定义方式主要有三种：</p><ul><li>通过生成器函数</li><li>通过各种推导式来实现生成器</li><li>通过数据的转换也可以获取生成器</li></ul><h2 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 普通函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span><br><br><span class="hljs-built_in">print</span>(func())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数中包含了yield, 当前这个函数就不再是普通的函数了. 是生成器函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello&quot;</span><br><br>func()         <span class="hljs-comment"># 什么都没有打印</span><br><span class="hljs-built_in">print</span>(func())  <span class="hljs-comment"># &lt;generator object func at 0x000001F69ADAC258&gt;  输出结果是一个生成器函数对象的地址，因此func()这一步相当于就是创建了一个生成器</span><br><br><span class="hljs-comment"># 生成器本质就是装饰器，因此可以用next方法取值</span><br>g = func()<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对于普通函数而言，出现多个return，只会执行到第一return，后面的语句不再执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is 18&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;18&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br><br>func()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 对于生成器而言，有多个yield并不影响函数的执行，每当调用一次next，就会从上一个yield执行到下一个yield</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is 18&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;18&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br><br>g = func()<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">My age is 18</span><br><span class="hljs-string">18</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 若通过next取值的个数超过函数中yield的个数，则溢出，报停止迭代错误</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is 18&quot;</span>)<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;18&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br><br>g = func()<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">My age is 18</span><br><span class="hljs-string">18</span><br><span class="hljs-string">哈哈哈</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;F:/生成器.py&quot;, line 12, in &lt;module&gt;</span><br><span class="hljs-string">    print(g.__next__())</span><br><span class="hljs-string">StopIteration</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="生成器函数的send方法"><a href="#生成器函数的send方法" class="headerlink" title="生成器函数的send方法"></a>生成器函数的send方法</h2><p>send 方法也和 next 一样，也可以让生成器向下执行一次，但是同时可以给上一个 yield 返回一个值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    a = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is 18&quot;</span>)<br>    b = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;18&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br>    c = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;over&quot;</span><br><br><br>g = func()<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">1111</span>))<br><span class="hljs-built_in">print</span>(g.__next__())<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">a 1111</span><br><span class="hljs-string">My age is 18</span><br><span class="hljs-string">18</span><br><span class="hljs-string">哈哈哈</span><br><span class="hljs-string">over</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure> <img src="/static/img/生成器函数send执行流程.png" style="zoom:67%;" />     <p><strong>send 方法的注意事项：</strong></p><ul><li>send 方法前面必须有next方法，即send方法不能作为第一个方法使用。因为 send 方法是将值传到前一个 yield 中，若一开始就使用 send 方法，将找不到 yield；</li><li>send 方法不能放在最后使用，因为 send 和 next 一样，调用时会从当前的 yield 执行到下一个 yield，最后使用 send，找不到下一个 yield 将会报溢出错误。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    a = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is 18&quot;</span>)<br>    b = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;18&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b&quot;</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br>    c = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;over&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c&quot;</span>,c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;呵呵&quot;</span>)<br><br><span class="hljs-comment"># 不能将send作为第一个方法</span><br>g = func()<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">2222</span>))  <span class="hljs-comment"># TypeError: can&#x27;t send non-None value to a just-started generator</span><br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">1111</span>))<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.__next__())<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is cdc&quot;</span>)<br>    a = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;Hello&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span>, a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My age is 18&quot;</span>)<br>    b = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;18&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b&quot;</span>, b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br>    c = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;over&quot;</span>  <span class="hljs-comment">#  此处c还是可以接收到最后一个send传过来的值的，只是再往下找yield的时候会报错</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c&quot;</span>, c)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;呵呵&quot;</span>)<br><br><span class="hljs-comment"># 不能在最后使用send</span><br>g = func()<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">1111</span>))<br><span class="hljs-built_in">print</span>(g.__next__())<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">2222</span>))<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">My name is cdc</span><br><span class="hljs-string">Hello</span><br><span class="hljs-string">a 1111</span><br><span class="hljs-string">My age is 18</span><br><span class="hljs-string">18</span><br><span class="hljs-string">b None</span><br><span class="hljs-string">哈哈哈</span><br><span class="hljs-string">over</span><br><span class="hljs-string">c 2222</span><br><span class="hljs-string">呵呵</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">    print(g.send(2222))</span><br><span class="hljs-string">StopIteration</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>生成器的元素可以通过 for 循环遍历取出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-keyword">yield</span> <span class="hljs-number">111</span><br><span class="hljs-keyword">yield</span> <span class="hljs-number">222</span><br><span class="hljs-keyword">yield</span> <span class="hljs-number">333</span><br><span class="hljs-keyword">yield</span> <span class="hljs-number">444</span><br><br>g = func()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g:<br><span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">111</span><br><span class="hljs-string">222</span><br><span class="hljs-string">333</span><br><span class="hljs-string">444</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>生成器的元素还可以通过转换数据类型获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-keyword">yield</span> <span class="hljs-number">111</span><br><span class="hljs-keyword">yield</span> <span class="hljs-number">222</span><br><span class="hljs-keyword">yield</span> <span class="hljs-number">333</span><br><span class="hljs-keyword">yield</span> <span class="hljs-number">444</span><br><br>g = func()<br>lst = <span class="hljs-built_in">list</span>(g)<br><span class="hljs-built_in">print</span>(lst)<br><br><span class="hljs-comment"># [111, 222, 333, 444]</span><br></code></pre></td></tr></table></figure><p>转换成列表类型后，会自动执行生成器中的 next 方法取出所有数据</p><h2 id="推导式实现生成器"><a href="#推导式实现生成器" class="headerlink" title="推导式实现生成器"></a>推导式实现生成器</h2><h3 id="一、列表推导式"><a href="#一、列表推导式" class="headerlink" title="一、列表推导式"></a><strong>一、列表推导式</strong></h3><p>首先我们来看一段代码，要求给出一个列表，向列表中添加1-13</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = <span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">14</span>):<br>lst.append(i)<br></code></pre></td></tr></table></figure><p>换成列表推导式的形式</p><p>语法 ：[最终结果(变量) for 变量 in 可迭代对象]</p><p>返回结果：按要求操作过后的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>)]<br></code></pre></td></tr></table></figure><p>列表推导式的常用语法： [ 结果 for 变量 in 可迭代对象]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例：从python1到python14写入列表lst</span><br>lst = [<span class="hljs-string">&#x27;python%s&#x27;</span> % i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">15</span>)] <br><span class="hljs-built_in">print</span>(lst)<br></code></pre></td></tr></table></figure><p>还可以对列表中的数据进行筛选：[ 结果 for 变量 in 可迭代对象 if 条件 ] </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取1-100内所有的偶数 </span><br>lst = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>] <br><span class="hljs-built_in">print</span>(lst) <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 小练习</span><br><span class="hljs-comment"># 1. 获取1-100内能被3整除的数</span><br>lst = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 2. 100以内能被3整除的数的平方</span><br>lst = [i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 3. 寻找名字中带有两个e的⼈的名字</span><br>names = [[<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Billy&#x27;</span>, <span class="hljs-string">&#x27;Jefferson&#x27;</span>, <span class="hljs-string">&#x27;Andrew&#x27;</span>, <span class="hljs-string">&#x27;Wesley&#x27;</span>, <span class="hljs-string">&#x27;Steven&#x27;</span>, <span class="hljs-string">&#x27;Joe&#x27;</span>],<br>         [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Jill&#x27;</span>, <span class="hljs-string">&#x27;Ana&#x27;</span>, <span class="hljs-string">&#x27;Wendy&#x27;</span>, <span class="hljs-string">&#x27;Jennifer&#x27;</span>, <span class="hljs-string">&#x27;Sherry&#x27;</span>, <span class="hljs-string">&#x27;Eva&#x27;</span>]]<br>lst = [name <span class="hljs-keyword">for</span> first <span class="hljs-keyword">in</span> names <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> first <span class="hljs-keyword">if</span> name.count(<span class="hljs-string">&quot;e&quot;</span>) == <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h3 id="二、生成器表达式"><a href="#二、生成器表达式" class="headerlink" title="二、生成器表达式"></a><strong>二、生成器表达式</strong></h3><p>生成器表达式和列表推导式的语法基本上是一样的，只是把[]替换成()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">gen = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)) <br><span class="hljs-built_in">print</span>(gen) <br><span class="hljs-comment"># 打印结果是一个生成器: &lt;generator object &lt;genexpr&gt; at 0x106768f10&gt; </span><br></code></pre></td></tr></table></figure><p> 可以通过for循环取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">gen = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)) <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> gen:<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 小练习 生成器表达式版</span><br><span class="hljs-comment"># 获取1-100内能被3整除的数 </span><br>gen = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) <br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> gen:    <br><span class="hljs-built_in">print</span>(num) <br><br><span class="hljs-comment"># 100以内能被3整除的数的平方 </span><br>gen = (i * i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) <br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> gen:    <br><span class="hljs-built_in">print</span>(num) <br><br><span class="hljs-comment"># 寻找名字中带有两个e的⼈人的名字 </span><br>gen = (name <span class="hljs-keyword">for</span> first <span class="hljs-keyword">in</span> names <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> first <span class="hljs-keyword">if</span> name.count(<span class="hljs-string">&quot;e&quot;</span>) &gt;= <span class="hljs-number">2</span>) <br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> gen:    <br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><p>生成器表达式和列表推导式的区别：</p><ul><li>列表推导式比较耗内存，将所有数据一次性加载。生成器表达式几乎不占用内存，使用的时候才分配和使用内存 </li><li>得到的值不一样，列表推导式得到的是一个列表，生成器表达式获取的是一个生成器。</li></ul><p>使用生成器表达式的好处就在于节省内存空间，比如一共有一万个元素，使用列表就需要为这一万个元素开辟一万个内存空间。使用生成器只需要开辟一个内存空间，由于生成器的惰性机制，只有问它要值得时候才会给你返回，因此当第一个值使用完后，就会把内存空间释放，放索取第二个值的时候，再开辟一个内存空间给第二个值使用，使用后再释放。所有对于一万个元素来说，只用了一个元素的内存空间。</p><h2 id="其他推导式"><a href="#其他推导式" class="headerlink" title="其他推导式"></a>其他推导式</h2><h3 id="一、字典推导式"><a href="#一、字典推导式" class="headerlink" title="一、字典推导式"></a><strong>一、字典推导式</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 把字典中的key和value互换 </span><br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>&#125; <br>new_dic = &#123;dic[key]: key <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic&#125; <br><span class="hljs-built_in">print</span>(new_dic) <br><br><span class="hljs-comment"># 在以下list中. 从lst1中获取的数据和lst2中相对应的位置的数据组成⼀个新字典 </span><br>lst1 = [<span class="hljs-string">&#x27;jay&#x27;</span>, <span class="hljs-string">&#x27;jj&#x27;</span>, <span class="hljs-string">&#x27;sylar&#x27;</span>] <br>lst2 = [<span class="hljs-string">&#x27;周杰伦&#x27;</span>, <span class="hljs-string">&#x27;林林俊杰&#x27;</span>, <span class="hljs-string">&#x27;邱彦涛&#x27;</span>] <br>dic = &#123;lst1[i]: lst2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lst1))&#125; <br><span class="hljs-built_in">print</span>(dic)<br><br></code></pre></td></tr></table></figure><h3 id="二、集合推导式"><a href="#二、集合推导式" class="headerlink" title="二、集合推导式"></a><strong>二、集合推导式</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 绝对值去重 </span><br>lst = [<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">12</span>] <br>s = &#123;<span class="hljs-built_in">abs</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst&#125; <br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p><strong>注：没有元组推导式</strong></p>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 迭代器</title>
    <link href="/2019/04/12/0008-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <url>/2019/04/12/0008-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h2><p>首先我们来看两段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果：</span><br><span class="hljs-string">aaa</span><br><span class="hljs-string">bbb</span><br><span class="hljs-string">ccc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">123</span>:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 报错 TypeError: &#x27;int&#x27; object is not iterable  int对象不是可迭代对象</span><br></code></pre></td></tr></table></figure><p>可见，并不是所有的数据类型都可以去使用for循环进行遍历，这是因为并不是所有的数据类型都是可迭代的对象。</p><p>在我们已知的基本数据类型中，str， list，tuple，set，dict，range，文件操作的句柄f均为可迭代对象，所有的以上数据类型中都有一个函数__iter()__，所有包含了__iter__()函数的数据类型都是可迭代的数据类型 （Iterable）。</p><p>我们可以通过 dir() 函数来查看一个对象或数据类型中包含了哪些东西。 在打印结果中，如果能找到__iter__，那么这个类的对象就是一个可迭代对象。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]<br><span class="hljs-keyword">print</span>(dir(lst))<br><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>[<span class="hljs-string">&#x27;__add__&#x27;</span>, <span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;__contains__&#x27;</span>, <span class="hljs-string">&#x27;__delattr__&#x27;</span>, <span class="hljs-string">&#x27;__delitem__&#x27;</span>, <span class="hljs-string">&#x27;__dir__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__eq__&#x27;</span>, <span class="hljs-string">&#x27;__format__&#x27;</span>, <span class="hljs-string">&#x27;__ge__&#x27;</span>, <span class="hljs-string">&#x27;__getattribute__&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__gt__&#x27;</span>, <span class="hljs-string">&#x27;__hash__&#x27;</span>, <span class="hljs-string">&#x27;__iadd__&#x27;</span>, <span class="hljs-string">&#x27;__imul__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;__init_subclass__&#x27;</span>, <span class="hljs-string">&#x27;__iter__&#x27;</span>, <span class="hljs-string">&#x27;__le__&#x27;</span>, <span class="hljs-string">&#x27;__len__&#x27;</span>, <span class="hljs-string">&#x27;__lt__&#x27;</span>, <span class="hljs-string">&#x27;__mul__&#x27;</span>, <span class="hljs-string">&#x27;__ne__&#x27;</span>, <span class="hljs-string">&#x27;__new__&#x27;</span>, <span class="hljs-string">&#x27;__reduce__&#x27;</span>, <span class="hljs-string">&#x27;__reduce_ex__&#x27;</span>, <span class="hljs-string">&#x27;__repr__&#x27;</span>, <span class="hljs-string">&#x27;__reversed__&#x27;</span>, <span class="hljs-string">&#x27;__rmul__&#x27;</span>, <span class="hljs-string">&#x27;__setattr__&#x27;</span>, <span class="hljs-string">&#x27;__setitem__&#x27;</span>, <span class="hljs-string">&#x27;__sizeof__&#x27;</span>, <span class="hljs-string">&#x27;__str__&#x27;</span>, <span class="hljs-string">&#x27;__subclasshook__&#x27;</span>, <span class="hljs-string">&#x27;append&#x27;</span>, <span class="hljs-string">&#x27;clear&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;extend&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;remove&#x27;</span>, <span class="hljs-string">&#x27;reverse&#x27;</span>, <span class="hljs-string">&#x27;sort&#x27;</span>]<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]<br>tup = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>dic = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;aaa&quot;</span>&#125;<br>se = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(lst))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(tup))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(dic))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(se))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(<span class="hljs-number">123</span>))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 也可以打印类中声明的⽅方法和函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(<span class="hljs-built_in">str</span>))   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(<span class="hljs-built_in">list</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(<span class="hljs-built_in">dict</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li>迭代器是一个可迭代的对象，但是可迭代的对象不一定就是迭代器</li><li>可迭代对象可以通过 __iter()__ 方法获取自身的迭代器</li><li>迭代器可以通过 __next()__ 方法取值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]<br>it = lst.__iter__()  <span class="hljs-comment"># it就是列表对象的迭代器</span><br><span class="hljs-built_in">print</span>(it.__next__())  <span class="hljs-comment"># 取第一个值 aaa</span><br><span class="hljs-built_in">print</span>(it.__next__())  <span class="hljs-comment"># 取第二个值 bbb</span><br><span class="hljs-built_in">print</span>(it.__next__())  <span class="hljs-comment"># 取第三个值 ccc</span><br><span class="hljs-built_in">print</span>(it.__next__())  <span class="hljs-comment"># 发生越界，停止迭代 StopIteration</span><br></code></pre></td></tr></table></figure><p>迭代器使用next方法从上往下取值，只有获取到next方法才会返回值。如果取值过程出现中断，再次获取到next的时候，迭代器还是会接着上一次next的位置继续往下取值，不会从头重新开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]<br>it = lst.__iter__()  <span class="hljs-comment"># it就是列表对象的迭代器</span><br><span class="hljs-built_in">print</span>(it.__next__()) <span class="hljs-comment"># aaa</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hahaha&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hahaha&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hahaha&quot;</span>)<br><span class="hljs-built_in">print</span>(it.__next__()) <span class="hljs-comment"># bbb</span><br></code></pre></td></tr></table></figure><h2 id="迭代器判断"><a href="#迭代器判断" class="headerlink" title="迭代器判断"></a>迭代器判断</h2><p>首先，迭代器本身就是一个可迭代的对象，因此迭代器也有 __iter()__方法。通过  迭代器. __iter()__  获取到的迭代器的迭代器其实就是它自己。其次，迭代器可以通过__next()__取值，而可迭代对象不一定有该方法。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> dir(list))  # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__next__&quot;</span> <span class="hljs-keyword">in</span> dir(list))  # <span class="hljs-literal">False</span><br><br>lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>]<br>it = list.__iter__(lst)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> dir(it))  # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__next__&quot;</span> <span class="hljs-keyword">in</span> dir(it))  # <span class="hljs-literal">True</span><br><br>f = open(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-attribute">mode</span>=<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> dir(f))  # <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__next__&quot;</span> <span class="hljs-keyword">in</span> dir(f))  # <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>列表对象只有 __iter__而没有__next__，因此列表只是一个可迭代对象而不是迭代器；列表对象的迭代器既有 __iter__又有__next__；</p><p>文件操作句柄既有 __iter__又有__next__，因此文件操作句柄f是一个迭代器。</p><p>我们还可以通过其他方式来判断可迭代对象和迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># isinstance 函数用于判断某一个对象是否是某一个类的实例对象</span><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br>l_iter = l.__iter__() <br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterable <br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterator <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l,Iterable))    <span class="hljs-comment">#True  是一个可迭代的对象</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l,Iterator))    <span class="hljs-comment">#False 不是一个迭代器</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l_iter,Iterator))    <span class="hljs-comment">#True 是一个可迭代的对象</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(l_iter,Iterable))    <span class="hljs-comment">#True 是一个迭代器</span><br></code></pre></td></tr></table></figure><p>注：列表、字典、元组、字符串、range 都是可迭代对象，文件句柄是迭代器。</p><h2 id="使用迭代器实现for循环"><a href="#使用迭代器实现for循环" class="headerlink" title="使用迭代器实现for循环"></a>使用迭代器实现for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>]<br>it = lst.__iter__()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(it.__next__())<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="迭代器的特点"><a href="#迭代器的特点" class="headerlink" title="迭代器的特点"></a>迭代器的特点</h2><ul><li>节省内存。</li><li>惰性机制，必须接收到next才会返回值。</li><li>不能反复，只能向下执⾏。</li></ul>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 装饰器</title>
    <link href="/2019/04/10/0007-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2019/04/10/0007-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="函数名的使用"><a href="#函数名的使用" class="headerlink" title="函数名的使用"></a>函数名的使用</h2><p>函数名是一个变量，但它是⼀个特殊的变量，与括号配合可以执行函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;呵呵&#x27;</span>)<br><br><span class="hljs-comment"># 查看函数名的内存地址</span><br><span class="hljs-built_in">print</span>(func)  <span class="hljs-comment"># &lt;function func at 0x000001F47C6E3E18&gt;</span><br></code></pre></td></tr></table></figure><h3 id="一、函数名可以作为变量来使用"><a href="#一、函数名可以作为变量来使用" class="headerlink" title="一、函数名可以作为变量来使用"></a><strong>一、函数名可以作为变量来使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;呵呵&#x27;</span>)<br><br>a = func  <span class="hljs-comment"># 把函数当成变量赋值给另外一个变量</span><br>a()  <span class="hljs-comment"># 通过变量a调用函数</span><br></code></pre></td></tr></table></figure><h3 id="二、作为容器的元素"><a href="#二、作为容器的元素" class="headerlink" title="二、作为容器的元素"></a><strong>二、作为容器的元素</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func1&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func2&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func3</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func3&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func4</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func4&#x27;</span>)<br><br>lst = [func1, func2, func3, func4]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst:<br>    i()<br>   <br><span class="hljs-comment">###################################################### </span><br>lst2 = [func1(), func2(), func3(), func4()]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lst2的结果:&quot;</span>, lst2)<br><span class="hljs-comment"># 若没有给函数设置返回值，函数默认返回None</span><br><span class="hljs-comment"># 执行结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">func1</span><br><span class="hljs-string">func2</span><br><span class="hljs-string">func3</span><br><span class="hljs-string">func4</span><br><span class="hljs-string">lst2的结果: [None, None, None, None]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、作为参数使用"><a href="#三、作为参数使用" class="headerlink" title="三、作为参数使用"></a><strong>三、作为参数使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start&#x27;</span>)<br>    arg()  <span class="hljs-comment"># 执行传递进来的arg</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br><br>func2(func1)  <span class="hljs-comment"># 把func1当成参数传递给func2</span><br></code></pre></td></tr></table></figure><h3 id="四、作为返回值使用"><a href="#四、作为返回值使用" class="headerlink" title="四、作为返回值使用"></a><strong>四、作为返回值使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这里是func1&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这里是func2&#x27;</span>)<br>    <span class="hljs-keyword">return</span> func2  <span class="hljs-comment"># 把func2当成返回值返回</span><br><br>ret = func1()  <span class="hljs-comment"># 调用func1，把返回值赋值给ret，即ret = func2</span><br>ret()  <span class="hljs-comment"># 调用ret，即func2()</span><br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="一、闭包的概念"><a href="#一、闭包的概念" class="headerlink" title="一、闭包的概念"></a><strong>一、闭包的概念</strong></h3><p>一个内层函数中，引用了外层函数（非全局）的变量，这个内层函数就可以成为闭包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>name = <span class="hljs-string">&quot;cdc&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():   <span class="hljs-comment"># 内层函数inner使用到了外层函数func的变量name，此时inner就是一个闭包</span><br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">return</span> inner<br><br>ret = func()<br>ret()<br></code></pre></td></tr></table></figure><h3 id="二、闭包的作用"><a href="#二、闭包的作用" class="headerlink" title="二、闭包的作用"></a><strong>二、闭包的作用</strong></h3><h4 id="2-1-保护变量，防止变量被修改"><a href="#2-1-保护变量，防止变量被修改" class="headerlink" title="2.1 保护变量，防止变量被修改"></a><strong>2.1 保护变量，防止变量被修改</strong></h4><p>将变量定义在全局是十分不安全的，在函数内部可以通过 global 关键字随意修改全局变量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;cdc&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br><span class="hljs-keyword">global</span> name<br>name = <span class="hljs-string">&quot;tr&quot;</span>  <span class="hljs-comment"># 全局变量被重新赋值</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br><span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;cdc&quot;</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OK&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NO&quot;</span>)<br><br><span class="hljs-comment"># 执行结果为 NO</span><br></code></pre></td></tr></table></figure><p>​闭包是将变量定义在外层函数内部，即便想要修改变量值，也只能使用 nonlocal 关键字在当前作用域内进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">nonlocal</span> name<br>        name = <span class="hljs-string">&quot;tr&quot;</span>  <span class="hljs-comment"># 修改的是func1作用域内的变量，且只能在func1内部进行修改，其余函数操作无法修改name的值</span><br>    <span class="hljs-keyword">return</span> inner<br><br></code></pre></td></tr></table></figure><h4 id="2-2-让变量在内存中常驻"><a href="#2-2-让变量在内存中常驻" class="headerlink" title="2.2 让变量在内存中常驻"></a><strong>2.2 让变量在内存中常驻</strong></h4><p>​       对于一般的函数而言，在声明函数时只是将函数名放入命名空间，当调用函数时，才为函数内部的变量或者嵌套函数开辟新的内存，当函数调用结束后，函数内部的变量就会释放内存；当下一次 调用函数时，再重新为函数内部变量开辟新的内存。因此，重复调用复杂的函数时，会消耗一定的时间。</p><p>​       对于 闭包函数而言，内层函数需要调用外层函数的变量，一旦外层函数的变量被释放，内层函数将无法执行，因此为了能让内层函数正常运行，python解释器会让外层的变量常驻在内存中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(name)<br>    <span class="hljs-keyword">return</span> inner<br><br>ret = func1()<br>ret()<br></code></pre></td></tr></table></figure><p>上述示例中，当 func1 函数执行结束后，理论上 name 变量将被释放，但是一旦 name 被释放，内层的 inner 将无法正常执行，因此 python 解释器会将 name 变量常驻内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 闭包在爬虫中的应用</span><br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">craw_web</span>():<br>    content = urlopen(<span class="hljs-string">&quot;http://www.xiaohua100.cn/index.html&quot;</span>).read()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">return</span> content<br>    <span class="hljs-keyword">return</span> inner<br><br>fn = craw_web()  <span class="hljs-comment"># 这个时候就开始加载校花100的内容</span><br><br>content = fn()  <span class="hljs-comment"># 第一次获取内容 </span><br><span class="hljs-built_in">print</span>(content)<br><br>content2 = fn()  <span class="hljs-comment"># 重新获取内容 </span><br><span class="hljs-built_in">print</span>(content2)<br><br><span class="hljs-comment"># 第一次获取内容所需时间较长，因为需要发送请求和接收响应返回的信息</span><br><span class="hljs-comment"># 往后再获取内容时速度就会很快，因为第一次获取的内容会常驻在内存中，后面获取内容不需要重新请求，只需要去内存中获取，因此速度很快</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">小练习——编写代码实现func函数，使其实现以下效果：</span><br><span class="hljs-string">foo = func(8)</span><br><span class="hljs-string">print(foo(8))  # 输出64</span><br><span class="hljs-string">print(foo(-1))  # 输出-8</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">b</span>):<br>        <span class="hljs-keyword">return</span> a * b<br>    <span class="hljs-keyword">return</span> inner<br><br>foo = func(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(foo(-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(foo(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><p>可以使用__closure__来检测一个函数是否闭包，若有返回值，则代表该函数是闭包，若返回None，则该函数不是闭包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner1</span>():<br>        <span class="hljs-built_in">print</span>(name)<br>    <span class="hljs-built_in">print</span>(inner1.__closure__)  <span class="hljs-comment"># (&lt;cell at 0x0000022663B68468: str object at 0x00000226657AB0A0&gt;,)，inner1 已经闭包</span><br>    <span class="hljs-keyword">return</span> inner1<br><br>ret1 = func1()<br>ret1()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    name = <span class="hljs-string">&quot;cdc&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner2</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈&quot;</span>)<br>    <span class="hljs-built_in">print</span>(inner2.__closure__)  <span class="hljs-comment"># None inner2 未闭包</span><br>    <span class="hljs-keyword">return</span> inner2<br><br>ret2 = func2()<br>ret2()<br><br></code></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="一、软件设计的原则"><a href="#一、软件设计的原则" class="headerlink" title="一、软件设计的原则"></a><strong>一、软件设计的原则</strong></h3><p>​开放封闭原则（开闭原则）：开放封闭原则是指对扩展代码的功能是开放的，但是对修改源代码是封闭的。这样的软件设计思路可以保证我们更好的开发和维护我们的代码。</p><h3 id="二、装饰器原理"><a href="#二、装饰器原理" class="headerlink" title="二、装饰器原理"></a><strong>二、装饰器原理</strong></h3><p>​本质上就是一个函数，可用于在不改变函数的调用方式以及源码的基础上，为函数增加新的功能。</p><p>我们先来写一个例子，模拟一下约妹子出来吃饭：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br>   <br>yue()<br></code></pre></td></tr></table></figure><p>妹子的联系途径多种多样，我们可以通过微信来联系妹子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开微信&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br>    <br>yue()<br></code></pre></td></tr></table></figure><p>显然，我们已经违背了开闭原则，对原来的函数源码进行了修改。况且社交工具多种多样，想要通过不同的途径来联系妹子，每一次都需要修改源码，十分的麻烦，因此我们可以再写一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">with_wechat</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打开微信&quot;</span>)<br>yue()<br><br>with_wchat()<br></code></pre></td></tr></table></figure><p>虽然我们避免了修改源码，但是当换一种社交工具时，又得再写新的函数。总结一句话就是如何在不改变函数的结构和调用方式的基础上，动态的给函数添加功能？可以用闭包的方法尝试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">with_tools</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;打开微信&quot;</span>)<br>func()<br><span class="hljs-keyword">return</span> inner<br><br>ret1 = with_tools(yue)<br>ret1()<br></code></pre></td></tr></table></figure><p>闭包虽然为改变原函数的结构，但还是改变了原来的调用方式，我们再稍作改动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">with_tools</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;打开微信&quot;</span>)<br>func()<br><span class="hljs-keyword">return</span> inner<br><br>yue = with_tools(yue)<br>yue()<br></code></pre></td></tr></table></figure><p>将 with_tools 的赋值给一个变量 yue，再调用 yue 就恢复到了我们最开始的调用方式了，一切问题完美解决，其实这就是装饰器的一个雏形。看一下它的执行过程吧：</p><ul><li>首先访问with_tools(“微信”, yue)</li><li>把yue函数赋值给了with_tools函数的形参func，记住后续执行func的话实际上是执行了最开始传入的yue函数。</li><li>with_tools函数执行过程就是一句话，返回了inner函数。这个时候把inner函数赋值给了yue这个变量</li><li>执行yue的时候，相当于执行了inner函数，先打印打开微信再执行func，也就是我们最开始传入的yue函数</li></ul><p>Python 中针对于上面的功能提供了一个快捷的写法，俗称装饰器语法糖。使用装饰器语法糖的写法，实现同样功能的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">with_tools</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;打开微信&quot;</span>)<br>func()<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@with_tools</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br><br>yue()<br></code></pre></td></tr></table></figure><h3 id="三、装饰器的使用"><a href="#三、装饰器的使用" class="headerlink" title="三、装饰器的使用"></a><strong>三、装饰器的使用</strong></h3><h4 id="3-1-装饰有返回值的函数"><a href="#3-1-装饰有返回值的函数" class="headerlink" title="3.1 装饰有返回值的函数"></a><strong>3.1 装饰有返回值的函数</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">fn</span>):             <span class="hljs-comment"># 接收的参数是一个函数名</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():          <span class="hljs-comment"># 定义一个内层函数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是cdc&quot;</span>)  <span class="hljs-comment"># 新功能</span><br>        ret = fn()        <span class="hljs-comment"># 在内层函数中拿到被装饰函数的结果</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;再见&quot;</span>)     <span class="hljs-comment"># 新功能</span><br>        <span class="hljs-keyword">return</span> ret        <span class="hljs-comment"># 返回被装饰函数的执行结果</span><br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment"># 定义一个有返回值的函数</span><br><span class="hljs-meta">@func</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你好&quot;</span><br><br>res = say_hello()  <span class="hljs-comment"># 调用被装饰函数并拿到结果</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h4 id="3-2-装饰带参数的函数"><a href="#3-2-装饰带参数的函数" class="headerlink" title="3.2 装饰带参数的函数"></a><strong>3.2 装饰带参数的函数</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">func</span>):  <span class="hljs-comment"># 接收的参数是一个函数名</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">x, y</span>):  <span class="hljs-comment"># 这里需要定义和被装饰函数相同的参数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是新功能...&quot;</span>)  <span class="hljs-comment"># 新功能</span><br>        func(x, y)  <span class="hljs-comment"># 被装饰函数名和参数都有了，就能执行被装饰函数了</span><br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment"># 定义一个需要两个参数的函数</span><br><span class="hljs-meta">@foo</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;+&#123;&#125;=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x, y, x+y))<br><br><br><span class="hljs-comment"># 调用被装饰函数</span><br>f1(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br><br><span class="hljs-comment">###################################################</span><br><span class="hljs-comment"># 由于不知道参数实参究竟是怎么传的，因此可以把形参设置成可变长参数，这样就可以接收所有情况的参数了</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">func</span>):  <span class="hljs-comment"># 接收的参数是一个函数名</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):  <span class="hljs-comment"># 这里需要定义和被装饰函数相同的参数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这里是新功能...&quot;</span>)  <span class="hljs-comment"># 新功能</span><br>        func(*args, **kwargs)  <span class="hljs-comment"># 被装饰函数名和参数都有了，就能执行被装饰函数了</span><br>    <span class="hljs-keyword">return</span> inner<br></code></pre></td></tr></table></figure><h4 id="3-3-装饰器自身带参数"><a href="#3-3-装饰器自身带参数" class="headerlink" title="3.3 装饰器自身带参数"></a><strong>3.3 装饰器自身带参数</strong></h4><p>被装饰的函数可以带参数，装饰器同样也可以带参数。如果想让装饰器也带上参数，就必须在原来的闭包函数最外层再套一层函数，该函数就用于接收装饰器带来的参数，供内层函数使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 带参数的装饰器需要定义一个三层的嵌套函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">name</span>):  <span class="hljs-comment"># d是新添加的最外层函数，为我们原来的装饰器传递参数，name就是我们要传递的参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">func</span>):  <span class="hljs-comment"># f1是我们原来的装饰器函数，func是被装饰的函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">*arg, **kwargs</span>):  <span class="hljs-comment"># f2是内部函数，*args和**kwargs是被装饰函数的参数</span><br>            <span class="hljs-built_in">print</span>(name)  <span class="hljs-comment"># 使用装饰器函数的参数</span><br>            func(*arg, **kwargs)  <span class="hljs-comment"># 调用被装饰的函数</span><br>        <span class="hljs-keyword">return</span> f2<br>    <span class="hljs-keyword">return</span> f1<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">with_tools</span>(<span class="hljs-params">tool</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner1</span>(<span class="hljs-params">func</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner2</span>(<span class="hljs-params">*args, **kwargs</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;打开<span class="hljs-subst">&#123;tool&#125;</span>&quot;</span>)<br>func(*args, **kwargs)<br><span class="hljs-keyword">return</span> inner2<br><span class="hljs-keyword">return</span> inner1<br><br><span class="hljs-meta">@with_tools(<span class="hljs-params"><span class="hljs-string">&quot;微信&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br><br>yue()<br></code></pre></td></tr></table></figure><h4 id="3-4-最完整的装饰器"><a href="#3-4-最完整的装饰器" class="headerlink" title="3.4 最完整的装饰器"></a><strong>3.4 最完整的装饰器</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a = <span class="hljs-literal">None</span></span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner1</span>(<span class="hljs-params">fn</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner2</span>(<span class="hljs-params">*args, **kwargs</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新功能&quot;</span>)<br>ret = fn(*args, **kwargs)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;新功能&quot;</span>)<br><span class="hljs-keyword">return</span> ret<br><span class="hljs-keyword">return</span> inner2<br><span class="hljs-keyword">return</span> inner1<br><br><span class="hljs-meta">@func()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h4 id="3-5-装饰器的修复技术"><a href="#3-5-装饰器的修复技术" class="headerlink" title="3.5 装饰器的修复技术"></a><strong>3.5 装饰器的修复技术</strong></h4><p>被装饰的函数最终都会失去本来的__doc__等信息， Python给我们提供了一个修复被装饰函数的工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">with_tools</span>(<span class="hljs-params">func</span>):<br><span class="hljs-meta">     @wraps(<span class="hljs-params">func</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;打开微信&quot;</span>)<br>func()<br><span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@with_tools</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">yue</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;给妹子发消息，约妹子出来吃饭&quot;</span>)<br><br>yue()<br><span class="hljs-built_in">print</span>(yue.__doc__)<br><span class="hljs-built_in">print</span>(yue.__name__)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 函数</title>
    <link href="/2019/04/06/0006-%E5%87%BD%E6%95%B0/"/>
    <url>/2019/04/06/0006-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="函数相关思维导图"><a href="#函数相关思维导图" class="headerlink" title="函数相关思维导图"></a>函数相关思维导图</h2><p><img src="/img/blog/about_python/%E5%87%BD%E6%95%B0.png"> </p><p><a href="https://www.processon.com/mindmap/5e327935e4b096de64c9bc3f">https://www.processon.com/mindmap/5e327935e4b096de64c9bc3f</a></p><h2 id="函数简介"><a href="#函数简介" class="headerlink" title="函数简介"></a>函数简介</h2><h3 id="一、什么是函数"><a href="#一、什么是函数" class="headerlink" title="一、什么是函数"></a><strong>一、什么是函数</strong></h3><p>函数是对代码块或功能的封装和定义。</p><p>函数必须先定义，再使用。可以形象的将函数理解为一个工具，我们必须先把要用的工具找齐准备好，这样等到我们要用工具的时候就可以直接拿来用。</p><p>在函数定义阶段中，只检测语法，不执行代码，即语法错误在函数定义阶段就会检测出来，而代码的逻辑错误只有在执行时才会知道。</p><h3 id="二、为什么要使用函数"><a href="#二、为什么要使用函数" class="headerlink" title="二、为什么要使用函数"></a><strong>二、为什么要使用函数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 制造一辆汽车</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;制造车壳&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;制造轮胎&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;安装发动机&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;安装玻璃&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;喷上车漆&quot;</span>)<br><br><span class="hljs-comment"># 制造第二辆车</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;制造车壳&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;制造轮胎&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;安装发动机&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;安装玻璃&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;喷上车漆&quot;</span>)<br><br>......<br></code></pre></td></tr></table></figure><p>在上述制造汽车的例子中，我们的代码都是从上而下顺序执行的。当需要制作几辆汽车时，就需要把整个流程重复执行几次；并且当我们需要修改某一步骤时，又要把所有相关的代码部分统统修改。因此，不使用函数去管理代码，便会存在以下的问题：</p><ul><li>代码的组织结构不够清晰，可读性差；</li><li>遇到重复的功能只能重复编写实现代码，代码冗余；</li><li>功能需要扩展时，需要找出所有实现该功能的地方修改之，无法统一管理且维护难度极大。</li></ul><h3 id="三、函数的分类和定义"><a href="#三、函数的分类和定义" class="headerlink" title="三、函数的分类和定义"></a><strong>三、函数的分类和定义</strong></h3><ul><li>内置函数：为了方便我们的开发，针对一些简单的功能，python 解释器已经为我们定义好了的函数即内置函数。对于内置函数，我们可以拿来就用而无需事先定义，如 len()，sum()，max()</li><li>自定义函数：内置函数所能提供的功能是有限的，我们自己需要根据需求，事先定制好我们自己的函数来实现某种功能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数定义语法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>,参数<span class="hljs-number">3</span>,...</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;注释&#x27;&#x27;&#x27;</span><br>    函数体<br>    <span class="hljs-keyword">return</span> 返回的值<br>    <br><span class="hljs-comment"># python3中新添加了&quot;类型注解&quot;特性，因此函数的定义方式还可以写成</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_min</span>(<span class="hljs-params">a:<span class="hljs-built_in">int</span>, b:<span class="hljs-built_in">int</span></span>)-&gt;<span class="hljs-built_in">int</span>:  <span class="hljs-comment"># 规定参数的数据类型，&quot;-&gt;&quot;表示返回值的类型</span><br>    <span class="hljs-built_in">print</span>(a <span class="hljs-keyword">if</span> a &lt;= b <span class="hljs-keyword">else</span> b)<br></code></pre></td></tr></table></figure><p>注：函数并不一定都要指定返回值。函数如果没有显示指定返回值（即函数定义中没有写 return 或者 return语句后没有值），默认返回 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数具体的三种定义方式</span><br><span class="hljs-comment"># 1.定义无参函数，应用场景仅仅只是执行一些操作</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tell_msg</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-comment"># 2.定义有参函数，需要根据外部传进来的参数，才能执行相应的逻辑</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tell_tag</span>(<span class="hljs-params">tag,n</span>): <span class="hljs-comment">#有参数</span><br>    <span class="hljs-built_in">print</span>(tag*n)<br><br><span class="hljs-comment"># 3.定义空函数，设计代码结构</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auth</span>(<span class="hljs-params">user,password</span>):                             <br>    <span class="hljs-string">&#x27;&#x27;&#x27;                                                           </span><br><span class="hljs-string">    auth function                                                 </span><br><span class="hljs-string">    :param user: 用户名                                              </span><br><span class="hljs-string">    :param password: 密码                                           </span><br><span class="hljs-string">    :return: 认证结果                                                 </span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>                                                           <br>    <span class="hljs-keyword">pass</span>         <br></code></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按照在程序中的出现形式和位置，函数的调用大体可以分为三种</span><br><span class="hljs-comment"># 1.语句形式调用</span><br>func()<br><br><span class="hljs-comment"># 2.表达式形式</span><br>m = func()     <span class="hljs-comment"># 将func函数执行的结果传给变量m</span><br>n = <span class="hljs-number">10</span>*func()  <span class="hljs-comment"># 将func函数执行的结果乘以10后，传给变量n</span><br><br><span class="hljs-comment"># 3.函数调用作为参数的形式</span><br>func2(a, func())  <span class="hljs-comment"># 将func函数执行的结果作为一个参数传给func2函数</span><br></code></pre></td></tr></table></figure><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="一、实参和形参"><a href="#一、实参和形参" class="headerlink" title="一、实参和形参"></a><strong>一、实参和形参</strong></h3><ul><li>形参（形式参数）是在定义函数时，括号内声明的参数。形参的本质是一个变量名，用于接收外部传进来的值；</li><li>实参（实际参数）是在调用函数时，括号内传入的值，实参可以是变量、常量、表达式或者三者的组合</li><li>在调用有参函数时，实参（值）会赋值给形参（变量名）。在python中，变量名和值只是单纯的绑定关系，而对于函数来说，这种关系只在调用时生效，在调用后就解除。</li></ul><h3 id="二、形参的具体使用"><a href="#二、形参的具体使用" class="headerlink" title="二、形参的具体使用"></a><strong>二、形参的具体使用</strong></h3><h4 id="2-1-位置参数"><a href="#2-1-位置参数" class="headerlink" title="2.1 位置参数"></a><strong>2.1 位置参数</strong></h4><ul><li>位置参数，即按顺序定义的参数</li><li>在定义函数时，按照从左往右定义的形式参数称为位置形参，凡是按照这种形式定义的形参都必须被传值</li><li>在调用函数时，按照从左往右传入的实际参数称为位置实参，凡是按照这种形式定义的实参会跟形参一一对应</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,sex</span>):   <span class="hljs-comment">#  定义位置形参：name，age，sex，三者都必须被传值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:%s Age:%s Sex:%s&#x27;</span> %(name,age,sex))<br><br>register() <span class="hljs-comment"># TypeError：缺少3个位置参数</span><br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>)   <span class="hljs-comment">#  对应关系为：name=’lili’,age=18,sex=’male’</span><br></code></pre></td></tr></table></figure><h4 id="2-2-关键字参数"><a href="#2-2-关键字参数" class="headerlink" title="2.2 关键字参数"></a><strong>2.2 关键字参数</strong></h4><ul><li>调用函数时，实参也可以是键值对方式传入，称为关键字参数，可以不按照从左往右的顺序传入，但是也能为对应的形参赋值</li><li>当实参是位置参数和关键字参数混合使用时，要保证关键字参数在位置参数后面，且不能对一个形参重复赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,sex</span>):   <span class="hljs-comment">#  定义位置形参：name，age，sex，三者都必须被传值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:%s Age:%s Sex:%s&#x27;</span> %(name,age,sex))<br><br>register(sex=<span class="hljs-string">&#x27;male&#x27;</span>,name=<span class="hljs-string">&#x27;lili&#x27;</span>,age=<span class="hljs-number">18</span>) <span class="hljs-comment">#  正确使用</span><br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,sex=<span class="hljs-string">&#x27;male&#x27;</span>,age=<span class="hljs-number">18</span>)  <span class="hljs-comment">#  正确使用</span><br>register(name=<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,sex=<span class="hljs-string">&#x27;male&#x27;</span>) <span class="hljs-comment">#  SyntaxError：关键字参数name=&#x27;lili&#x27;在位置参数18之前</span><br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,sex=<span class="hljs-string">&#x27;male&#x27;</span>,age=<span class="hljs-number">18</span>,name=<span class="hljs-string">&#x27;jack&#x27;</span>) <span class="hljs-comment">#  TypeError：形参name被重复赋值</span><br></code></pre></td></tr></table></figure><h4 id="2-3-默认参数"><a href="#2-3-默认参数" class="headerlink" title="2.3 默认参数"></a><strong>2.3 默认参数</strong></h4><ul><li>在定义函数时就已经为形参赋值，这类形参称为默认参数</li><li>在函数调用时，若不给默认参数重新赋值，则默认参数就使用默认的值，否则使用新的赋值</li><li>默认参数必须在位置参数之后</li><li>默认参数的值通过应该设置为不可变类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,sex=<span class="hljs-string">&quot;male&quot;</span></span>):   <span class="hljs-comment">#  定义位置形参：name，age，sex，三者都必须被传值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:%s Age:%s Sex:%s&#x27;</span> %(name,age,sex))<br><br>register(name=<span class="hljs-string">&#x27;lili&#x27;</span>,age=<span class="hljs-number">18</span>) <span class="hljs-comment">#  不传sex的值，结果为 Name:lili Age:18 Sex:male</span><br>register(name=<span class="hljs-string">&#x27;lili&#x27;</span>,age=<span class="hljs-number">18</span>, sex=<span class="hljs-string">&quot;female&quot;</span>) <span class="hljs-comment">#  重传sex的值，结果为 Name:lili Age:18 Sex:female</span><br></code></pre></td></tr></table></figure><ul><li><p>可变长位置参数</p><p>当调用函数时，传入的位置实参个数多于位置形参个数时，就会报溢出错误。可变长位置参数就是为了解决此类问题。如果在最后一个形参前加*号，溢出的位置参数都会被该形参接收，并以元组形式保存。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,y,z=<span class="hljs-number">1</span>,*args</span>): <span class="hljs-comment">#  在最后一个形参名args前加*号</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(args)<br><br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)  <span class="hljs-comment"># 实参1、2、3按位置为形参x、y、z赋值，多余的位置实参4、5、6、7都被*接收，以元组的形式保存下来，赋值给args，即args=(4, 5, 6,7)</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">(4, 5, 6, 7)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义的列表实参，也可以传值给*args</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,y,*args</span>):<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(args)<br><br>L=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,*L)  <span class="hljs-comment"># *L就相当于位置参数3，4，5, foo(1,2,*L)就等同于foo(1,2,3,4,5)</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">运行结果</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">(3, 4, 5)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 如果传入列表的时候没有加*，相当于就是一个普通位置参数</span><br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,L) <span class="hljs-comment"># 仅多出一个位置实参L</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">([1, 2, 3],)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 如果形参为常规的参数（位置参数或者默认参数），实参仍可以是*的形式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,y,z=<span class="hljs-number">3</span></span>):<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>foo(*[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) <span class="hljs-comment">#  等同于foo(1,2)</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多个值求和示例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>res=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> args:<br>res+=i<br><span class="hljs-keyword">return</span> res<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><ul><li><p>可边长关键字参数</p><p>如果在最后一个形参前加 ** 号，所有溢出的关键字参数都会被该形参接收，并以字典的形式保存</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,**kwargs</span>): <span class="hljs-comment"># 在最后一个参数kwargs前加**</span><br>     <span class="hljs-built_in">print</span>(x)        <br>     <span class="hljs-built_in">print</span>(kwargs)   <br><br>foo(y=<span class="hljs-number">2</span>,x=<span class="hljs-number">1</span>,z=<span class="hljs-number">3</span>) <span class="hljs-comment"># 溢出的关键字实参y=2，z=3都被**接收，以字典的形式保存下来，赋值给kwargs</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">&#123;&#x27;z&#x27;: 3, &#x27;y&#x27;: 2&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义的字典实参，也可以传值给**kwargs</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,y,**kwargs</span>):<br>     <span class="hljs-built_in">print</span>(x)<br>     <span class="hljs-built_in">print</span>(y)<br>     <span class="hljs-built_in">print</span>(kwargs)<br> <br>dic=&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>&#125; <br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,**dic)  <span class="hljs-comment"># **dic就相当于关键字参数a=1，b=2，foo(1,2,**dic)等同foo(1,2,a=1,b=2)</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 如果传入字典的时候没有加**，相当于就是一个普通位置参数</span><br>foo(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,dic)  <span class="hljs-comment"># TypeError:函数foo只需要2个位置参数，但是传了3个</span><br><br><span class="hljs-comment"># 如果形参为常规的参数（位置参数或者默认参数），实参仍可以是**的形式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x,y,z=<span class="hljs-number">3</span></span>):<br><span class="hljs-built_in">print</span>(x)<br>     <span class="hljs-built_in">print</span>(y)<br>     <span class="hljs-built_in">print</span>(z)<br> <br>foo(**&#123;<span class="hljs-string">&#x27;x&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;y&#x27;</span>:<span class="hljs-number">2</span>&#125;) <span class="hljs-comment"># 等同于foo(y=2,x=1)</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>命名关键字参数</p><p>当函数调用者将关键字参数放入 <code>**kwargs</code> 中进行传参，我们又想知道我们需要的关键字参数是否被包含在了可变长关键字参数内，我们还需要对接收的值进一步判断，增加了代码的复杂度</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,**kwargs</span>):<br>     <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;sex&#x27;</span> <span class="hljs-keyword">in</span> kwargs:<br>        <span class="hljs-comment">#有sex参数</span><br>         <span class="hljs-keyword">pass</span><br>     <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;height&#x27;</span> <span class="hljs-keyword">in</span> kwargs:<br>        <span class="hljs-comment">#有height参数</span><br>        <span class="hljs-keyword">pass</span> <br></code></pre></td></tr></table></figure><p>因此，为限定函数调用者必须对必要的关键字参数进行传值，python3 提供了命名关键字参数。</p><p>在定义形参时，用 * 作为一个分割符号，<code>*</code> 之后的形参称为命名关键字参数。对于这类参数，进行函数调用的时候，必须以key&#x3D;value的形式进行传值，且必须被传值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,*,sex,height</span>): <span class="hljs-comment">#sex,height为命名关键字参数</span><br>     <span class="hljs-keyword">pass</span><br><br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,sex=<span class="hljs-string">&#x27;male&#x27;</span>,height=<span class="hljs-string">&#x27;1.8m&#x27;</span>)  <span class="hljs-comment"># 正确使用</span><br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;1.8m&#x27;</span>) <span class="hljs-comment"># TypeError:未使用关键字的形式为sex和height传值</span><br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,height=<span class="hljs-string">&#x27;1.8m&#x27;</span>) <span class="hljs-comment"># TypeError没有为命名关键字参数sex传值。</span><br></code></pre></td></tr></table></figure><p>命名关键字参数也可以有默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,*,sex=<span class="hljs-string">&#x27;male&#x27;</span>,height</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:%s,Age:%s,Sex:%s,Height:%s&#x27;</span> %(name,age,sex,height))<br> <br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,height=<span class="hljs-string">&#x27;1.8m&#x27;</span>)  <span class="hljs-comment">#  Name:lili,Age:18,Sex:male,Height:1.8m</span><br></code></pre></td></tr></table></figure><p>注意：sex不是默认参数，height也不是位置参数，两者都是命名关键字参数，”male”只是sex的默认值，因此即便将 sex放置在 height 前面也不会有问题（按照正常的逻辑，位置参数必须在默认参数前面，但是sex和height都是命名关键字参数，因此不需要遵守这个规则）</p><p>如果形参中已经有 <code>*args </code>了，命名关键字参数就不需要一个单独的 * 来作为分隔符了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">name,age,*args,sex=<span class="hljs-string">&#x27;male&#x27;</span>,height</span>):<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Name:%s,Age:%s,Args:%s,Sex:%s,Height:%s&#x27;</span> %(name,age,args,sex,height))<br> <br>register(<span class="hljs-string">&#x27;lili&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,height=<span class="hljs-string">&#x27;1.8m&#x27;</span>) <span class="hljs-comment"># sex与height仍为命名关键字参数</span><br></code></pre></td></tr></table></figure><ul><li><p>组合使用</p><p>定义时各类形参的顺序：位置参数、默认参数、<code>*args</code>、命名关键字参数、<code>**kwargs</code></p></li></ul><h2 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h2><h3 id="一、命名空间"><a href="#一、命名空间" class="headerlink" title="一、命名空间"></a><strong>一、命名空间</strong></h3><p>​在 python 解释器开始执行之后，就会在内存中开辟一个空间，每当遇到一个变量的时候，就把变量名和值之间的关系记录下来；当遇到函数定义的时候，解释器只是把函数名读入内存，表示这个函数存在了，至于函数内部的变量和逻辑，解释器是不关心的。即一开始的时候函数只是加载进来，只有当函数被调⽤和访问的时候，解释器才会根据函数内部声明的变量来进行开辟变量的内部空间。随着函数执行完毕，这些函数内部变量占用的空间也会随着函数执行完毕而被清空。</p><p>​                                                           <img src="/img/blog/about_python/func_process.png">      </p><p>存放名字和值对应关系的空间叫命名空间，在python中，一共有三种命名空间：</p><ul><li>内置命名空间：存放python解释器为我们提供的名字，如 print，list，tuple，str 等</li><li>全局命名空间：函数外部声明的变量和最外层的函数均属于全局命名空间</li><li>局部命名空间：函数内部定义的变量和内部定义的函数均属于局部命名空间，局部命名空间之间相互独立</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span>  <span class="hljs-comment"># 全局命名空间</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():  <span class="hljs-comment"># 全局命名空间</span><br>    b = <span class="hljs-number">20</span>   <span class="hljs-comment"># 局部命名空间</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br>    <span class="hljs-built_in">print</span>(b)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():  <span class="hljs-comment"># 局部命名空间</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;呵呵&quot;</span>)<br><br><span class="hljs-built_in">print</span>(a)<br>func()<br><br><span class="hljs-comment">####################################################</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 报错，变量b未声明，因为b属于func的局部名称空间，因此在func2中无法使用</span><br><br></code></pre></td></tr></table></figure><p>命名空间加载顺序：内置命名空间 –&gt; 全局命名空间 –&gt; 局部命名空间</p><p>上述的例子中，当python解释器开始运行时，先会加载 print 等python解释器内置的命名空间，接着再从上到下加载全局名称空间（变量a和函数名 func），当执行函数时，最后再为函数内部的变量和嵌套的函数开辟命名空间，即最后加载局部命名空间</p><p>命名空间的取值顺序：局部命名空间 –&gt; 全局命名空间 –&gt; 内置命名空间（就近原则）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>a = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出20</span><br><br>func()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出10</span><br></code></pre></td></tr></table></figure><p>上述例子中，函数内部的 print(a) 会先在当前的局部命名空间中查找a，如果查找不到就会往全局命名空间中查找；对于 print 函数，现在 func 函数的局部命名空间查找，查找不到就往全局命名空间查找，还是查找不到函数的定义和声明，就会往 python 解释器的内置命名空间进行查找。</p><h3 id="二、作用域"><a href="#二、作用域" class="headerlink" title="二、作用域"></a><strong>二、作用域</strong></h3><p>**作用域：**作用域就是作用范围，按照生效范围来看分为全局作用域和局部作用域   </p><ul><li>全局作用域：包含内置命名空间和全局命名空间，在整个文件的任何位置都可以使用(遵循从上到下逐行执行) </li><li>局部作用域：在函数内部可以使用</li></ul><p><strong>作用域命名空间</strong></p><ul><li>全局作用域：全局命名空间 + 内置命名空间        </li><li>局部作用域：局部命名空间</li></ul><p> 我们可以通过 <strong>globals()</strong> 函数来查看全局作用域中的内容,  也可以通过 <strong>locals()</strong> 来查看局部作用域中的变量和函数信息 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():    <br>a = <span class="hljs-number">40</span>    <br>b = <span class="hljs-number">20</span>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abc</span>():        <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈&quot;</span>)    <br><span class="hljs-built_in">print</span>(a, b)     <span class="hljs-comment"># 这里使用的是局部作用域    </span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())    <span class="hljs-comment"># 打印全局作⽤用域中的内容    </span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())     <span class="hljs-comment"># 打印当前局部作⽤用域中的内容，即打印func中的局部命名空间</span><br><br>func()<br><br><span class="hljs-comment"># 输出的结果是一样的，因为locals()是查看当前的局部命名空间，而此时locals函数的位置就处在全局中，因此查看的也是全局</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">globals</span>())   <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">locals</span>())     <br></code></pre></td></tr></table></figure><h2 id="关键字global和nonlocal"><a href="#关键字global和nonlocal" class="headerlink" title="关键字global和nonlocal"></a>关键字global和nonlocal</h2><h3 id="一、global"><a href="#一、global" class="headerlink" title="一、global"></a><strong>一、global</strong></h3><p>global 表示不再使用局部作用域中的内容， 而改用全局作用域中的变量。当在局部作用域中改变了该变量的值，则全局中该变量的值也会发生改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():    <br><span class="hljs-keyword">global</span> a    <span class="hljs-comment"># 加了个global表示不再局部创建这个变量了，而是直接使用全局的a  </span><br>    <span class="hljs-built_in">print</span>(a)    <span class="hljs-comment">#  100</span><br>a = <span class="hljs-number">28</span>     <span class="hljs-comment"># 此时将a重新赋值28，由于引用的是全局变量，因此全局中的a也会发生改变</span><br><span class="hljs-built_in">print</span>(a)   <span class="hljs-comment"># 28</span><br><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 100 此时还未执行函数，a的值还未被修改</span><br>func() <br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 28</span><br></code></pre></td></tr></table></figure><h3 id="二、nonlocal"><a href="#二、nonlocal" class="headerlink" title="二、nonlocal"></a><strong>二、nonlocal</strong></h3><p>nonlocal 表示在 <strong>局部作用域</strong> 中，调用命名空间中最近的变量（即若父级函数中查找不到，继续往父级的父级查找）。如果在子函数中修改了该变量，则原来作用域中的该变量的值也会发生响应的变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">###########  报错，a是属于全局作用域的  ##########</span><br>a = <span class="hljs-number">10</span> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():      <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br><span class="hljs-keyword">nonlocal</span> a        <br>a = <span class="hljs-number">30</span>        <br><span class="hljs-built_in">print</span>(a)    <br>func2()    <br><span class="hljs-built_in">print</span>(a)<br>    <br>func1()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    a = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br>    <span class="hljs-keyword">nonlocal</span> a <br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 10</span><br>        a = <span class="hljs-number">20</span><br>        <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 20</span><br>    func2()<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 20</span><br>    <br>    <br>    <br>a = <span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun_1</span>():<br>    a = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun_2</span>():<br>        a = <span class="hljs-number">3</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">fun_3</span>():<br>             <span class="hljs-keyword">nonlocal</span> a<br>             a =  <span class="hljs-number">4</span><br>             <span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 4</span><br>         <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 3</span><br>         fun_3()<br>         <span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 4</span><br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 2</span><br>    fun_2()<br>    <span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 2</span><br><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br>fun_1()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># 执行结果：1,2,3,4,4,2,1</span><br></code></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>匿名函数是为了解决一些简单的需求而设计的一句话函数，用lambda关键字来声明，不需要用def来声明。</p><p>语法： 函数名 &#x3D; lambda 参数: 返回值 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算n的n次方 </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):    <br><span class="hljs-keyword">return</span> n**n <br><span class="hljs-built_in">print</span>(func(<span class="hljs-number">10</span>))<br><br><span class="hljs-comment"># 匿名函数的写法</span><br>f = <span class="hljs-keyword">lambda</span> n: n**n <br><span class="hljs-built_in">print</span>(f(<span class="hljs-number">10</span>)) <br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>函数的参数可以有多个，多个参数之间⽤逗号隔开</li><li>匿名函数不管多复杂，只能写⼀行, 且逻辑结束后直接返回数据</li><li>返回值和正常的函数一样，可以是任意数据类型</li><li>匿名函数并不是说⼀定没有名字，这里前⾯的变量就是⼀个函数名。说他是匿名原因是通过__name__查看的时候，函数是没有名字的，统⼀都叫 lambda。在调用的时候没有什么特别之处，像正常的函数调用即可。</li></ul><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>递归函数就是函数在内部调用自己，必须的有递归的出口，否则会就是死循环</li><li>在python中递归的最大深度是998层</li><li>递归主要用于遍历树形结构</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span>)<br>    func()<br><br>func()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">count</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span> + <span class="hljs-built_in">str</span>(count))<br>    func(count + <span class="hljs-number">1</span>)<br>    <br>func(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># 可以调整递归深度，但是不一定能跑到指定的深度</span><br><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">10000</span>)    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">count</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;哈哈哈&quot;</span> + <span class="hljs-built_in">str</span>(count))<br>    func(count + <span class="hljs-number">1</span>)<br><br>func(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>为什么要限制递归的深度？我们来观察以下两段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 死循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>a = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment"># 递归死循环</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>a = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(a)<br>    func()<br><br>func()<br></code></pre></td></tr></table></figure><p>while 死循环重复使用的是同一个变量，因此不会对内存造成影响；而递归由于每次都是调用一个函数，每次都会为新函数中的变量开辟新的内存，如果不限制递归的深度，很容易造成内存的崩溃。且如果一个功能使得递归的深度过大，其实也表示该功能不太适合用递归实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用递归遍历文件夹</span><br><span class="hljs-keyword">import</span> os<br>file_path = <span class="hljs-string">&quot;F:/学习代码/python&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">traverse_dir</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> os.listdir(file_path):<br>        <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(file_path, <span class="hljs-built_in">dir</span>)):<br>            traverse_dir(os.path.join(file_path, <span class="hljs-built_in">dir</span>))  <span class="hljs-comment"># 递归入口</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(os.path.join(file_path, <span class="hljs-built_in">dir</span>))  <span class="hljs-comment"># 递归出口</span><br><br>traverse_dir(file_path)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 文件操作</title>
    <link href="/2019/03/21/0005-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/03/21/0005-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="文件操作流程"><a href="#文件操作流程" class="headerlink" title="文件操作流程"></a>文件操作流程</h2><ul><li>第一步，打开文件，获得文件句柄，并赋值给一个变量 ；</li><li>第二步，通过句柄对文件进行相关操作；</li><li>第三步，关闭文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># author: cdc</span><br><span class="hljs-comment"># date: 2018/8/23</span><br><br><span class="hljs-comment"># 三个参数分别表示：文件操作模式编码</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;动物世界.txt&#x27;</span>,model=<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>content = f.read()<br><span class="hljs-built_in">print</span>(content)<br>f.close()<br><br><span class="hljs-comment">#***************运行结果*****************</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">东打一下西戳一下</span><br><span class="hljs-string">动物未必需要尖牙</span><br><span class="hljs-string">示爱的方法有礼貌或是我管它</span><br><span class="hljs-string">要将情人一口吞下</span><br><span class="hljs-string">还要显得温文尔雅</span><br><span class="hljs-string">螳螂委屈的展示旧伤疤</span><br><span class="hljs-string">......</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="文件操作的不同模式"><a href="#文件操作的不同模式" class="headerlink" title="文件操作的不同模式"></a>文件操作的不同模式</h2><h3 id="一、只读模式"><a href="#一、只读模式" class="headerlink" title="一、只读模式"></a><strong>一、只读模式</strong></h3><h4 id="1-1-不同的读取模式："><a href="#1-1-不同的读取模式：" class="headerlink" title="1.1 不同的读取模式："></a><strong>1.1 不同的读取模式：</strong></h4><ul><li>r：正常读取</li><li>rb：二进制方式读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;动物世界.txt&quot;</span>,mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.read() <br><span class="hljs-built_in">print</span>(content) <br>f.close() <br></code></pre></td></tr></table></figure><p><code>encoding</code> 表示编码集。根据文件的实际保存编码进行获取数据，对于我们而言，更多的是 <code>utf-8</code>。 rb 方式读取出来的数据是 <code>bytes</code> 类型，在 rb 模式下，不能选择 <code>encoding</code> 字符集。</p><p>rb 的作用: 在读取非文本文件的时候，比如 MP3、 图像、视频等信息，就需要用到 rb。 因为这种数据是没办法直接显示出来的，需要将文件转成二进制流再进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;动物世界.txt&quot;</span>,mode=<span class="hljs-string">&quot;rb&quot;</span> ) <br>content = f.read() <br><span class="hljs-built_in">print</span>(content) <br>f.close() <br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果: </span><br><span class="hljs-string">b&#x27;\xe6\xaf\x85\xe5\x93\xa5, \xe5\xa4\xaa\xe7\x99\xbd, wuse\n\xe5\x91\xb5\xe5\x91\xb5\n\xe6\x97\xa5\xe5\xa4\xa9&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-读取文件的方法"><a href="#1-2-读取文件的方法" class="headerlink" title="1.2 读取文件的方法"></a><strong>1.2 读取文件的方法</strong></h4><ul><li><strong>read()</strong>将文件中的内容全部读取出来。弊端：占内存，如果文件过大，容易导致内存崩溃。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;动物世界.txt&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.read() <br><span class="hljs-built_in">print</span>(content) <br><br><span class="hljs-comment">#***************运行结果*****************</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">东打一下西戳一下</span><br><span class="hljs-string">动物未必需要尖牙</span><br><span class="hljs-string">示爱的方法有礼貌或是我管它</span><br><span class="hljs-string">要将情人一口吞下</span><br><span class="hljs-string">还要显得温文尔雅</span><br><span class="hljs-string">螳螂委屈的展示旧伤疤</span><br><span class="hljs-string">......</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><strong>read(n)</strong>读取n个字符。需要注意的是，如果再次读取，会在当前位置继续去读而不 是从头读。如果使用的是 rb 模式，则读取出来的是 n 个字节。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../def/哇擦.txt&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.read(<span class="hljs-number">3</span>) <br><span class="hljs-built_in">print</span>(content) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果:</span><br><span class="hljs-string">友谊地</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../def/哇擦.txt&quot;</span>, mode=<span class="hljs-string">&quot;rb&quot;</span>) <br>content = f.read(<span class="hljs-number">3</span>) <br><span class="hljs-built_in">print</span>(content) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果: b&#x27;\xe5\x8f\x8b&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../def/哇擦.txt&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.read(<span class="hljs-number">3</span>) <br>content2 = f.read(<span class="hljs-number">3</span>) <br><span class="hljs-built_in">print</span>(content) <br><span class="hljs-built_in">print</span>(content2) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果: </span><br><span class="hljs-string">友谊地 </span><br><span class="hljs-string">久天长</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>readline()</strong> ⼀次读取⼀行数据。注意： readline() 每次读取出来的数据都会有一 个 \n ，需要我们使用strip()方法来去掉 \n 或者空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../def/哇擦.txt&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.readline() <br>content2 = f.readline() <br>content3 = f.readline() <br>content4 = f.readline() <br>content5 = f.readline() <br>content6 = f.readline() <br><span class="hljs-built_in">print</span>(content) <br><span class="hljs-built_in">print</span>(content2) <br><span class="hljs-built_in">print</span>(content3) <br><span class="hljs-built_in">print</span>(content4) <br><span class="hljs-built_in">print</span>(content5) <br><span class="hljs-built_in">print</span>(content6) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">结果: </span><br><span class="hljs-string">友谊地久天长, 爱一点,</span><br><span class="hljs-string">可惜我是水瓶座</span><br><span class="hljs-string">一生中最爱</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>readlines()</strong>将所有的内容都逐行读取出来，放到一个列表中。容易出现内存崩溃的问题，不推荐使用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../def/哇擦.txt&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>lst = f.readlines() <br><span class="hljs-built_in">print</span>(lst) <br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lst:    <br><span class="hljs-built_in">print</span>(line.strip())<br></code></pre></td></tr></table></figure><ul><li>循环读取每次读取一行内容，不会产生内存溢出的问题，推荐使用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../def/哇擦.txt&quot;</span>, mode=<span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:    <br><span class="hljs-built_in">print</span>(line.strip())<br></code></pre></td></tr></table></figure><h3 id="二、只写模式"><a href="#二、只写模式" class="headerlink" title="二、只写模式"></a><strong>二、只写模式</strong></h3><p>在该模式下，如果要写入的目标文件不存在，则会创建文件。 如果文件存在，则将原文件中的内容删除，再写入新内容。</p><h4 id="2-1-不同的写入模式"><a href="#2-1-不同的写入模式" class="headerlink" title="2.1 不同的写入模式"></a><strong>2.1 不同的写入模式</strong></h4><ul><li>w：正常写入</li><li>wb：二进制方式写入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃.txt&quot;</span>, mode=<span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.write(<span class="hljs-string">&quot;金毛狮王&quot;</span>) <br><span class="hljs-comment"># f.read()   not readable 模式是w，不可以执行读操作 </span><br>f.flush()    <span class="hljs-comment"># 刷新，养成好习惯 </span><br>f.close()<br></code></pre></td></tr></table></figure><p>wb 模式下，可以不指定打开文件的编码，但是在写文件的时候，必须将字符串转化成 utf-8 的 bytes数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃.txt&quot;</span>, mode=<span class="hljs-string">&quot;wb&quot;</span>) <br>f.write(<span class="hljs-string">&quot;金毛狮王&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)) <br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><h3 id="三、追加模式"><a href="#三、追加模式" class="headerlink" title="三、追加模式"></a><strong>三、追加模式</strong></h3><p>在追加模式下，我们写入的内容会追加在文件已有内容的结尾，不会对原始内容进行覆盖。</p><h4 id="3-1-不同的追加模式"><a href="#3-1-不同的追加模式" class="headerlink" title="3.1 不同的追加模式"></a><strong>3.1 不同的追加模式</strong></h4><ul><li>a：正常追加</li><li>ab：二进制方式追加</li><li>a+：追加读</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃.txt&quot;</span>, mode=<span class="hljs-string">&quot;a&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.write(<span class="hljs-string">&quot;麻花藤的最爱&quot;</span>) <br>f.flush() <br>f.close()<br><br><span class="hljs-comment"># a+模式下, 不论先读还是后读，都是读取不到数据的</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;a+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.write(<span class="hljs-string">&quot;马化腾&quot;</span>) <br>content = f.read() <br><span class="hljs-built_in">print</span>(content) <br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><h3 id="四、读写模式"><a href="#四、读写模式" class="headerlink" title="四、读写模式"></a><strong>四、读写模式</strong></h3><p>对于读写模式，光标默认是在开头的，必须是先读再写。</p><h4 id="4-1-不同的读写模式"><a href="#4-1-不同的读写模式" class="headerlink" title="4.1 不同的读写模式"></a><strong>4.1 不同的读写模式</strong></h4><ul><li>r+：正常读写</li><li>r+b：二进制方式读写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 正确的使用方式</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃.txt&quot;</span>, mode=<span class="hljs-string">&quot;r+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.read() <br>f.write(<span class="hljs-string">&quot;麻花藤的最爱&quot;</span>) <br><span class="hljs-built_in">print</span>(content) <br>f.flush() <br>f.close() <br><br><span class="hljs-comment"># 错误的使用方式，会将开头的内容改写成&quot;哈哈&quot;, 然后再读取后面的内容</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;⼩小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;r+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.write(<span class="hljs-string">&quot;哈哈&quot;</span>) <br>content = f.read() <br><span class="hljs-built_in">print</span>(content) <br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><h3 id="五、写读模式"><a href="#五、写读模式" class="headerlink" title="五、写读模式"></a><strong>五、写读模式</strong></h3><p>先将所有的内容清空，然后写入，最后读取。但是读取的内容是空的，不常用。</p><h4 id="5-1-不同的写读模式"><a href="#5-1-不同的写读模式" class="headerlink" title="5.1 不同的写读模式"></a><strong>5.1 不同的写读模式</strong></h4><ul><li>w+：正常写读</li><li>w+b：二进制方式写读</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;w+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.write(<span class="hljs-string">&quot;哈哈&quot;</span>) <br>content = f.read() <br><span class="hljs-built_in">print</span>(content) <br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="一、光标移动"><a href="#一、光标移动" class="headerlink" title="一、光标移动"></a><strong>一、光标移动</strong></h3><p><strong>seek(n)</strong> 方法可以控制光标移动到 n 位置上。</p><p>注意：移动的单位是 byte，所以如果是 UTF-8 的中⽂，移动的值要是3的倍数。通常我们使⽤ seek 来使光标移动到开头或者结尾。</p><ul><li><p>移动到开头:  seek(0)        </p></li><li><p>移动到结尾: seek(0, 2)</p></li></ul><p>seek 的第二个参数表示的是从哪个位置进行偏移，默认是0，表示开头；1表⽰当前位置； 2表示结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;r+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 光标移动到开头 </span><br>content = f.read()  <span class="hljs-comment"># 读取内容, 此时光标移动到结尾 </span><br><span class="hljs-built_in">print</span>(content) <br>f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 再次将光标移动到开头 </span><br>f.seek(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)    <span class="hljs-comment"># 将光标移动到结尾 </span><br>content2 = f.read()  <span class="hljs-comment"># 读取内容，什么都没有 </span><br><span class="hljs-built_in">print</span>(content2) f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 移动到开头 </span><br>f.write(<span class="hljs-string">&quot;哈哈哈&quot;</span>)  <span class="hljs-comment"># 写⼊信息，此时光标在9  中⽂文3 * 3个 = 9 </span><br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><h3 id="二、获取当前的光标位置"><a href="#二、获取当前的光标位置" class="headerlink" title="二、获取当前的光标位置"></a><strong>二、获取当前的光标位置</strong></h3><p><strong>tell()</strong>获取当前光标在什么位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;r+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 光标移动到开头 </span><br>content = f.read()  <span class="hljs-comment"># 读取内容, 此时光标移动到结尾</span><br><span class="hljs-built_in">print</span>(content) <br>f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 再次将光标移动到开头 </span><br>f.seek(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)    <span class="hljs-comment"># 将光标移动到结尾 </span><br>content2 = f.read()  <span class="hljs-comment"># 读取内容，什么都没有 </span><br><span class="hljs-built_in">print</span>(content2) <br>f.seek(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 移动到开头 </span><br>f.write(<span class="hljs-string">&quot;哈哈哈&quot;</span>)  <span class="hljs-comment"># 写⼊入信息，此时光标在9  中⽂文3 * 3个 = 9 </span><br><span class="hljs-built_in">print</span>(f.tell())  <span class="hljs-comment"># 光标位置9 </span><br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><h3 id="三、文件截断"><a href="#三、文件截断" class="headerlink" title="三、文件截断"></a><strong>三、文件截断</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>f.write(<span class="hljs-string">&quot;哈哈&quot;</span>)   <span class="hljs-comment"># 写⼊入两个字符</span><br>f.seek(<span class="hljs-number">3</span>)   <span class="hljs-comment"># 光标移动到3, 也就是两个字中间 </span><br>f.truncate()    <span class="hljs-comment"># 删掉光标后面的所有内容 </span><br>f.close()<br><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;小娃娃&quot;</span>, mode=<span class="hljs-string">&quot;r+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <br>content = f.read(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 读取12个字符 </span><br>f.seek(<span class="hljs-number">4</span>) <span class="hljs-built_in">print</span>(f.tell()) <br>f.truncate()    <span class="hljs-comment"># 后面的所有内容全部都删掉 # </span><br><span class="hljs-built_in">print</span>(content) <br>f.flush() <br>f.close()<br></code></pre></td></tr></table></figure><p>**注意：**在 <code>r+</code> 模式下，如果读取了内容，不论读取内容多少，光标显示的是多少，再写入或者操作文件的时候都是在结尾进行的。所以如果想做截断操作，要先挪动光标到想要截断的位置，然后再进行截断。</p><p>关于 <strong>truncate(n)</strong>，如果给出了n，则从开头进行截断；如果不给n，则从当前位置截断，后面的内容将会全部被删除。</p><h3 id="四、with方法"><a href="#四、with方法" class="headerlink" title="四、with方法"></a><strong>四、with方法</strong></h3><p>为了避免打开文件后忘记关闭，可以通过管理上下文的方式操作文件，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>f.readline()<br></code></pre></td></tr></table></figure><p>如此方式，当 <code>with</code> 代码块执行完毕时，内部会自动关闭并释放文件资源。<code>with</code> 支持同时对多个文件的上下文进行管理，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f_read, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f_write:     <br>f_read.readline()     <br>f_write.write(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 流程控制</title>
    <link href="/2019/03/20/0004-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2019/03/20/0004-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>​编程的目的是为了控制计算机能够像人脑一样工作，那么人脑能做什么，就需要程序中有相应的机制去模拟。人脑无非是数学运算和逻辑运算，对于逻辑运算，即人根据外部条件的变化而做出不同的反映。（比如，如果是红灯和黄灯就等一会儿，否则就过马路）</p><h3 id="1、if…else…-条件判断"><a href="#1、if…else…-条件判断" class="headerlink" title="1、if…else… 条件判断"></a><strong>1、if…else… 条件判断</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 语法</span><br><span class="hljs-keyword">if</span> 条件:<br>    执行代码<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    执行代码<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果：女人的年龄 &gt; 30 岁，那么：叫阿姨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">age_of_girl=<span class="hljs-number">31</span><br><br><span class="hljs-keyword">if</span> age_of_girl &gt; <span class="hljs-number">30</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;阿姨好&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果：女人的年龄 &gt; 30岁，那么：叫阿姨，否则：叫小姐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">age_of_girl=<span class="hljs-number">18</span><br><br><span class="hljs-keyword">if</span> age_of_girl &gt; <span class="hljs-number">30</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;阿姨好&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小姐好&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果：女人的年龄 &gt;&#x3D; 18 并且 &lt;  22岁 并且 身高 &gt;170 并且 体重 &lt;100 并且 是漂亮的，那么：表白，否则：叫阿姨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">age_of_girl = <span class="hljs-number">18</span><br>height = <span class="hljs-number">171</span><br>weight = <span class="hljs-number">99</span><br>is_pretty = <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">18</span> &lt;= age_of_girl &lt; <span class="hljs-number">22</span> <span class="hljs-keyword">and</span> height &gt; <span class="hljs-number">170</span> <span class="hljs-keyword">and</span> weight &lt; <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> is_pretty == <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;表白...&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;阿姨好&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="2、if-的嵌套使用"><a href="#2、if-的嵌套使用" class="headerlink" title="2、if  的嵌套使用"></a><strong>2、if  的嵌套使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在表白的基础上继续：</span><br><span class="hljs-comment"># 如果表白成功，那么：在一起</span><br><span class="hljs-comment"># 否则：打印。。。</span><br><br>age_of_girl=<span class="hljs-number">18</span><br>height=<span class="hljs-number">171</span><br>weight=<span class="hljs-number">99</span><br>is_pretty=<span class="hljs-literal">True</span><br><br>success=<span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-number">18</span> &lt;= age_of_girl &lt; <span class="hljs-number">22</span> <span class="hljs-keyword">and</span> height &gt; <span class="hljs-number">170</span> <span class="hljs-keyword">and</span> weight &lt; <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> is_pretty == <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> success:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;表白成功,在一起&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;什么爱情不爱情的,爱nmlgb的爱情,爱nmlg啊...&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;阿姨好&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、elif-的使用"><a href="#3、elif-的使用" class="headerlink" title="3、elif  的使用"></a><strong>3、elif  的使用</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    执行代码块<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>:<br>    执行代码块<span class="hljs-number">2</span><br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">3</span>:<br>    执行代码块<span class="hljs-number">3</span><br><br>    ......<br><br><span class="hljs-keyword">else</span>:　　<br>    执行最后的代码块<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">score=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>)<br>score=<span class="hljs-built_in">int</span>(score)<br><br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;优秀&#x27;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;良好&#x27;</span>)<br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;普通&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;很差&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><h3 id="1、while循环"><a href="#1、while循环" class="headerlink" title="1、while循环"></a><strong>1、while循环</strong></h3><p>作用：多次执行同一段代码</p><p>就让用户猜年龄的demo而言，若想实现支持可以让用户猜测三次的功能，则需要把代码copy三次，如果是10次，100次，甚至不限次数，那么整个程序将无限冗长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">age_of_oldboy = <span class="hljs-number">48</span><br><br>guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;:&quot;</span>))<br><br><span class="hljs-keyword">if</span> guess &gt; age_of_oldboy :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜的太大了，往小里试试...&quot;</span>)<br><br><span class="hljs-keyword">elif</span> guess &lt; age_of_oldboy :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜的太小了，往大里试试...&quot;</span>)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你，猜对了...&quot;</span>)<br><br><span class="hljs-comment">#第2次</span><br>guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;:&quot;</span>))<br><br><span class="hljs-keyword">if</span> guess &gt; age_of_oldboy :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜的太大了，往小里试试...&quot;</span>)<br><br><span class="hljs-keyword">elif</span> guess &lt; age_of_oldboy :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜的太小了，往大里试试...&quot;</span>)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你，猜对了...&quot;</span>)<br><br><span class="hljs-comment">#第3次</span><br>guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;:&quot;</span>))<br><br><span class="hljs-keyword">if</span> guess &gt; age_of_oldboy :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜的太大了，往小里试试...&quot;</span>)<br><br><span class="hljs-keyword">elif</span> guess &lt; age_of_oldboy :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜的太小了，往大里试试...&quot;</span>)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恭喜你，猜对了...&quot;</span>)<br></code></pre></td></tr></table></figure><p>此时，可以使用while循环来实现对同一段代码的多次调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:    <br>    <span class="hljs-comment"># 循环体</span><br> <br><span class="hljs-comment"># 如果条件为真，那么循环体则执行，执行完毕后再次循环，重新判断条件。。。</span><br><span class="hljs-comment"># 如果条件为假，那么循环体不执行,循环终止</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#打印0-10</span><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loop&#x27;</span>,count)<br>    count+=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#打印0-10之间的偶数</span><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-keyword">if</span> count % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loop&#x27;</span>,count)<br>    count+=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#打印0-10之间的奇数</span><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-keyword">if</span> count % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loop&#x27;</span>,count)<br>    count+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2、使用标志位来控制while循环嵌套"><a href="#2、使用标志位来控制while循环嵌套" class="headerlink" title="2、使用标志位来控制while循环嵌套"></a><strong>2、使用标志位来控制while循环嵌套</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">tag=<span class="hljs-literal">True</span> <br>　　<span class="hljs-keyword">while</span> tag:<br>　　　　......<br>　　　　<span class="hljs-keyword">while</span> tag:<br>　　　　　　........<br>　　　　　　<span class="hljs-keyword">while</span> tag:<br>　　　　　　　　tag=<span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#练习，要求如下：</span><br><span class="hljs-comment">#    1 循环验证用户输入的用户名与密码</span><br><span class="hljs-comment">#    2 认证通过后，运行用户重复执行命令</span><br><span class="hljs-comment">#    3 当用户输入命令为quit时，则退出整个程序 </span><br><br>name=<span class="hljs-string">&#x27;cdc&#x27;</span><br>password=<span class="hljs-string">&#x27;123&#x27;</span><br><br>tag=<span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> tag:<br>    inp_name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;用户名: &#x27;</span>)<br>    inp_pwd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;密码: &#x27;</span>)<br>    <span class="hljs-keyword">if</span> inp_name == name <span class="hljs-keyword">and</span> inp_pwd == password:<br>        <span class="hljs-keyword">while</span> tag:<br>            cmd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cmd:<span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> cmd == <span class="hljs-string">&#x27;quit&#x27;</span>:<br>                tag=<span class="hljs-literal">False</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;run &lt;%s&gt;&#x27;</span> %cmd)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用户名或密码错误&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、死循环"><a href="#3、死循环" class="headerlink" title="3、死循环"></a><strong>3、死循环</strong></h3><p>当循环没有退出条件时，循环体会一直重复执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>num=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;count&#x27;</span>,num)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    num+=<span class="hljs-number">1</span>　　 <br></code></pre></td></tr></table></figure><h3 id="4、break与continue"><a href="#4、break与continue" class="headerlink" title="4、break与continue"></a><strong>4、break与continue</strong></h3><p>break用于终止整个循环，即遇到break语句，跳出while循环</p><p>continue用于跳出当次循环，继续执行后面的循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">8</span>:<br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(count)<br><br>    count += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 执行结果</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">8</span>:<br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">4</span>:<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;aaaa&quot;</span>)<br>        <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;bbbb&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(count)<br><br>    count += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 执行结果</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>aaaa<br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p> 对比上述两个例子可以发现，当程序执行到break时整个循环就直接结束了，但是当程序执行到continue时，只是跳过了当前的判断，还在继续往下循环。(注：continue之后的语句不会执行)</p><h3 id="5、while-else"><a href="#5、while-else" class="headerlink" title="5、while-else"></a><strong>5、while-else</strong></h3><p>当while循环正常执行结束，即中间没有被break中止的话，else语句才会被执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 正常执行没有被break中止</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span> :<br>    count += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loop&quot;</span>,count)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环正常执行完啦&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----out of while loop ------&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string">Loop 1</span><br><span class="hljs-string">Loop 2</span><br><span class="hljs-string">Loop 3</span><br><span class="hljs-string">Loop 4</span><br><span class="hljs-string">Loop 5</span><br><span class="hljs-string">Loop 6</span><br><span class="hljs-string">循环正常执行完啦</span><br><span class="hljs-string">-----out of while loop ------</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">#如果执行过程中被break啦，就不会执行else的语句啦</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span> :<br>    count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">3</span>:<span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loop&quot;</span>,count)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环正常执行完啦&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----out of while loop ------&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出</span><br><span class="hljs-string"></span><br><span class="hljs-string">Loop 1</span><br><span class="hljs-string">Loop 2</span><br><span class="hljs-string">-----out of while loop ------</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6、while循环练习"><a href="#6、while循环练习" class="headerlink" title="6、while循环练习"></a><strong>6、while循环练习</strong></h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#1. 使用<span class="hljs-keyword">while</span>循环输出<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>     <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br>#2. 求<span class="hljs-number">1</span><span class="hljs-number">-100</span>的所有数的和<br>#3. 输出 <span class="hljs-number">1</span><span class="hljs-number">-100</span> 内的所有奇数<br>#4. 输出 <span class="hljs-number">1</span><span class="hljs-number">-100</span> 内的所有偶数<br>#5. 求<span class="hljs-number">1</span><span class="hljs-number">-2</span>+<span class="hljs-number">3</span><span class="hljs-number">-4</span>+<span class="hljs-number">5</span> <span class="hljs-params">...</span> <span class="hljs-number">99</span>的所有数的和<br>#6. 用户登陆（三次机会重试）<br>#7：猜年龄游戏<br>要求：<br>    允许用户最多尝试<span class="hljs-number">3</span>次，<span class="hljs-number">3</span>次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出<br>#8：猜年龄游戏升级版 <br>要求：<br>    允许用户最多尝试<span class="hljs-number">3</span>次<br>    每尝试<span class="hljs-number">3</span>次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y或y, 就继续让其猜<span class="hljs-number">3</span>次，以此往复，如果回答N或n，就退出程序<br>    如何猜对了，就直接退出 <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#题一</span><br>count=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">7</span>:<br>        count+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(count)<br>    count+=<span class="hljs-number">1</span><br>    <br><br>count=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-keyword">if</span> count != <span class="hljs-number">7</span>:<br>        <span class="hljs-built_in">print</span>(count)<br>    count+=<span class="hljs-number">1</span><br>    <br><br><span class="hljs-comment">#题目二</span><br>res=<span class="hljs-number">0</span><br>count=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">100</span>:<br>    res+=count<br>    count+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment">#题目三</span><br>count=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> count%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(count)<br>    count+=<span class="hljs-number">1</span><br>    <br><span class="hljs-comment">#题目四</span><br>count=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> count%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(count)<br>    count+=<span class="hljs-number">1</span><br>    <br>    <br>    <br><span class="hljs-comment">#题目五</span><br>res=<span class="hljs-number">0</span><br>count=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> count &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> count%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        res-=count<br>    <span class="hljs-keyword">else</span>:<br>        res+=count<br>    count+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(res)<br>    <br><br><span class="hljs-comment">#题目六</span><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">3</span>:<br>    name=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名：&#x27;</span>)<br>    password=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;egon&#x27;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&#x27;123&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;login success&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用户名或者密码错误&#x27;</span>)<br>        count+=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#题目七</span><br>age_of_oldboy=<span class="hljs-number">73</span><br><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">3</span>:<br>    guess=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> guess == age_of_oldboy:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you got it&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    count+=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#题目八</span><br>age_of_oldboy=<span class="hljs-number">73</span><br><br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">3</span>:<br>        choice=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;继续(Y/N?)&gt;&gt;: &#x27;</span>)<br>        <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&#x27;Y&#x27;</span> <span class="hljs-keyword">or</span> choice == <span class="hljs-string">&#x27;y&#x27;</span>:<br>            count=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br><br>    guess=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> guess == age_of_oldboy:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you got it&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    count+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h3 id="1、迭代式循环"><a href="#1、迭代式循环" class="headerlink" title="1、迭代式循环"></a><strong>1、迭代式循环</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># for语法如下</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 可迭代对象：<br>        执行代码<br></code></pre></td></tr></table></figure><p>补充：range函数 –&gt; 用于生成一个区间范围的数字，左闭右开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h3 id="2、break与continue（同while）"><a href="#2、break与continue（同while）" class="headerlink" title="2、break与continue（同while）"></a><strong>2、break与continue（同while）</strong></h3><h3 id="3、循环嵌套"><a href="#3、循环嵌套" class="headerlink" title="3、循环嵌套"></a><strong>3、循环嵌套</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s*%s=%s&#x27;</span> %(i,j,i*j),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># for循环练习  打印金字塔</span><br><span class="hljs-comment"># 分析</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">             #max_level=5</span><br><span class="hljs-string">    *        #current_level=1，空格数=4，*号数=1</span><br><span class="hljs-string">   ***       #current_level=2,空格数=3,*号数=3</span><br><span class="hljs-string">  *****      #current_level=3,空格数=2,*号数=5</span><br><span class="hljs-string"> *******     #current_level=4,空格数=1,*号数=7</span><br><span class="hljs-string">*********    #current_level=5,空格数=0,*号数=9</span><br><span class="hljs-string"></span><br><span class="hljs-string">#数学表达式</span><br><span class="hljs-string">空格数=max_level-current_level</span><br><span class="hljs-string">*号数=2*current_level-1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 实现</span><br>max_level=<span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> current_level <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,max_level+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_level-current_level):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">#在一行中连续打印多个空格</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>*current_level-<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">#在一行中连续打印多个空格</span><br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 数据类型</title>
    <link href="/2019/03/16/0003-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2019/03/16/0003-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型简介"><a href="#数据类型简介" class="headerlink" title="数据类型简介"></a>数据类型简介</h2><p>​Python 的数据类型大致可分为 6 类：</p><ul><li>Number（数字，布尔类型、整型、浮点型、复数等都归为数字类型）</li><li>String（字符串）</li><li>Tuple （元组）</li><li>List（列表） </li><li>Dictionary（字典）</li><li>Sets（集合）</li></ul><p>这 6 种类型又可以分为 <code>可变类型</code> 和 <code>不可变类型</code>，其中不可变类型有：Number（数字）、String（字符串）、 Tuple（元组）；可变类型有：List（列表）、 Dictionary （字典）、 Sets（集合）。</p><p>​<strong>不可变数据类型</strong>的变量在第一次赋值声明的时候，会在内存中开辟一块空间，用来存放这个变量被赋的值。存放这个值的内存空间就是内存中的一个地址，而这个变量实际上存储的并不是被赋予的这个值，而是存放这个值所在空间的内存地址，通过这个地址，变量就可以在内存中取出数据了。所谓不可变就是说， 我们不能改变这个数据在内存中的值，所以当我们改变这个变量的赋值时，只是在内存中重新开辟了一块空间，将这一条新的数据存放在这一个新的内存地址里，而原来的那个变量就不在引用原数据的内存地址而转为引用新数据的内存地址了。</p><p>​当第一次赋值声明了一个<strong>可变数据类型</strong>的时候，同样会在内存中开辟一个空间，并且将你所赋的数据值放在这块内存中，然后将这个变量指向数据所在的内存所在位置。不同的是，可变数据类型可以对内存中的数据进行修改，并且不会导致变量引用地址的变化，但是这种修改仅限于Python中的内置方法，如果要是进行重新赋值操作的话，一样会改变变量的地址指向。而当变量重新指向了新的内存之后，之前的内存也就被自动回收了。</p><p>​<img src="/img/blog/about_python/基本数据类型1.png" style="zoom:80%;" />     </p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="1、创建列表"><a href="#1、创建列表" class="headerlink" title="1、创建列表"></a><strong>1、创建列表</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方式一</span><br>name = []<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name))  <span class="hljs-comment"># 执行结果 &gt;&gt;&gt;  &lt;class &#x27;list&#x27;&gt; </span><br><br><span class="hljs-comment"># 方式二</span><br>name = <span class="hljs-built_in">list</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name))  <span class="hljs-comment"># 执行结果 &gt;&gt;&gt;  &lt;class &#x27;list&#x27;&gt; </span><br></code></pre></td></tr></table></figure><h3 id="2、增（append，insert）"><a href="#2、增（append，insert）" class="headerlink" title="2、增（append，insert）"></a><strong>2、增（append，insert）</strong></h3><p>insert 方法用于将对象插入到列表中对应的索引位置(索引从0开始)，而append方法则用于在列表末尾追加新的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name = [<span class="hljs-string">&quot;cdc&quot;</span>,<span class="hljs-string">&quot;ctt&quot;</span>,<span class="hljs-string">&quot;cct&quot;</span>,<span class="hljs-string">&quot;ttr&quot;</span>]<br><br>name.append(<span class="hljs-string">&#x27;alex&#x27;</span>)<br>name.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;alvin&#x27;</span>)<br><span class="hljs-built_in">print</span>(name)<br><br><span class="hljs-comment"># 执行结果 &gt;&gt;&gt; [&#x27;cdc&#x27;, &#x27;ctt&#x27;, &#x27;alvin&#x27;, &#x27;cct&#x27;, &#x27;ttr&#x27;, &#x27;alex&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="3、删（remove，del，pop）"><a href="#3、删（remove，del，pop）" class="headerlink" title="3、删（remove，del，pop）"></a><strong>3、删（remove，del，pop）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">name.remove(<span class="hljs-string">&#x27;alex&#x27;</span>)   <span class="hljs-comment"># 删除列表中的&#x27;alex&#x27;元素 </span><br><br>name.remove(name[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 删除列表中索引为0的元素(即第一个元素)</span><br><br><span class="hljs-keyword">del</span> name[<span class="hljs-number">0</span>]           <span class="hljs-comment"># 删除列表中索引为0的元素(即第一个元素)</span><br> <br>value = name.pop()    <span class="hljs-comment"># 弹栈删除，会默认将列表的最后一个元素删除并返回(有返回值)　</span><br><span class="hljs-built_in">print</span>(value)<br><br><span class="hljs-keyword">del</span> name              <span class="hljs-comment"># 删除整个列表</span><br></code></pre></td></tr></table></figure><h3 id="4、改"><a href="#4、改" class="headerlink" title="4、改"></a><strong>4、改</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">names_class2 = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>]<br><br>names_class2[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;赵七&#x27;</span><br>names_class2[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] = [<span class="hljs-string">&#x27;wusir&#x27;</span>, <span class="hljs-string">&#x27;alvin&#x27;</span>]<br><span class="hljs-built_in">print</span>(names_class2)<br></code></pre></td></tr></table></figure><h3 id="5、查"><a href="#5、查" class="headerlink" title="5、查"></a><strong>5、查</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">names_class2 = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>]<br>  <br><span class="hljs-built_in">print</span>(names_class2[<span class="hljs-number">2</span>])       <span class="hljs-comment"># 查询索引为2的元素的值(即第三个元素)</span><br><span class="hljs-built_in">print</span>(names_class2[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])     <span class="hljs-comment"># 查询索引值为0-3的元素的值(左闭右开)</span><br><span class="hljs-built_in">print</span>(names_class2[<span class="hljs-number">0</span>:<span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(names_class2[-<span class="hljs-number">1</span>])      <span class="hljs-comment"># 查询倒数第一个元素的值 print(names_class2[2:3])</span><br><span class="hljs-built_in">print</span>(names_class2[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span>])   <span class="hljs-comment"># 查询索引值为0-3的元素的值,步长为1,即挨个查</span><br><span class="hljs-built_in">print</span>(names_class2[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 查询索引值为0-3的元素的值,步长为2,即隔一个查一个</span><br><span class="hljs-built_in">print</span>(names_class2[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 从后往前查</span><br><span class="hljs-built_in">print</span>(names_class2[:])       <span class="hljs-comment"># 查所有</span><br></code></pre></td></tr></table></figure><h3 id="6、其他操作"><a href="#6、其他操作" class="headerlink" title="6、其他操作"></a><strong>6、其他操作</strong></h3><h4 id="6-1-count-统计某个元素在列表中出现的次数"><a href="#6-1-count-统计某个元素在列表中出现的次数" class="headerlink" title="6.1  count  统计某个元素在列表中出现的次数"></a>6.1  count  统计某个元素在列表中出现的次数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;be&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;be&#x27;</span>].count(<span class="hljs-string">&#x27;to&#x27;</span>)  <span class="hljs-comment"># 2</span><br><br>x = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]]] <br>x.count(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 2</span><br>  <br>x.count([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h4 id="6-2-extend-在列表的末尾一次性追加另一个序列中的多个值。"><a href="#6-2-extend-在列表的末尾一次性追加另一个序列中的多个值。" class="headerlink" title="6.2 extend   在列表的末尾一次性追加另一个序列中的多个值。"></a>6.2 extend   在列表的末尾一次性追加另一个序列中的多个值。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <br>b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>] <br>a.extend(b) <br><span class="hljs-built_in">print</span>(a)   <span class="hljs-comment">#  [1, 2, 3, 4, 5, 6] </span><br></code></pre></td></tr></table></figure><p>extend 方法修改了被扩展的列表，而原始的连接操作（+）则不然，它会返回一个全新的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <br>b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>] <br>a.extend(b) <br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment">#  [1, 2, 3, 4, 5, 6]  </span><br>  <br><span class="hljs-built_in">print</span>(a + b)  <span class="hljs-comment">#  [1, 2, 3, 4, 5, 6, 4, 5, 6] </span><br><br><span class="hljs-built_in">print</span>(a)   <span class="hljs-comment">#  [1, 2, 3, 4, 5, 6] </span><br></code></pre></td></tr></table></figure><h4 id="6-3-index-从列表中找出第一个匹配项的索引位置"><a href="#6-3-index-从列表中找出第一个匹配项的索引位置" class="headerlink" title="6.3  index   从列表中找出第一个匹配项的索引位置"></a>6.3  index   从列表中找出第一个匹配项的索引位置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">names_class2 = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>]<br><br>names_class2.index(<span class="hljs-string">&#x27;李四&#x27;</span>)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h4 id="6-4-reverse-将列表中的元素反向存放。"><a href="#6-4-reverse-将列表中的元素反向存放。" class="headerlink" title="6.4  reverse 将列表中的元素反向存放。"></a>6.4  reverse 将列表中的元素反向存放。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">names_class2 = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>]<br>names_class2.reverse()<br><span class="hljs-built_in">print</span>(names_class2)  <span class="hljs-comment"># [&#x27;赵六&#x27;, &#x27;王五&#x27;, &#x27;李四&#x27;, &#x27;张三&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="6-5-sort-对列表进行排序。"><a href="#6-5-sort-对列表进行排序。" class="headerlink" title="6.5  sort 对列表进行排序。"></a>6.5  sort 对列表进行排序。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = [<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br>x.sort()   <span class="hljs-comment">#  x.sort(reverse=True) reverse参数为True表示倒序排序</span><br></code></pre></td></tr></table></figure><h4 id="6-6-拷贝"><a href="#6-6-拷贝" class="headerlink" title="6.6 拷贝"></a>6.6 拷贝</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">names = [<span class="hljs-string">&#x27;Alex&#x27;</span>, <span class="hljs-string">&#x27;Tenglan&#x27;</span>, <span class="hljs-string">&#x27;Rain&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>name_copy = names.copy()<br><span class="hljs-built_in">print</span>(name_copy)<br><br><span class="hljs-comment"># 执行结果  [&#x27;Alex&#x27;, &#x27;Tenglan&#x27;, &#x27;Rain&#x27;, &#x27;Tom&#x27;, &#x27;Amy&#x27;, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b,*c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(b)     <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(*c)   <span class="hljs-comment"># 2 3 4 5</span><br></code></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li>元组被称为只读列表，即数据可以被查询，但不能被修改，所以，列表的切片操作同样适用于元组。</li><li>元组写在小括号(<strong>()</strong>)里，元素之间用逗号隔开。</li><li>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</li><li>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = ()    <span class="hljs-comment"># 空元组</span><br>tup2 = (<span class="hljs-number">20</span>,) <span class="hljs-comment"># 一个元素，需要在元素后添加逗号</span><br>name = (<span class="hljs-string">&#x27;cdc&#x27;</span>,<span class="hljs-string">&#x27;ctt&#x27;</span>,<span class="hljs-string">&#x27;tr&#x27;</span>)<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>​字典是 Python 中唯一的映射类型，采用键值对（key-value）的形式存储数据。Python 对 key 进行哈希函数运算，根据计算的结果决定 value 的存储地址，所以字典是无序存储的，且 key 必须是可哈希的。可哈希表示 key 必须是不可变类型，如：数字、字符串、元组。</p><p>​字典(dictionary)是除列表意外python之中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><h3 id="1、创建字典"><a href="#1、创建字典" class="headerlink" title="1、创建字典"></a><strong>1、创建字典</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dic1=&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;alex&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">36</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;  <span class="hljs-comment"># 推荐使用</span><br>dic2=<span class="hljs-built_in">dict</span>(((<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;alex&#x27;</span>),))<br><br><span class="hljs-built_in">print</span>(dic1)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;alex&#x27;, &#x27;age&#x27;: 36, &#x27;sex&#x27;: &#x27;male&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(dic2)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;alex&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2、增"><a href="#2、增" class="headerlink" title="2、增"></a><strong>2、增</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">dic3=&#123;&#125;<br>  <br>dic3[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-string">&#x27;alex&#x27;</span><br>dic3[<span class="hljs-string">&#x27;age&#x27;</span>]=<span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(dic3)     <span class="hljs-comment">#  &#123;&#x27;name&#x27;: &#x27;alex&#x27;, &#x27;age&#x27;: 18&#125;</span><br><br><span class="hljs-comment"># 如果键已存在，不改变键原来的值</span><br>a=dic3.setdefault(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;yuan&#x27;</span>)<br>b=dic3.setdefault(<span class="hljs-string">&#x27;ages&#x27;</span>,<span class="hljs-number">22</span>)<br><span class="hljs-built_in">print</span>(a,b)  <span class="hljs-comment"># alex 22</span><br><span class="hljs-built_in">print</span>(dic3)  <span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;alex&#x27;, &#x27;age&#x27;: 18, &#x27;ages&#x27;: 22&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3、查"><a href="#3、查" class="headerlink" title="3、查"></a><strong>3、查</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">dic3=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;alex&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br> <br><span class="hljs-comment"># print(dic3[&#x27;name&#x27;])  # alex</span><br><span class="hljs-comment"># print(dic3[&#x27;names&#x27;])  # KeyError: &#x27;names&#x27;</span><br><br><span class="hljs-comment"># get 方法取值，如果获取不到，就是用设置的默认值</span><br><span class="hljs-built_in">print</span>(dic3.get(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-number">20</span>))  <span class="hljs-comment"># 18</span><br><span class="hljs-built_in">print</span>(dic3.get(<span class="hljs-string">&#x27;ages&#x27;</span>,<span class="hljs-number">20</span>))  <span class="hljs-comment"># 20</span><br><br><span class="hljs-built_in">print</span>(dic3.items())  <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;alex&#x27;), (&#x27;age&#x27;, 18)])</span><br><span class="hljs-built_in">print</span>(dic3.keys())  <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])</span><br><span class="hljs-built_in">print</span>(dic3.values())  <span class="hljs-comment"># dict_values([&#x27;alex&#x27;, 18])</span><br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> dic3)  <span class="hljs-comment"># py2: dic3.has_key(&#x27;name&#x27;),py3 废弃</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(dic3.values()))  <span class="hljs-comment"># [&#x27;alex&#x27;, 18]</span><br></code></pre></td></tr></table></figure><h3 id="4、改-1"><a href="#4、改-1" class="headerlink" title="4、改"></a><strong>4、改</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">dic3=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;alex&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br> <br>dic3[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-string">&#x27;alvin&#x27;</span><br>dic4=&#123;<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;hobby&#x27;</span>:<span class="hljs-string">&#x27;girl&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">36</span>&#125;<br>dic3.update(dic4)<br><span class="hljs-built_in">print</span>(dic3)<br></code></pre></td></tr></table></figure><h3 id="5、删"><a href="#5、删" class="headerlink" title="5、删"></a><strong>5、删</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">dic4=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;alex&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>,<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-number">1</span>&#125;<br> <br><span class="hljs-comment"># dic4.clear()</span><br><span class="hljs-comment"># print(dic4)</span><br><span class="hljs-keyword">del</span> dic4[<span class="hljs-string">&#x27;name&#x27;</span>]<br><span class="hljs-built_in">print</span>(dic4)<br><br>a=dic4.popitem()<br><span class="hljs-built_in">print</span>(a,dic4)<br> <br><span class="hljs-comment"># print(dic4.pop(&#x27;age&#x27;))</span><br><span class="hljs-comment"># print(dic4)</span><br> <br><span class="hljs-comment"># del dic4</span><br><span class="hljs-comment"># print(dic4)</span><br></code></pre></td></tr></table></figure><h3 id="6、其他方法"><a href="#6、其他方法" class="headerlink" title="6、其他方法"></a><strong>6、其他方法</strong></h3><h4 id="6-1-dict-fromkeys"><a href="#6-1-dict-fromkeys" class="headerlink" title="6.1 dict.fromkeys"></a>6.1 dict.fromkeys</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 相当于初始化，将所有键都赋同样的值</span><br>d1=<span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&#x27;host1&#x27;</span>,<span class="hljs-string">&#x27;host2&#x27;</span>,<span class="hljs-string">&#x27;host3&#x27;</span>],<span class="hljs-string">&#x27;Mac&#x27;</span>)<br><span class="hljs-built_in">print</span>(d1)<br><br>d1[<span class="hljs-string">&#x27;host1&#x27;</span>]=<span class="hljs-string">&#x27;xiaomi&#x27;</span><br><span class="hljs-built_in">print</span>(d1)<br> <br>d2=<span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&#x27;host1&#x27;</span>,<span class="hljs-string">&#x27;host2&#x27;</span>,<span class="hljs-string">&#x27;host3&#x27;</span>],[<span class="hljs-string">&#x27;Mac&#x27;</span>,<span class="hljs-string">&#x27;huawei&#x27;</span>])<br><span class="hljs-built_in">print</span>(d2)<br>d2[<span class="hljs-string">&#x27;host1&#x27;</span>][<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;xiaomi&#x27;</span><br><span class="hljs-built_in">print</span>(d2)<br></code></pre></td></tr></table></figure><h4 id="6-2-d-copy-对字典-d-进行浅复制，返回一个和d有相同键值对的新字典"><a href="#6-2-d-copy-对字典-d-进行浅复制，返回一个和d有相同键值对的新字典" class="headerlink" title="6.2  d.copy() 对字典 d 进行浅复制，返回一个和d有相同键值对的新字典"></a>6.2  d.copy() 对字典 d 进行浅复制，返回一个和d有相同键值对的新字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;cdc&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;<br>c = d.copy()<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h4 id="6-3-字典的嵌套"><a href="#6-3-字典的嵌套" class="headerlink" title="6.3  字典的嵌套"></a>6.3  字典的嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic=&#123;<span class="hljs-string">&#x27;zhangsan&#x27;</span>:&#123;<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;,<br>      <span class="hljs-string">&#x27;李四&#x27;</span>:&#123;<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">33</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;male&#x27;</span>&#125;,<br>      <span class="hljs-string">&#x27;wangwu&#x27;</span>:&#123;<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">27</span>,<span class="hljs-string">&#x27;sex&#x27;</span>:<span class="hljs-string">&#x27;women&#x27;</span>&#125;<br>     &#125;<br></code></pre></td></tr></table></figure><h4 id="6-4-sorted-dict-返回一个有序的包含字典所有key的列表"><a href="#6-4-sorted-dict-返回一个有序的包含字典所有key的列表" class="headerlink" title="6.4 sorted(dict) : 返回一个有序的包含字典所有key的列表"></a>6.4 sorted(dict) : 返回一个有序的包含字典所有key的列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dic4 = &#123;<span class="hljs-number">5</span>:<span class="hljs-string">&quot;555&quot;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&quot;666&quot;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&quot;444&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(dic4)) <span class="hljs-comment">#根据键值来排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(dic4.values())) <span class="hljs-comment">#根据值来排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(dic4.items())) <span class="hljs-comment">#根据键值对来排序（按照键大小）</span><br></code></pre></td></tr></table></figure><h4 id="6-5-字典的遍历"><a href="#6-5-字典的遍历" class="headerlink" title="6.5 字典的遍历"></a>6.5 字典的遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">dic5 = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;cdc&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">22</span>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic5:<br><span class="hljs-built_in">print</span>(i,dic5[i])        <span class="hljs-comment">#效率较高</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic5.items():      <span class="hljs-comment">#效率较低</span><br>     <span class="hljs-built_in">print</span>(i)<br> <br> <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> dic5.items():<br>     <span class="hljs-built_in">print</span>(i,v)<br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合是一个无序的，不重复的数据组合，它的主要作用如下：</p><ul><li>去重，把一个列表变成集合，就自动去重了</li><li>关系测试，测试两组数据之前的交集、差集、并集等关系</li><li>把不同的元素组成一起形成集合，是python基本的数据类型。</li></ul><p>集合元素(set elements):组成集合的成员(不可重复)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">li=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br>s =<span class="hljs-built_in">set</span>(li)<br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;1, 2, &#x27;a&#x27;, &#x27;b&#x27;&#125;</span><br> <br>li2=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>]<br>s=<span class="hljs-built_in">set</span>(li2)<br><span class="hljs-built_in">print</span>(s)  <span class="hljs-comment">#&#123;1, 2, &#x27;a&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>集合对象是一组无序排列的可哈希的值：集合成员可以做字典的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">li=[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br>s =<span class="hljs-built_in">set</span>(li) <span class="hljs-comment">#TypeError: unhashable type: &#x27;list&#x27;</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>集合分类：可变集合、不可变集合</p><p>可变集合(set)：可添加和删除元素，非可哈希的，不能用作字典的键，也不能做其他集合的元素</p><p>不可变集合(frozenset)：与上面相反</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">li=[<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br>s =<span class="hljs-built_in">set</span>(li)<br>dic=&#123;s:<span class="hljs-string">&#x27;123&#x27;</span>&#125; <span class="hljs-comment">#TypeError: unhashable type: &#x27;set&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="1、创建集合"><a href="#1、创建集合" class="headerlink" title="1、创建集合"></a><strong>1、创建集合</strong></h3><p>   由于集合没有自己的语法格式，只能通过集合的工厂方法set()和frozenset()创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br>  <br>s2= <span class="hljs-built_in">frozenset</span>(<span class="hljs-string">&#x27;yuan&#x27;</span>)<br> <br><span class="hljs-built_in">print</span>(s1,<span class="hljs-built_in">type</span>(s1))  <span class="hljs-comment"># &#123;&#x27;l&#x27;, &#x27;v&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;n&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(s2,<span class="hljs-built_in">type</span>(s2))  <span class="hljs-comment"># frozenset(&#123;&#x27;n&#x27;, &#x27;y&#x27;, &#x27;a&#x27;, &#x27;u&#x27;&#125;) &lt;class &#x27;frozenset&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、访问集合"><a href="#2、访问集合" class="headerlink" title="2、访问集合"></a><strong>2、访问集合</strong></h3><p>由于集合本身是无序的，所以不能为集合创建索引或切片操作，只能循环遍历或使用in、not in来访问或判断集合元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> s1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">in</span> s1)<br><span class="hljs-comment">#s1[1]  #TypeError: &#x27;set&#x27; object does not support indexing</span><br>   <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s1:<br>    <span class="hljs-built_in">print</span>(i)<br> <br><span class="hljs-comment"># True</span><br><span class="hljs-comment"># False</span><br><span class="hljs-comment"># v</span><br><span class="hljs-comment"># n</span><br><span class="hljs-comment"># l</span><br><span class="hljs-comment"># i</span><br><span class="hljs-comment"># a</span><br></code></pre></td></tr></table></figure><h3 id="3、更新集合"><a href="#3、更新集合" class="headerlink" title="3、更新集合"></a><strong>3、更新集合</strong></h3><p>可使用以下内建方法来更新：</p><ul><li>s.add()</li><li>s.update()</li><li>s.remove()</li></ul><p>注意：只有可变集合才能更新：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># s1 = frozenset(&#x27;alvin&#x27;)</span><br><span class="hljs-comment"># s1.add(0)  #AttributeError: &#x27;frozenset&#x27; object has no attribute &#x27;add&#x27;</span><br>  <br>s2=<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br>s2.add(<span class="hljs-string">&#x27;mm&#x27;</span>)<br><span class="hljs-built_in">print</span>(s2)  <span class="hljs-comment">#&#123;&#x27;mm&#x27;, &#x27;l&#x27;, &#x27;n&#x27;, &#x27;a&#x27;, &#x27;i&#x27;, &#x27;v&#x27;&#125;</span><br>  <br>s2.update(<span class="hljs-string">&#x27;HO&#x27;</span>)<span class="hljs-comment">#添加多个元素</span><br><span class="hljs-built_in">print</span>(s2)  <span class="hljs-comment">#&#123;&#x27;mm&#x27;, &#x27;l&#x27;, &#x27;n&#x27;, &#x27;a&#x27;, &#x27;i&#x27;, &#x27;H&#x27;, &#x27;O&#x27;, &#x27;v&#x27;&#125;</span><br><br>s2.remove(<span class="hljs-string">&#x27;l&#x27;</span>)<br><span class="hljs-built_in">print</span>(s2)  <span class="hljs-comment">#&#123;&#x27;mm&#x27;, &#x27;n&#x27;, &#x27;a&#x27;, &#x27;i&#x27;, &#x27;H&#x27;, &#x27;O&#x27;, &#x27;v&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4、del：删除集合本身"><a href="#4、del：删除集合本身" class="headerlink" title="4、del：删除集合本身"></a><strong>4、del：删除集合本身</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">del</span> s1<br><span class="hljs-built_in">print</span>(s1)  <span class="hljs-comment"># NameError: name &#x27;s1&#x27; is not defined</span><br></code></pre></td></tr></table></figure><h3 id="5、集合类型操作符"><a href="#5、集合类型操作符" class="headerlink" title="5、集合类型操作符"></a><strong>5、集合类型操作符</strong></h3><ul><li><strong>in ，not in</strong></li><li><strong>集合等价与不等价（&#x3D;&#x3D; ，!&#x3D;）</strong></li><li><strong>子集、超集</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvinyuan&#x27;</span>)<br>s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;v&#x27;</span> <span class="hljs-keyword">in</span> s)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s1 &lt; s)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>联合（|）</strong></p><p> 联合(union)操作与集合的or操作其实等价的，联合符号有个等价的方法，union()。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br>s2 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;yuan&#x27;</span>)<br>s3 = s1|s2<br><span class="hljs-built_in">print</span>(s3)  <span class="hljs-comment"># &#123;&#x27;a&#x27;, &#x27;l&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;y&#x27;, &#x27;v&#x27;, &#x27;u&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(s1.union(s2)) <span class="hljs-comment"># &#123;&#x27;a&#x27;, &#x27;l&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;y&#x27;, &#x27;v&#x27;, &#x27;u&#x27;&#125;　</span><br></code></pre></td></tr></table></figure><ul><li><strong>交集（&amp;）</strong></li></ul><p>与集合and等价，交集符号的等价方法是intersection()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br>s2 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;yuan&#x27;</span>)<br>s3 = s1 &amp; s2<br><span class="hljs-built_in">print</span>(s3)  <span class="hljs-comment"># &#123;&#x27;n&#x27;, &#x27;a&#x27;&#125;</span><br> <br><span class="hljs-built_in">print</span>(s1.intersection(s2)) <span class="hljs-comment"># &#123;&#x27;n&#x27;, &#x27;a&#x27;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>差集（-）</strong></li></ul><p>等价方法是difference()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br>s2 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;yuan&#x27;</span>)<br>s3 = s1 - s2<br><span class="hljs-built_in">print</span>(s3)  <span class="hljs-comment"># &#123;&#x27;v&#x27;, &#x27;i&#x27;, &#x27;l&#x27;&#125;</span><br> <br><span class="hljs-built_in">print</span>(s1.difference(s2)) <span class="hljs-comment"># &#123;&#x27;v&#x27;, &#x27;i&#x27;, &#x27;l&#x27;&#125;　</span><br></code></pre></td></tr></table></figure><ul><li><strong>对称差集（^）</strong></li></ul><p>对称差分是集合的XOR(‘异或’)，取得的元素属于 s1，s2 但不同时属于 s1 和 s2 。其等价方法symmetric_difference()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alvin&#x27;</span>)<br>s2 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;yuan&#x27;</span>)<br>s3 = s1 ^ s2<br><span class="hljs-built_in">print</span>(s3)  <span class="hljs-comment">#&#123;&#x27;l&#x27;, &#x27;v&#x27;, &#x27;y&#x27;, &#x27;u&#x27;, &#x27;i&#x27;&#125;</span><br> <br><span class="hljs-built_in">print</span>(s1.symmetric_difference(s2)) <span class="hljs-comment">#&#123;&#x27;l&#x27;, &#x27;v&#x27;, &#x27;y&#x27;, &#x27;u&#x27;, &#x27;i&#x27;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>应用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最简单的去重方式</span><br>lis = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(lis))    <span class="hljs-comment">#[1, 2, 3, 4]</span><br><br><span class="hljs-comment"># 难度升级，列表去重后保持原来的顺序</span><br>original_lis = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>lis = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(original_lis))<br><span class="hljs-built_in">print</span>(lis)  <span class="hljs-comment"># [1, 2, 3, 5]</span><br><br>lis.sort(key=<span class="hljs-keyword">lambda</span> x: original_lis.index(x))<br><span class="hljs-built_in">print</span>(lis)  <span class="hljs-comment"># [1, 2, 5, 3]</span><br></code></pre></td></tr></table></figure><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><p>​Python中，对象的赋值、拷贝（深&#x2F;浅拷贝）之间是有差异的，其实这个是由于共享内存导致的结果。拷贝原则上就是把数据分离出来，复制其数据，并以后修改互不影响。</p><ul><li><strong>普通赋值，数据完全共享</strong></li></ul><p>​        赋值是在内存中指向同一个对象，如果是<code>可变类型</code>，比如列表，修改其中一个，另一个必定改变，如果是<code>不可变类型</code>，比如字符串，修改了其中一个，另一个并不会变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">lis_1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-number">4</span>]<br>lis_2 = lis_1<br><br>lis_1[<span class="hljs-number">0</span>] = <span class="hljs-number">1111</span><br>lis_1[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;bbbbb&quot;</span><br><br><span class="hljs-built_in">print</span>(lis_1)  <span class="hljs-comment"># [1111, 2, [&#x27;a&#x27;, &#x27;bbbbb&#x27;, &#x27;c&#x27;], 4]</span><br><span class="hljs-built_in">print</span>(lis_2)  <span class="hljs-comment"># [1111, 2, [&#x27;a&#x27;, &#x27;bbbbb&#x27;, &#x27;c&#x27;], 4]</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>浅拷贝，数据半共享</strong></p><p>复制其数据独立内存存放，但是只拷贝成功第一层，即最里面一层。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>lis_1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-number">4</span>]<br>lis_3 = copy.copy(lis_1)<br><br>lis_1[<span class="hljs-number">0</span>] = <span class="hljs-number">1111</span><br>lis_1[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;bbbbb&quot;</span><br><br><span class="hljs-built_in">print</span>(lis_1)  <span class="hljs-comment"># [1111, 2, [&#x27;a&#x27;, &#x27;bbbbb&#x27;, &#x27;c&#x27;], 4]</span><br><span class="hljs-built_in">print</span>(lis_3)  <span class="hljs-comment"># [1, 2, [&#x27;a&#x27;, &#x27;bbbbb&#x27;, &#x27;c&#x27;], 4]</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>深拷贝，数据完全不共享</strong></p><p>复制其数据完完全全放独立的一个内存，完全拷贝，数据不共享</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><br>lis_1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-number">4</span>]<br>lis_4 = copy.deepcopy(lis_1)<br><br>lis_1[<span class="hljs-number">0</span>] = <span class="hljs-number">1111</span><br>lis_1[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;bbbbb&quot;</span><br><br><span class="hljs-built_in">print</span>(lis_1)  <span class="hljs-comment"># [1111, 2, [&#x27;a&#x27;, &#x27;bbbbb&#x27;, &#x27;c&#x27;], 4]</span><br><span class="hljs-built_in">print</span>(lis_4)  <span class="hljs-comment"># [1, 2, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 4]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 初识</title>
    <link href="/2019/03/15/0002-python%E5%88%9D%E8%AF%86/"/>
    <url>/2019/03/15/0002-python%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、入门基础"><a href="#一、入门基础" class="headerlink" title="一、入门基础"></a>一、入门基础</h2><h3 id="1-第一个Python程序"><a href="#1-第一个Python程序" class="headerlink" title="1. 第一个Python程序"></a><strong>1. 第一个Python程序</strong></h3><p>python 代码都是编写在以 <code>.py</code> 结尾的文件中。我们随便新建一个文件，并将文件后缀名改为 <code>.py</code>，在里面编写我们的第一个 python 脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># print函数用于输出指定的内容</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure><p>介绍以下两种方式执行脚本：</p><ul><li>方式一，从终端进入存放代码脚本的目录，执行 <code>python 文件名.py</code> 即可。例如，我们将上述代码写在一个名为 <code>demo.py</code> 的文件中，且该文件存储在 F 盘，那么我们想要执行该脚本就得这样做：</li></ul><p><img src="/img/blog/about_python/00024.png">  </p><ul><li>方式二，通过 IDE 执行代码</li></ul><img src="/img/blog/about_python/00025.png" style="zoom:50%;" />   <h3 id="2-语法格式"><a href="#2-语法格式" class="headerlink" title="2. 语法格式"></a>2. 语法格式</h3><h4 id="2-1-缩进和换行"><a href="#2-1-缩进和换行" class="headerlink" title="2.1  缩进和换行"></a>2.1  缩进和换行</h4><p>python 中是用缩进和换行来判断一行语句是否结束的（类似 Java 中的 <code>&#123;&#125; </code> 来包含代码，标识代码的结束）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 缩进用于判断一行是否结束</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 错误实例</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-number">3</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>缩进没有明确规定多少个空格表示，实际上只要整个代码中的缩进保持一致，代码就能正常运行。但一般约定俗成的都用4个空格表示缩进。</p><h4 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释单行</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">注释多行</span><br><span class="hljs-string">注释多行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">注释多行</span><br><span class="hljs-string">注释多行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>**补充：**在 python 中 <code>单引号</code> 和 <code>双引号</code> 本质上没有区别，但都必须成对使用。在某些特殊情况下可以混合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 必须成对使用</span><br><span class="hljs-string">&quot;abcdefg&quot;</span> ---&gt; 合法<br><br><span class="hljs-string">&#x27;abcdefg&#x27;</span> ---&gt; 合法<br><br><span class="hljs-string">&quot;abcdefg&#x27; ---&gt; 非法</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 混合使用示例</span><br><span class="hljs-string">&quot;</span>He<span class="hljs-string">&#x27;s my good friend&quot;  ---&gt; 合法</span><br><span class="hljs-string">&#x27;</span>He<span class="hljs-string">&#x27;s my good friend&#x27;</span>  ---&gt; 非法<br></code></pre></td></tr></table></figure><h3 id="3、常量和变量"><a href="#3、常量和变量" class="headerlink" title="3、常量和变量"></a><strong>3、常量和变量</strong></h3><h4 id="3-1-变量简介及作用"><a href="#3-1-变量简介及作用" class="headerlink" title="3.1 变量简介及作用"></a><strong>3.1 变量简介及作用</strong></h4><p>变量是程序运行过程中产生的中间值，暂时存储在内存中，变量指向的是数据存储在内存中的地址，供后面的程序使用。在 python 中变量使用前可以不声明，但是一定要赋值。</p><p>怎么样？是不是又没有看懂？其实我们可以这么理解，计算机中每一个数据都会有一块对应的内存来存储它，我们想去取出并操作这些数据，肯定就得知道这些数据存在哪，就好比我想去你家蹭饭，我得先找到你家在哪，所以我就得知道你家的详细地址，这个地址对于存储数据的内存空间而言，就是内存地址。如果我的朋友比较多，我可以每天换着人蹭饭，那我就需要记住很多家庭住址，可是时间长了可能就分不清每一家分别是谁了，所以我可以给每个家庭住址做个标记，比如 <code>小明家：xxx省xxx市xxx区xxx小区</code>，这个 “小明家” 就可以理解为是一个变量名，我只需要知道变量就能分清并且找到对应的蹭饭地点啦。其实这也侧面体现出了变量的作用<strong>就是方便了编程时对内存空间的操作，不用通过记住内存地址才能去操作对应的内存空间</strong>。</p><p>​                                              <img src="/img/blog/about_python/00026.png" style="zoom:80%;" />  </p><p>我们再看一个实际的示例，首先变量 a 指向 10 的存储地址，那么以后在查找数据10 的时候，实际上时先通过变量 a 找到 10 存储的内存地址，再从对应的地址中把 10 取出来操作。接着把 a 赋值给 b，那么 b 也指向了 10 存储的内存地址，当把 b 指向的内容改变后，b 所指向的地址也会随之发生改变，相当于小明搬家了，那么肯定对应的家庭地址就和原来不一样了。</p><p>​                                  <img src="/img/blog/about_python/00027.png" style="zoom: 67%;" />  </p><h4 id="3-2-变量的命名规则"><a href="#3-2-变量的命名规则" class="headerlink" title="3.2 变量的命名规则"></a><strong>3.2 变量的命名规则</strong></h4><ul><li>由字母，下划线，数字组合搭配而成</li><li>不能以数字开头或者变量名为全数字</li><li>不能用 python 的关键字</li><li>不能是中文（可以用中文但最好别用）</li><li>名字要有意义，不要太长，可以用单词拼接表达意义</li><li>变量名区分大小写</li><li>推荐驼峰式命名或者下划线方式命名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 变量</span><br>a = <span class="hljs-number">123</span><br><span class="hljs-comment"># print(a)  # 123</span><br><br><span class="hljs-comment"># 驼峰式命名</span><br>MyName = <span class="hljs-string">&quot;cdc&quot;</span><br><br><span class="hljs-comment"># 下划线方式命名(蛇形命名)</span><br>my_name = <span class="hljs-string">&quot;cdc&quot;</span><br><br>__ = <span class="hljs-string">&quot;cdc&quot;</span><br><span class="hljs-comment"># print(__)   # cdc</span><br><br>a = <span class="hljs-number">10</span><br>b = a<br>a = <span class="hljs-number">5</span><br><span class="hljs-comment"># print(a)  # 5</span><br><span class="hljs-comment"># print(b)  # 10</span><br></code></pre></td></tr></table></figure><h4 id="3-3-变量的数据类型"><a href="#3-3-变量的数据类型" class="headerlink" title="3.3 变量的数据类型"></a>3.3 变量的数据类型</h4><p>在 python 中可以使用内置函数<code>type()</code> 来查看变量的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;aaaa&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s))  <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br>n = <span class="hljs-number">123</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))  <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-常量"><a href="#3-4-常量" class="headerlink" title="3.4 常量"></a><strong>3.4 常量</strong></h4><p>常量通常指不可变的量，一般是全局变量，即程序中所有的模块都能使用。在 python 不存在绝对的常量，因为 python 中常量的值也是可以改变的 (说白了 python 中的常量其实本质上还是一个变量) ，为了方便区分，一般常量所有的字母都大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">PI = <span class="hljs-number">3.141526</span><br></code></pre></td></tr></table></figure><h2 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h2><h3 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1. 数字类型"></a><strong>1. 数字类型</strong></h3><h4 id="1-1-数字类型简介"><a href="#1-1-数字类型简介" class="headerlink" title="1.1 数字类型简介"></a>1.1 数字类型简介</h4><p>python 中的数字类型主要分为 <code>整型(int)</code> 和 <code>浮点型(float)</code> ，其中整数在 32位 的操作系统上的，整型的表数范围为  -2**31～2**31-1，即 -2147483648～2147483647，在 64位 的操作系统上的，整型的表数范围为 -2**63～2**63-1，即 -9223372036854775808～9223372036854775807 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数字类型</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">666</span><br>c = <span class="hljs-number">3.1415926</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))  <span class="hljs-comment"># 10 &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(b, <span class="hljs-built_in">type</span>(b))  <span class="hljs-comment"># 666 &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(c, <span class="hljs-built_in">type</span>(c))  <span class="hljs-comment"># 3.1415926 &lt;class &#x27;float&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-数字类型之间的转换"><a href="#1-2-数字类型之间的转换" class="headerlink" title="1.2 数字类型之间的转换"></a><strong>1.2 数字类型之间的转换</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数字类型转换</span><br>var1 = <span class="hljs-number">3.14</span><br>var2 = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 浮点型转整型</span><br>var3 = <span class="hljs-built_in">int</span>(var1)<br><span class="hljs-built_in">print</span>(var3, <span class="hljs-built_in">type</span>(var3))  <span class="hljs-comment"># 3 &lt;class &#x27;int&#x27;&gt;</span><br><br><span class="hljs-comment"># 整型转浮点型</span><br>var4 = <span class="hljs-built_in">float</span>(var2)<br><span class="hljs-built_in">print</span>(var4, <span class="hljs-built_in">type</span>(var4))  <span class="hljs-comment"># 5.0 &lt;class &#x27;float&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-3-python-常用内置数学方法"><a href="#1-3-python-常用内置数学方法" class="headerlink" title="1.3 python 常用内置数学方法"></a><strong>1.3 python 常用内置数学方法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># math模块是 内置的一个第三方模块，包含了很多数学计算相关的方法</span><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-comment"># 返回数字的上入整数</span><br>res = math.ceil(<span class="hljs-number">4.1</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 5</span><br><br><span class="hljs-comment"># 返回e的x次幂(ex)</span><br>res = math.exp(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 2.718281828459045</span><br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment"># 返回数字的绝对值</span><br>res = math.fabs(-<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 10.0</span><br><br><span class="hljs-comment"># 返回数字的下舍整数</span><br>res = math.floor(<span class="hljs-number">4.9</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># 计算对数</span><br>res = math.log(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 2.0</span><br><br><span class="hljs-comment"># 计算以10为基数的x的对数</span><br>res = math.log10(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 2.0</span><br><br><span class="hljs-comment"># 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示</span><br>res = math.modf(<span class="hljs-number">3.14</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># (0.14000000000000012, 3.0)</span><br><br><span class="hljs-comment"># 返回数字x的平方根</span><br>res = math.sqrt(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 2.0</span><br><br><span class="hljs-comment"># 返回数字的绝对值</span><br>res = <span class="hljs-built_in">abs</span>(-<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 10</span><br><br><span class="hljs-comment"># 返回给定参数的最大值，参数可以为序列。</span><br>res = <span class="hljs-built_in">max</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 10</span><br><br><span class="hljs-comment"># 返回给定参数的最小值，参数可以为序列。</span><br>res = <span class="hljs-built_in">min</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 5</span><br><br><span class="hljs-comment"># x**y 运算后的值。</span><br>res = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 8</span><br><br><span class="hljs-comment"># 返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</span><br><span class="hljs-comment"># round(x [,n])</span><br>res = <span class="hljs-built_in">round</span>(<span class="hljs-number">3.14658</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 3.15</span><br><br><span class="hljs-comment"># 计算两个数值之间的商和余数</span><br>res = <span class="hljs-built_in">divmod</span>(<span class="hljs-number">7</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># (2, 1)</span><br></code></pre></td></tr></table></figure><h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a><strong>2. 字符串</strong></h3><h4 id="2-1-创建字符串"><a href="#2-1-创建字符串" class="headerlink" title="2.1 创建字符串"></a><strong>2.1 创建字符串</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建字符串</span><br><span class="hljs-comment"># 单行字符串，单双引号都可以使用</span><br>var1 = <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>var2 = <span class="hljs-string">&quot;Python RAlvin&quot;</span><br><br><span class="hljs-comment"># 多行字符串，三层引号包裹，单双引号都可以使用</span><br>var3 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">aaa</span><br><span class="hljs-string">bbb</span><br><span class="hljs-string">ccc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>var4 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">aaa</span><br><span class="hljs-string">bbb</span><br><span class="hljs-string">ccc</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(var1, <span class="hljs-built_in">type</span>(var1))<br><span class="hljs-built_in">print</span>(var3, <span class="hljs-built_in">type</span>(var3))<br></code></pre></td></tr></table></figure><h4 id="2-2-字符串常用方法"><a href="#2-2-字符串常用方法" class="headerlink" title="2.2 字符串常用方法"></a><strong>2.2 字符串常用方法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 * 重复输出字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span> * <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 2 [] ,[:] 通过索引获取字符串中字符,这里和列表的切片操作是相同的,具体内容见列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;helloworld&#x27;</span>[<span class="hljs-number">2</span>:])<br><br><span class="hljs-comment"># 3 in 成员运算符 如果字符串中包含给定的字符返回 True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;el&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment"># 4 % 格式化输出字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my name is %s&#x27;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my name is %s and I&#x27;m %d years old&quot;</span> % (name, age))<br><br><span class="hljs-comment"># 5 + 字符串拼接</span><br>a = <span class="hljs-string">&#x27;123&#x27;</span><br>b = <span class="hljs-string">&#x27;abc&#x27;</span><br>c = <span class="hljs-string">&#x27;789&#x27;</span><br>d1 = a + b + c<br><span class="hljs-built_in">print</span>(d1)<br><br><span class="hljs-comment"># + 效率低,建议使用join</span><br>d2 = <span class="hljs-string">&#x27;&#x27;</span>.join([a, b, c])<br><span class="hljs-built_in">print</span>(d2)<br></code></pre></td></tr></table></figure><h4 id="2-3-其余字符串内置方法"><a href="#2-3-其余字符串内置方法" class="headerlink" title="2.3 其余字符串内置方法"></a><strong>2.3 其余字符串内置方法</strong></h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xquery">string.capitalize()                                  把字符串的第一个字符大写<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.center(width)                                 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span><span class="hljs-built_in">.count</span>(str, beg=<span class="hljs-number">0</span>, <span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>))            返回 str 在<span class="hljs-built_in"> string</span> 里面出现的次数，如果 beg 或者 <span class="hljs-keyword">end</span> 指定则返回指定范围内 str 出现的次数<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.decode(encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>, errors=<span class="hljs-string">&#x27;strict&#x27;</span>)     以 encoding 指定的编码格式解码<span class="hljs-built_in"> string</span>，如果出错默认报一个 ValueError 的 异 常 ， 除 非 errors 指 定 的 是 <span class="hljs-string">&#x27;ignore&#x27;</span> 或 者<span class="hljs-string">&#x27;replace&#x27;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.encode(encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>, errors=<span class="hljs-string">&#x27;strict&#x27;</span>)     以 encoding 指定的编码格式编码<span class="hljs-built_in"> string</span>，如果出错默认报一个ValueError 的异常，除非 errors 指定的是<span class="hljs-string">&#x27;ignore&#x27;</span>或者<span class="hljs-string">&#x27;replace&#x27;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.endswith(obj, beg=<span class="hljs-number">0</span>, <span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>))         检查字符串是否以 obj 结束，如果beg 或者 <span class="hljs-keyword">end</span> 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.expandtabs(tabsize=<span class="hljs-number">8</span>)                         把字符串<span class="hljs-built_in"> string</span> 中的 tab 符号转为空格，tab 符号默认的空格数是 <span class="hljs-number">8</span>。<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.find(str, beg=<span class="hljs-number">0</span>, <span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>))             检测 str 是否包含在<span class="hljs-built_in"> string</span> 中，如果 beg 和 <span class="hljs-keyword">end</span> 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-<span class="hljs-number">1</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.index(str, beg=<span class="hljs-number">0</span>, <span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>))            跟find()方法一样，只不过如果str不在<span class="hljs-built_in"> string</span>中会报一个异常.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isalnum()                                     如果<span class="hljs-built_in"> string</span> 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isalpha()                                     如果<span class="hljs-built_in"> string</span> 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isdecimal()                                   如果<span class="hljs-built_in"> string</span> 只包含十进制数字则返回 True 否则返回 False.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isdigit()                                     如果<span class="hljs-built_in"> string</span> 只包含数字则返回 True 否则返回 False.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.islower()                                     如果<span class="hljs-built_in"> string</span> 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isnumeric()                                   如果<span class="hljs-built_in"> string</span> 中只包含数字字符，则返回 True，否则返回 False<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isspace()                                     如果<span class="hljs-built_in"> string</span> 中只包含空格，则返回 True，否则返回 False.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.istitle()                                     如果<span class="hljs-built_in"> string</span> 是标题化的(见 title())则返回 True，否则返回 False<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.isupper()                                     如果<span class="hljs-built_in"> string</span> 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.join(seq)                                     以<span class="hljs-built_in"> string</span> 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.ljust(width)                                  返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.lower()                                       转换<span class="hljs-built_in"> string</span> 中所有大写字符为小写.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.lstrip()                                      截掉<span class="hljs-built_in"> string</span> 左边的空格<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.maketrans(intab, outtab])                     maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。<span class="hljs-built_in"></span><br><span class="hljs-built_in">max</span>(str)                                             返回字符串 str 中最大的字母。<span class="hljs-built_in"></span><br><span class="hljs-built_in">min</span>(str)                                             返回字符串 str 中最小的字母。<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.partition(str)                                有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串<span class="hljs-built_in"> string</span> 分 成 一 个 <span class="hljs-number">3</span> 元 素 的 元 组 (string_pre_str,str,string_post_str),如果<span class="hljs-built_in"> string</span> 中不包含str 则 string_pre_str ==<span class="hljs-built_in"> string</span>.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span><span class="hljs-built_in">.replace</span>(str1, str2,  num<span class="hljs-built_in">=string</span><span class="hljs-built_in">.count</span>(str1))  把<span class="hljs-built_in"> string</span> 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.rfind(str, beg=<span class="hljs-number">0</span>,<span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>) )            类似于 find()函数，不过是从右边开始查找.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.rindex( str, beg=<span class="hljs-number">0</span>,<span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>))           类似于 index()，不过是从右边开始.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.rjust(width)                                  返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.rpartition(str)                               类似于 partition()函数,不过是从右边开始查找.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.rstrip()                                      删除<span class="hljs-built_in"> string</span> 字符串末尾的空格.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.split(str=<span class="hljs-string">&quot;&quot;</span>, num<span class="hljs-built_in">=string</span><span class="hljs-built_in">.count</span>(str))          以 str 为分隔符切片<span class="hljs-built_in"> string</span>，如果 num有指定值，则仅分隔 num 个子字符串<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.splitlines(num<span class="hljs-built_in">=string</span><span class="hljs-built_in">.count</span>(<span class="hljs-string">&#x27;\n&#x27;</span>))            按照行分隔，返回一个包含各行作为元素的列表，如果 num 指定则仅切片 num 个行.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.startswith(obj, beg=<span class="hljs-number">0</span>,<span class="hljs-keyword">end</span>=len<span class="hljs-built_in">(string</span>))        检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 <span class="hljs-keyword">end</span> 指定值，则在指定范围内检查.<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.<span class="hljs-keyword">strip</span>([obj])                                  在<span class="hljs-built_in"> string</span> 上执行 lstrip()和 rstrip()<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.swapcase()                                    翻转<span class="hljs-built_in"> string</span> 中的大小写<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.title()                                       返回<span class="hljs-string">&quot;标题化&quot;</span>的<span class="hljs-built_in"> string</span>,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span><span class="hljs-built_in">.translate</span>(str, del=<span class="hljs-string">&quot;&quot;</span>)                        根据 str 给出的表(包含 <span class="hljs-number">256</span> 个字符)转换<span class="hljs-built_in"> string</span> 的字符,要过滤掉的字符放到 del 参数中<span class="hljs-built_in"></span><br><span class="hljs-built_in">string</span>.upper()                                       转换<span class="hljs-built_in"> string</span> 中的小写字母为大写<br></code></pre></td></tr></table></figure><h3 id="3-布尔值"><a href="#3-布尔值" class="headerlink" title="3. 布尔值"></a><strong>3. 布尔值</strong></h3><p>布尔值只有 <code>True</code>、<code>False</code>  两种值，当语句成立或者某个变量不为空值时，此时布尔判断的值为 <code>True</code>，否则为 <code>False</code>。 实际上，计算机并不认识 <code>True</code> 和 <code>False</code>，解释器会将 <code>True</code> 转变成数值 1，将<code>False</code> 转变为数值 0。在 Python 中也可以直接用 <code>True</code>、<code>False</code> 来表示布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1的布尔值为True，0的布尔值为False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span>))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># True的布尔值为True，False的布尔值为False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">True</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">False</span>)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 语句条件成立的情况下布尔值为True,否则为False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">4</span> &gt; <span class="hljs-number">2</span>)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 变量为空时布尔值为False,变量有值的时候布尔值为True</span><br>s1 = <span class="hljs-string">&quot;&quot;</span><br>s2 = <span class="hljs-string">&quot;aaa&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(s1))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(s1))  <span class="hljs-comment"># False</span><br>      <br><span class="hljs-comment"># 布尔值也可以直接进行数学运算，因为True相当于1,False相当于0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> + <span class="hljs-number">1</span>) <span class="hljs-comment"># 2</span><br><br><span class="hljs-comment"># 与或非操作：</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">0</span>)<br><span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>)<br><span class="hljs-built_in">bool</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>)<br><span class="hljs-built_in">bool</span>(<span class="hljs-keyword">not</span> <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 布尔值经常用在条件判断中:</span><br>age=<span class="hljs-number">18</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">18</span>:       <span class="hljs-comment"># 等价于bool(age &gt; 18)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;old&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;young&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a><strong>1. 算术运算符</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">2</span><br>b = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 加法</span><br><span class="hljs-built_in">print</span>(a + b)<br><br><span class="hljs-comment"># 减法</span><br><span class="hljs-built_in">print</span>(a - b)<br><br><span class="hljs-comment"># 乘法</span><br><span class="hljs-built_in">print</span>(a * b)<br><br><span class="hljs-comment"># 除法</span><br><span class="hljs-built_in">print</span>(a / b)<br><br><span class="hljs-comment"># 取余</span><br><span class="hljs-built_in">print</span>(a % b)<br><br><span class="hljs-comment"># 取整</span><br><span class="hljs-built_in">print</span>(a // b)<br><br><span class="hljs-comment"># 幂运算</span><br><span class="hljs-built_in">print</span>(a ** b)<br></code></pre></td></tr></table></figure><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a><strong>2. 比较运算符</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">2</span><br>b = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 等于</span><br><span class="hljs-built_in">print</span>(a == b)<br><br><span class="hljs-comment"># 不等于</span><br><span class="hljs-built_in">print</span>(a != b)<br><br><span class="hljs-comment"># 大于</span><br><span class="hljs-built_in">print</span>(a &gt; b)<br><br><span class="hljs-comment"># 小于</span><br><span class="hljs-built_in">print</span>(a &lt; b)<br><br><span class="hljs-comment"># 大于等于</span><br><span class="hljs-built_in">print</span>(a &gt;= b)<br><br><span class="hljs-comment"># 小于等于</span><br><span class="hljs-built_in">print</span>(a &lt;=b )<br></code></pre></td></tr></table></figure><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a><strong>3. 逻辑运算符</strong></h3><h4 id="3-1-常用逻辑运算符"><a href="#3-1-常用逻辑运算符" class="headerlink" title="3.1 常用逻辑运算符"></a>3.1 常用逻辑运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 与运算，两者都成立结果为真，只要有一者不成立结果为假</span><br>a <span class="hljs-keyword">and</span> b<br><br><span class="hljs-comment"># 或运算，两者都不成立结果为假，只要有一者成立结果为真</span><br>a <span class="hljs-keyword">or</span> b<br><br><span class="hljs-comment"># 非运算，与原来的结果相反</span><br><span class="hljs-keyword">not</span> a<br></code></pre></td></tr></table></figure><h4 id="3-2-and-和-or-与数字运算"><a href="#3-2-and-和-or-与数字运算" class="headerlink" title="3.2 and 和 or 与数字运算"></a><strong>3.2 and</strong> 和 <strong>or</strong> 与数字运算</h4><p>**运算规则：**能够明确得到结果时，就不需要往下计算了，结果就是第一个数；否则结果就是第二个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3</span>)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3</span>)  <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">0</span>)  <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><p>在 Python 中，0 表示 False，对于与运算，只要有一者不成立结果为假，因此第一行代码当看到 0 时，就能确定结果肯定为假，没有必要再看后面的值，所以结果为一开始看到的数字，即 0；</p><p>第二行代码中，看到第一个值为 1，此时还无法确定整个表达式的结果是真还是假，因此还要继续往下看，发现后面的值为 3，那么整个表达式的结果就为真，所以结果就为后面看到的这个数字，即 3；</p><p>第三行代码同理，看到第一个值为 2，此时还无法确定整个表达式的结果是真还是假，因此还要继续往下看，发现后面的值为 0，那么整个表达式的结果就为假，所以结果就为后面看到的这个数字，即 0；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>)  <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><p>或操作中，只要有一者成立结果为真。对于第一行代码，当看到 2 时，已经可以确定整个表达式的结果了，没有必要继续看下去，所以结果为第一个看到的数字，即位 2；</p><p>第二行代码中，看到第一个值为 0，此时还无法确定整个表达式的结果是真还是假，因此还要继续往下看，发现后面的值为 1，那么整个表达式的结果就为真，所以结果就为后面看到的这个数字，即 1；</p><p>第三行代码同理，看到第一个值为 0，此时还无法确定整个表达式的结果是真还是假，因此还要继续往下看，发现后面的值为 0，那么整个表达式的结果就为假，所以结果就为后面看到的这个数字，即 0；</p><p><strong>补充：</strong> 在没有()的情况下not 优先级高于 and，and优先级高于or，即优先级关系为( )&gt;not&gt;and&gt;or，同一优先级从左往右计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span>)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span>)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span>)  <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><h3 id="4-赋值运算符"><a href="#4-赋值运算符" class="headerlink" title="4. 赋值运算符"></a><strong>4. 赋值运算符</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">5</span><br><br>a = b      <span class="hljs-comment"># 普通赋值</span><br>a += b     <span class="hljs-comment"># 加法赋值，等价于 a = a + b</span><br>a -= b   <span class="hljs-comment"># 减法赋值，等价于 a = a - b</span><br>a *= b     <span class="hljs-comment"># 乘法赋值，等价于 a = a * b</span><br>a /= b     <span class="hljs-comment"># 除法赋值，等价于 a = a / b</span><br>a **= b    <span class="hljs-comment"># 幂赋值，等价于 a = a ** b</span><br>a %= b     <span class="hljs-comment"># 取余赋值，等价于 a = a % b</span><br>a //= b     <span class="hljs-comment"># 取整赋值，等价于 a = a // b</span><br></code></pre></td></tr></table></figure><h3 id="5-成员运算符"><a href="#5-成员运算符" class="headerlink" title="5. 成员运算符"></a><strong>5. 成员运算符</strong></h3><ul><li>**in：**如果在序列中找到指定的值，返回 True，否则返回 False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;aaa&quot;</span><br>b = <span class="hljs-string">&quot;bbb&quot;</span><br>c = <span class="hljs-string">&quot;aaaccc&quot;</span><br><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">in</span> c)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">in</span> c)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>**not in：**如果在序列中未找到指定的值，返回 True，否则返回 False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&quot;aaa&quot;</span><br>b = <span class="hljs-string">&quot;bbb&quot;</span><br>c = <span class="hljs-string">&quot;aaaccc&quot;</span><br><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">in</span> c)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">in</span> c)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="四、用户交互"><a href="#四、用户交互" class="headerlink" title="四、用户交互"></a>四、用户交互</h2><p>input 函数用于接收用户在终端输入的信息，当程序运行到input()时，程序会阻塞，只有接收到用户的键入操作，程序才会继续向下执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入用户名：&quot;</span>)<br><span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><p>**注意：**通过 <code>input</code> 方法接收到的数据都是字符串类型，如果需要操作的是其他类型的数据，需要进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">_age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入年龄：&quot;</span>)<br><span class="hljs-built_in">print</span>(_age, <span class="hljs-built_in">type</span>(_age))  <span class="hljs-comment"># 123 &lt;class &#x27;str&#x27;&gt;</span><br><br>age = <span class="hljs-built_in">int</span>(_age)<br><span class="hljs-built_in">print</span>(age, <span class="hljs-built_in">type</span>(_age))  <span class="hljs-comment"># 123 &lt;class &#x27;int&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、格式化输出"><a href="#五、格式化输出" class="headerlink" title="五、格式化输出"></a>五、格式化输出</h2><p>字符串格式化输出的三种方式：</p><ul><li><h5 id="方式一：-s"><a href="#方式一：-s" class="headerlink" title="方式一：%s"></a><strong>方式一：%s</strong></h5></li></ul><p>在 Python 中 <code>%s</code> 可以接收任何类型的数据，对于其他类型数据不必使用专门对应的占位符去替换（当然你想使用也是可以的，例如用 <code>%d</code> 来对整型数据进行占位替换）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按照位置和占位符一一对应，按照传值顺序进行替换，多了或少了都不行</span><br>name = <span class="hljs-string">&quot;cdc&quot;</span><br>age = <span class="hljs-number">18</span><br><br><span class="hljs-comment"># 单个值</span><br>info1 = <span class="hljs-string">&quot;my name is %s&quot;</span> % name<br><br><span class="hljs-comment"># 多个值</span><br>info2 = <span class="hljs-string">&quot;my name is %s and I&#x27;m %d years old&quot;</span> % (name, age)<br>info3 = <span class="hljs-string">&quot;my name is %s and I&#x27;m %s years old&quot;</span> % (name, age)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 以字典的形式进行传值，打破了位置的限制</span><br>info = <span class="hljs-string">&quot;my name is %(name)s and I&#x27;m %(age)s years old&quot;</span> % &#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;cdc&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(info) <span class="hljs-comment"># my name is cdc and I&#x27;m 18 years old</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="方式二：format"><a href="#方式二：format" class="headerlink" title="方式二：format"></a><strong>方式二：format</strong></h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按照位置传值</span><br>name = <span class="hljs-string">&quot;cdc&quot;</span><br>age = <span class="hljs-number">18</span><br>info = <span class="hljs-string">&quot;my name is &#123;&#125; and I&#x27;m &#123;&#125; years old&quot;</span>.<span class="hljs-built_in">format</span>(name, age)<br><br><span class="hljs-comment"># 按照索引传值</span><br>info = <span class="hljs-string">&quot;I&#x27;m &#123;1&#125; years old and my name is &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name, age)<br><br><span class="hljs-comment"># 使用关键字或者字典方式传值，打破位置限制</span><br>info = <span class="hljs-string">&quot;I&#x27;m &#123;name&#125; years old and my name is &#123;age&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">&quot;cdc&quot;</span>, age=<span class="hljs-number">18</span>)<br><br>kwargs = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;cdc&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br>info = <span class="hljs-string">&quot;my name is &#123;name&#125; and I&#x27;m &#123;age&#125; years old&quot;</span>.<span class="hljs-built_in">format</span>(**kwargs)  <span class="hljs-comment"># 使用**进行解包操作</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 填充与格式化</span><br><span class="hljs-comment"># 先取到值,然后在冒号后设定填充格式：[填充字符][对齐方式][宽度]</span><br><br><span class="hljs-comment"># *&lt;10：左对齐，总共10个字符，不够的用*号填充</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:*&lt;10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;开始执行&#x27;</span>))  <span class="hljs-comment"># 开始执行******</span><br><br><span class="hljs-comment"># *&gt;10：右对齐，总共10个字符，不够的用*号填充</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:*&gt;10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;开始执行&#x27;</span>))  <span class="hljs-comment"># ******开始执行</span><br><br><span class="hljs-comment"># *^10：居中显示，总共10个字符，不够的用*号填充</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:*^10&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;开始执行&#x27;</span>))  <span class="hljs-comment"># ***开始执行***</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 精度与进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;salary:.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(salary=<span class="hljs-number">1232132.12351</span>))  <span class="hljs-comment">#精确到小数点后3位，四舍五入，结果为：1232132.124</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:b&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">123</span>))  <span class="hljs-comment"># 转成二进制，结果为：1111011</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:o&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">9</span>))  <span class="hljs-comment"># 转成八进制，结果为：11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">15</span>))  <span class="hljs-comment"># 转成十六进制，结果为：f</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:,&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">99812939393931</span>))  <span class="hljs-comment"># 千分位格式化，结果为：99,812,939,393,931</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="方式三：f"><a href="#方式三：f" class="headerlink" title="方式三：f"></a><strong>方式三：f</strong></h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 该方法是从 Python 3.6 版本才开始引入使用的</span><br>name = <span class="hljs-string">&quot;cdc&quot;</span><br>age = <span class="hljs-number">18</span><br>info = <span class="hljs-string">f&quot;my name is <span class="hljs-subst">&#123;name&#125;</span> and I&#x27;m <span class="hljs-subst">&#123;age&#125;</span> years old&quot;</span><br><br><span class="hljs-comment"># &#123;&#125; 中除了可以传变量，也支持任意合法的Python表达式</span><br><span class="hljs-comment"># 比如：数学表达式</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-number">3</span>*<span class="hljs-number">3</span>/<span class="hljs-number">2</span>&#125;</span>&#x27;</span>) <span class="hljs-comment"># 4.5</span><br><br><span class="hljs-comment"># 比如：函数的调用</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo say hello&#x27;</span>)<br>    <span class="hljs-keyword">return</span> n<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;foo(<span class="hljs-number">10</span>)&#125;</span>&#x27;</span>) <span class="hljs-comment"># 会调用foo(10),然后打印其返回值</span><br><br><span class="hljs-comment"># 比如：调用对象的方法</span><br>name=<span class="hljs-string">&#x27;CDC&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name.lower()&#125;</span>&#x27;</span>) <span class="hljs-comment"># cdc</span><br></code></pre></td></tr></table></figure><p>**区别：**以上三种字符串格式化方式的速度是依次越来越快的，但是最快的第三种只支持 <code>Python3.6</code> 及以上版本。</p><h2 id="六、编码简介"><a href="#六、编码简介" class="headerlink" title="六、编码简介"></a>六、编码简介</h2><ul><li>ASCII主要用于显示现代英语和其他西欧语言，其多只能用 8 位来表示（一个字节），即：2**8 &#x3D; 256，所 以，ASCII码多只能表示 256 个符号</li><li>GBK     国标码占用2个字节，兼容对应的ASCII码，由于国标码使用两个字节，所以对应ASCII码时，第一个字节全为0</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">字母A:</span> <span class="hljs-number">0100 </span><span class="hljs-number">0001</span>           <span class="hljs-comment"># ASCII </span><br><span class="hljs-string">字母A:</span> <span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0100 </span><span class="hljs-number">0001</span> <span class="hljs-comment"># 国标码</span><br></code></pre></td></tr></table></figure><ul><li>Unicode万国码4个字（32位） </li><li>UTF-8      每个字符最少占8位，每个字符占用的字节数不定，根据文字内容进行具体编码。比如，英文就一个字节，汉字占3个字节。</li><li>UTF-16    每个字符最少占16位</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># a=bytes(&#x27;hello&#x27;,&#x27;utf8&#x27;)</span><br><span class="hljs-comment"># a=bytes(&#x27;中国&#x27;,&#x27;utf8&#x27;)</span><br><br><br>a = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;中国&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>b = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;gbk&#x27;</span>)<br><span class="hljs-comment">#</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># b&#x27;\xe4\xb8\xad\xe5\x9b\xbd&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;h&#x27;</span>))  <span class="hljs-comment"># 其十进制 unicode 值为: 104</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;中&#x27;</span>))  <span class="hljs-comment"># 其十进制 unicode 值为:20013</span><br><br><span class="hljs-comment">#  h   e  l   l   o</span><br><span class="hljs-comment"># 104 101 108 108 111   编码后结果:与ASCII表对应</span><br><br><br><span class="hljs-comment">#     中                国</span><br><span class="hljs-comment">#   \xd6\xd0         \xb9\xfa       gbk编码后的字节结果</span><br><span class="hljs-comment"># \xe4 \xb8 \xad   \xe5 \x9b \xbd    utf8编码后的字节结果</span><br><span class="hljs-comment"># 228 184 173      229 155  189        a[:]切片取</span><br><br><br>c = a.decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>d = b.decode(<span class="hljs-string">&#x27;gbk&#x27;</span>)<br><span class="hljs-comment"># b=a.decode(&#x27;gbk&#x27;) :很明显报错</span><br><br><span class="hljs-built_in">print</span>(c)  <span class="hljs-comment"># 中国</span><br><span class="hljs-built_in">print</span>(d)  <span class="hljs-comment"># hello</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Python</title>
    <link href="/2019/03/15/0001-Python%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/03/15/0001-Python%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前戏"><a href="#一、前戏" class="headerlink" title="一、前戏"></a>一、前戏</h2><h3 id="1-编程语言简介"><a href="#1-编程语言简介" class="headerlink" title="1. 编程语言简介"></a>1. 编程语言简介</h3><p>在生活中，如果你想和外国人进行交流，你就得懂得他们国家的语言（汉语、英语、德语、法语等等），同样的，编程语言就是人与计算机之间沟通的一门语言，它能够将我们想要的操作翻译成计算机能够看得懂的指令，从而让计算机按照人类的想法去工作。</p><p>编程语言的种类很多，你可能听说过 C语言，Java语言，Go语言等等，尽管语法、实现机制都有差异，但是其本质和目的都是一样的。目前编程语言都可以分为<strong>解释型</strong>和<strong>编译型</strong>两大类。</p><h4 id="1-1-编译型语言"><a href="#1-1-编译型语言" class="headerlink" title="1.1 编译型语言"></a>1.1 编译型语言</h4><p>编译型语言会使用编译器，先把源程序的每一条语句都编译成机器语⾔，并保存成二进制⽂件，再去执行这个二进制文件。这样程序运行时计算机可以直接以机器语言的方式来运行此程序，所以速度很快。简而言之就是先翻译再执行，典型的代表语言有 Go语言，C语言 等。</p><ul><li>**优点：**编译器一般会有预编译的过程，会对代码进行优化。因为编译只做一次，运行时不需要再次编译，所以编译型语言的程序执行效率高，可以脱离语言环境独立运行。</li><li>**缺点：**编译之后如果需要修改源代码，需要对整个模块重新编译。编译的时候会根据对应的运行环境生成机器码，因此不同的操作系统之间移植会存在问题，需要根据运行的操作系统环境编译不同类型的可执行文件。如 Windows 的可执行文件类型是 <code>.exe</code>类型文件，在 Linux 环境上就无法使用。</li></ul><h4 id="1-2-解释型语言"><a href="#1-2-解释型语言" class="headerlink" title="1.2 解释型语言"></a>1.2 解释型语言</h4><p>解释型语言会使用解释器，在执行程序时一条一条的将源代码解释成机器语言给计算机来执行，所以运行速度是不如编译后的程序运行的快的（这是因为计算机不能直接识别并执行我们写的语句，它只能认识机器语言，即二进制形式）。简而言之，就是边翻译边执行，典型的代表语言有 Python。</p><ul><li><strong>优点</strong>：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）；程序灵活，修改代码的时候直接修改就可以了，可以快速部署，不用停机维护。</li><li><strong>缺点</strong>：每次运行的时候都要解释一遍，性能上不如编译型语言。</li></ul><img src="/img/blog/about_python/00023.png" style="zoom:80%;" />  <h2 id="二、Python简介"><a href="#二、Python简介" class="headerlink" title="二、Python简介"></a>二、Python简介</h2><h4 id="1-Python优点"><a href="#1-Python优点" class="headerlink" title="1. Python优点"></a>1. Python优点</h4><ul><li>开发效率高，有丰富的第三方库和模块；</li><li>是一门高级语言，开发过程中无需考虑管理程序使用内存等一系列底层细节问题；</li><li>可移植性强；</li><li>可拓展性强；</li><li>可嵌入性强；</li></ul><h4 id="2-Python缺点"><a href="#2-Python缺点" class="headerlink" title="2. Python缺点"></a>2. Python缺点</h4><ul><li>由于是解释型语言，所以运行速度慢；</li><li>代码不能加密，源码是用明文形式存放的；</li><li>线程不能利用CPU问题，GIL(Global Interpreter Lock)，即全局解释器锁导致该问题；</li></ul><p>更多相关介绍 <em><a href="https://baike.baidu.com/item/Python/407313?fr=aladdin">戳这里……</a></em></p><p>由于Python的简易且拥有强大的三方库支持，自诞生以来就一直受到广大开发者的喜爱。</p><h2 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h2><h3 id="1-解释器安装"><a href="#1-解释器安装" class="headerlink" title="1. 解释器安装"></a>1. 解释器安装</h3><h4 id="1-1-下载安装"><a href="#1-1-下载安装" class="headerlink" title="1.1 下载安装"></a>1.1 下载安装</h4><p>官网下载地址：<em><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></em></p><ul><li>第一步，访问官网，根据自己的计算机系统选择合适的安装包资源（以下步骤只针对windows）</li></ul><img src="/img/blog/about_python/00001.png" style="zoom: 50%;" /> <ul><li>第二步，选择版本（推荐 3.6 版本及其以上）</li></ul><img src="/img/blog/about_python/00002.png" style="zoom: 67%;" /> <ul><li>第三步，傻瓜式安装，疯狂点击下一步</li></ul><img src="/img/blog/about_python/00003.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00004.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00005.png" style="zoom: 40%;" /> <img src="/img/blog/about_python/00006.png" style="zoom: 50%;" /> <h4 id="1-2-安装验证"><a href="#1-2-安装验证" class="headerlink" title="1.2 安装验证"></a>1.2 安装验证</h4><ul><li>第一步，打开命令提示符</li></ul><img src="/img/blog/about_python/00007.png" style="zoom: 40%;" /> <ul><li>第二步，输入 “python”，按下回车键，若出现相关信息，则证明安装成功</li></ul><img src="/img/blog/about_python/00008.png" style="zoom: 50%;" /> <h4 id="1-3-常见问题"><a href="#1-3-常见问题" class="headerlink" title="1.3 常见问题"></a>1.3 常见问题</h4><h5 id="1-3-1-情形一，系统找不到应用程序"><a href="#1-3-1-情形一，系统找不到应用程序" class="headerlink" title="1.3.1 情形一，系统找不到应用程序"></a>1.3.1 情形一，系统找不到应用程序</h5><p>命令提示符输入python指令验证时，提示 “python 不是内部或外部命令，也不是可运行的程序” 或者直接会打开商城搜索可应用程序，这是由于未配置系统环境变量引起的。</p><p>将解释器的安装目录配置到系统环境变量中即可：</p><img src="/img/blog/about_python/00009.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00010.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00011.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00012.png" style="zoom: 50%;" /> <h5 id="1-3-2-情形二，版本不一致"><a href="#1-3-2-情形二，版本不一致" class="headerlink" title="1.3.2 情形二，版本不一致"></a><strong>1.3.2 情形二，版本不一致</strong></h5><p> 命令提示符输入python指令验证时，显示的python版本信息非安装的版本，例如下载安装的版本是 python 3.8.9，但输入指令显示的是 python 3.6.6，这是由于本地安装了多个版本的python，且系统读取环境变量时是从上往下读取的，因此想要使用某个版本的 python解释器，只需将该版本对应的环境变量提到最前面即可。</p><img src="/img/blog/about_python/00013.png" style="zoom: 40%;" />  <img src="/img/blog/about_python/00014.png" style="zoom: 40%;" /> <img src="/img/blog/about_python/00015.png" style="zoom: 40%;" />  <img src="/img/blog/about_python/00016.png" style="zoom: 40%;" /> <h5 id="1-3-3-情形三，同时使用多个解释器"><a href="#1-3-3-情形三，同时使用多个解释器" class="headerlink" title="1.3.3 情形三，同时使用多个解释器"></a>1.3.3 情形三，同时使用多个解释器</h5><p>针对于 1.3.2 的情形，修改环境变量可以实现使用指定的解释器，但是如果想要切换解释器，需要不停的修改环境变量对应的位置，十分麻烦。可以通过以下方式实现直接调用不同版本的python：</p><ul><li>指定解释器位置使用对应的解释器（推荐）</li></ul><img src="/img/blog/about_python/00017.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00018.png" style="zoom: 50%;" /> <ul><li>重命名解释器名（不推荐）</li></ul><img src="/img/blog/about_python/00019.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00021.png" style="zoom: 50%;" /> <img src="/img/blog/about_python/00020.png" style="zoom: 50%;" />  <img src="/img/blog/about_python/00022.png" style="zoom: 50%;" /> <h3 id="2-IDE-安装"><a href="#2-IDE-安装" class="headerlink" title="2. IDE 安装"></a>2. IDE 安装</h3><p>Python 对开发工具没有什么限制，可以根据开发者的喜好自行选择。比较推荐的是使用 Pycharm 进行开发。</p><p>官网地址：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p>]]></content>
    
    
    <categories>
      
      <category>python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
